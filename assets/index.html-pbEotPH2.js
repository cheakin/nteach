import{_ as i,c as a,a as n,o as e}from"./app-B-efjkfq.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="基础命令" tabindex="-1"><a class="header-anchor" href="#基础命令"><span>基础命令</span></a></h2><h3 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令"><span>镜像命令</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker image  #查看本地镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker search XXX  #从远程仓库查找镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>--- docker search mysql --filter=start=3000 #从远程仓库查找收藏大于3000的mysql镜像</p><p>docker pull XXX[:tag] #下载指定镜像,tag为版本号,<em>tag的缺省值是latest</em></p><ul><li></li><li></li></ul><p>docker rmi -f 镜像id #删除指定镜像</p><p>docker rmi -f 镜像id 镜像id 镜像id #删除多个指定镜像</p><p>docker rmi $(docker image -aq) #删除全部镜像</p><h3 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令"><span>容器命令</span></a></h3><h4 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器"><span>启动容器</span></a></h4><p><em>有了镜像才可以创建容器</em></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>*docker run [可选参数] 镜像id*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>#参数说明</p><p>--name=&quot;NAME&quot; 容器名称(用以区分容器)</p><p>-d 后台方式运行</p><p>-it 使用交互方式运行，进入容器查看内容</p><p>exit #容器停止并推出，从容器中退出至主机docker</p><p>Ctrl+P+Q #容器不停止退出</p><p>-p 指定容器端口 -p 8080:8080</p><p>-p ip:主机端口:容器端口</p><p>-p 主机端口:容器端口 (常用)</p><p>-p 容器端口</p><p>-e 配置容器（如数据库密码）</p><h4 id="查看容器" tabindex="-1"><a class="header-anchor" href="#查看容器"><span>查看容器</span></a></h4><p>docker ps [可选参数] #产看所有容器</p><p>-a, --all #当前正在运行的容器</p><p>-f, --filter filter #筛选容器</p><p>-n, --last int #最近创建的容器</p><p>-q, --quiet #仅列出容器</p><h4 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器"><span>删除容器</span></a></h4><p>docker rm 容器id #删除指定容器（不能删除正在运行的容器）</p><p>docker rm -f 容器id #强制删除指定容器</p><p>docker ps -f $(docker ps -aq) #删除所有容器</p><p>docker ps -a -q |xargs docker rm #删除所有容器(linux命令)</p><h4 id="操作容器" tabindex="-1"><a class="header-anchor" href="#操作容器"><span>操作容器</span></a></h4><p>docker start 容器id #启动指定容器</p><p>docker restart 容器id #重启指定容器</p><p>docekr stop 容器id #停止指定容器</p><p>docker kill 容器id #强制停止指定容器</p><h3 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令"><span>其他命令</span></a></h3><p>docker -d 容器id #后台启动</p><p>docker logs #产看docker日志</p><p>docker logs -f -t 容器id/镜像id</p><p>docker inspect 容器id/镜像id #查看指定容器/镜像的详细信息</p><p>docker exec -it 容器id bashShell #进入正在运行容器的内部1，进入容器后开启一个新终端</p><p>docker attach 容器id #进入正在运行容器的内部2，进入容器后打开正砸运行的终端</p><p>docker cp 容器id:容器内路径 目的主机路径</p><h3 id="commit镜像" tabindex="-1"><a class="header-anchor" href="#commit镜像"><span>commit镜像</span></a></h3><p><em>docker中的镜像是一个分层目录的（多个镜像是可以使用相同的目录的）</em></p><p>在我们修改了一个容器的内容后，我们可以将这个容器构造成为一个新的镜像，一便我们在以后复用这个镜像</p><p>docker commit -m=&quot;test&quot; -a=&quot;CK&quot; 容器id to 新容器名:新tag #提交一个新的镜像</p><h2 id="容器数据卷" tabindex="-1"><a class="header-anchor" href="#容器数据卷"><span>容器数据卷</span></a></h2><p><em>当我们在docker中部署了数据库，我们在写入数据库后，数据同样保存到了docker中，假如该容器被删除了，那么我们的数据也将丢失</em></p><p>所以我们可以利用‘数据卷’技术，使得容器和主机公用同一个目录，或多个容器使用同一个目录</p><h4 id="使用数据卷" tabindex="-1"><a class="header-anchor" href="#使用数据卷"><span>使用数据卷</span></a></h4><p>docker run -it -v 主机目录:容器目录 镜像id #以目录映射和交互的方式运行指定镜像</p><p>-v 容器内路径 #匿名挂载</p><p>-v 卷名:容器内路径 #具名挂载</p><p>-v 主机路径:容器路径 #指定路径挂载</p><h4 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h4><p>docker pull mysql5.7</p><p>docker images</p><p>docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -v /home/mysql/log:/var/log/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql5.7 mysql:5.7</p><p>或 docker run -d -p 3306:3306 -v x:/environment/docker/mysql/conf:/etc/mysql/conf.d -v x:/environment/docker/mysql/data:/var/lib/mysql -v x:/environment/docker/mysql/log:/var/log/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql5.7 mysql:5.7</p><h4 id="具名挂载和匿名挂载" tabindex="-1"><a class="header-anchor" href="#具名挂载和匿名挂载"><span>具名挂载和匿名挂载</span></a></h4><p>如:</p><p>docker run -d -p --name nginx02 -v juming-nginx:/etc/nginx:ro nginx #readOnly，该路径只能由主机操作</p><p>docker run -d -p --name nginx02 -v juming-nginx:/etc/nginx:rw nginx #readWrite</p><h3 id="数据共享卷" tabindex="-1"><a class="header-anchor" href="#数据共享卷"><span>数据共享卷</span></a></h3><p>docker run -d -p 331.:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --valumes-from-mysql01 mysql:5.7 #启动mysql5.7，且数据卷指定到容器mysql01，与mysql01共享（若mysql01是指定路径挂载，则3个路径都可以（备份而非指向））</p><p>由此，容器建间的配置信息和传递，数据全容器的生命周期一直持续到没有容器使用为止。而一旦数据持久化到了本地，则不会再删除了</p><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h2><p><em>dockerfile就是构建镜像的文件</em></p><p>镜像是一层层的，脚本命令是一个个的，所以一个命令就是一层</p><p>如</p><p>docker build -f /home/docker-test-volume/dockerfile1 -t ck:1.0 . #构建一个名为ck版本为1.0的镜像，最后有一个点不要漏了</p><p>-f 执行的文件路径，缺省值为当前目录下的dockerfile</p><p>-t 指定创建出的文件名机版本号</p><h3 id="构建dockerfile" tabindex="-1"><a class="header-anchor" href="#构建dockerfile"><span>构建Dockerfile</span></a></h3><p>每个保留的关键字（指令）都必须是大写；</p><p>执行从上到下；</p><p>#表示注释；</p><p>每一个指令都会创建提交一个新的镜像层，并提交</p><h3 id="dockerfile的指令" tabindex="-1"><a class="header-anchor" href="#dockerfile的指令"><span>Dockerfile的指令</span></a></h3><p>FROM #指定基础镜像，表示此次镜像在from指定的镜像之上构建</p><p>MAINTAINER #镜像作者</p><p>RUN #镜像构建是需要运行的命令</p><p>ADD #步骤：tomcat镜像。这个tomcat压缩包！添加内容</p><p>WORKDIR #镜像的工作目录</p><p>VOLUME #挂载的目录</p><p>EXPOSE #保留端口配置</p><p>CMD #指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</p><p>ENTRYPOINT #指定这个容器启动的时候要运行的命令，可以追加命令</p><p>ONBUILD #当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令并触发</p><p>COPY #类似ADD，将我们文件拷贝到镜像中</p><p>ENV #构建时设置环境变量</p><h2 id="docker网络" tabindex="-1"><a class="header-anchor" href="#docker网络"><span>Docker网络</span></a></h2><p>docker在安装后会在主机上注册一个网卡，docker内部则是使用 veth pair 技术。容器1连接到docker0，docker0再转发到目的地址</p><p>docker exec -it 容器id ip addr #查看指定容器的ip地址</p><p><em>docker top</em> *容器id #*<em>查看指定容器的进程信息</em></p><p><em>docker port</em> *容器id #*<em>查看指定容器的端口</em></p><p><em>docker inspect</em> <em>容器id</em></p><ul><li></li><li></li></ul><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link"><span>--link（）</span></a></h3><p>docker exec -it tomcat01 ping tomcat02 #tomcat01容器 ping tomcat02容器</p><p>docker run -d -l --name tomcat01 --link tomcat02 tomcat #将 tomcat01容器 与 tomcat02容器 连接起来</p><p>--link的本质是新增了host映射，就可以通过名称ping</p><h3 id="自定义网络" tabindex="-1"><a class="header-anchor" href="#自定义网络"><span>自定义网络</span></a></h3><p>docker network ls #产看docker的网络配置</p><p>docker network inspect redis-net #查看指定网络配置的详细信息</p><p>docker network rm XXX # 删除指定网络配置</p><h4 id="网络模式" tabindex="-1"><a class="header-anchor" href="#网络模式"><span>网络模式：</span></a></h4><p>brige 桥接（默认）,在默认启动时缺省值时 --net brige</p><p>none 不配置</p><p>host 和宿主共享</p><p>container 容器网络连通（使用少）</p><p>docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</p><p>--driver bridge 桥接，缺省值是127.X.0.0，x又18依次递增</p><p>--subnet 192.168.0.0/16 子网地址(192.168.255.255)，缺省值是172.x.0.0/16</p><p>--gateway 192.168.0.1 网关，缺省值是172.x.0.1</p><p><em>自定义网络不仅可以通过ip连通，也可以通过容器名连通</em></p><ul><li></li><li></li><li></li><li></li></ul><p><em>将容器连接到我们的网络中</em></p><p><em>docker network connect mynet tomcat01</em></p><ul><li></li><li></li></ul><p>docker 是将这个容器连接加入到我们自定义的网络中，此时这个容器就要两个ip了</p><h2 id="dockercompose" tabindex="-1"><a class="header-anchor" href="#dockercompose"><span>DockerCompose</span></a></h2><p>管理多个描述文件(DockerCompose)，定义运行多个容器服务</p><p>Compose是docker的开源项目,需要安装</p><h3 id="三个步骤" tabindex="-1"><a class="header-anchor" href="#三个步骤"><span>三个步骤</span></a></h3><ul><li>使dockerfile在我们的项目中可以正常运行</li><li>写docker-compose.yml配置多个容器服务</li><li><code>docker compose up</code> 启动</li></ul><p>实例:</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>version: &quot;3.9&quot;  # optional since v1.27.0</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  web:</span></span>
<span class="line"><span>    build: .</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - &quot;5000:5000&quot;</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - .:/code</span></span>
<span class="line"><span>      - logvolume01:/var/log</span></span>
<span class="line"><span>    links:</span></span>
<span class="line"><span>      - redis</span></span>
<span class="line"><span>  redis:</span></span>
<span class="line"><span>    image: redis</span></span>
<span class="line"><span>volumes:</span></span>
<span class="line"><span>  logvolume01: {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程：</p><ol><li>创建网络</li><li>执行 docker-compose.yaml</li><li>启动服务</li></ol><p>启动一个compose, 容器会在同一个网络一下, 我们可以通过域名(服务名)访问</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker-compose down  #停止容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="yaml-规则" tabindex="-1"><a class="header-anchor" href="#yaml-规则"><span>yaml 规则</span></a></h3><p>docker-compose的核心</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>version: &quot;3.9&quot;  #版本</span></span>
<span class="line"><span>services:               #服务</span></span>
<span class="line"><span>    #服务1</span></span>
<span class="line"><span>  web:                      </span></span>
<span class="line"><span>    #服务配置</span></span>
<span class="line"><span>    build: .</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>    links:</span></span>
<span class="line"><span>  #服务2</span></span>
<span class="line"><span>  redis:</span></span>
<span class="line"><span>    image: redis</span></span>
<span class="line"><span>#其他配置</span></span>
<span class="line"><span>network:</span></span>
<span class="line"><span>configs:</span></span>
<span class="line"><span>volumes:</span></span>
<span class="line"><span>  logvolume01: {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker基础、原理、网络、服务、集群、错误排查、日志</p><h2 id="docker-swarm" tabindex="-1"><a class="header-anchor" href="#docker-swarm"><span>Docker Swarm</span></a></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2818547/1622616877393-65a2ed97-59dd-4cda-857c-466e7c5b2259.png" alt="image.png"></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docekr swarm init  #开启DockerSwarm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>生成主键点init</li><li>加入（管理者、worker），管理者管理worker</li></ol><p>宕机后会自动选举出leader</p><h3 id="raft一致性协议" tabindex="-1"><a class="header-anchor" href="#raft一致性协议"><span>Raft一致性协议</span></a></h3><p>docker swarm采用raft一致性协议（选举由<strong>大多数</strong>选出），在搭建集群时可以做到服务的高可用。（至少3台，才能在由机器宕机后选举出）</p><h3 id="弹性-扩缩容-集群" tabindex="-1"><a class="header-anchor" href="#弹性-扩缩容-集群"><span>弹性！扩缩容！集群！</span></a></h3><p>以docker compose up 启动一个单机项目</p><p>集群：swarm</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>容器 =》 服务！</p><p>容器 =》 服务！ =》 副本！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2818547/1622617155811-572ba574-fa10-491f-8abf-6061a6a3c8fd.png" alt="image.png"></p><h3 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker run  #容器启动</span></span>
<span class="line"><span>docker service  #服务启动</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务管理只能在管理者中管理</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docekr service ls  查看docker中的服务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每一个服务可以都创建多个副本，docker会将部分服务分配到节点中</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docekr service create -p 8888:80 --name my-nginx nginx  #创建服务</span></span>
<span class="line"><span>docker service update --replices 10 my-nginx  #将my-nginx扩展到10个副本</span></span>
<span class="line"><span>docekr service scale my-nginx=5  #服务动态扩缩容，效果同--replices</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>docker service rm my-nginx  #移除服务</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>副本仍然是以容器的方式去运行的，如图</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2818547/1622617034971-9a9832b2-62dd-4c70-8dea-6323238bf47f.png" alt="image.png"></p><p>命令-&gt;管理-&gt;api-&gt;调度-&gt;工作节点（创建task容器）</p><p>在节点中可以运行节点本地的服务，工作节点才可运行集群中的服务（非工作节点不可以运行）（参考 <code>--mode命令</code> ），如图</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2818547/1622617618830-c01496aa-e9f9-4423-8bc8-92fd7813a8dc.png" alt="image.png"></p><p>swarm中的网络</p><ul><li>Overlay</li></ul><p>docker部署在不同机器上，只要docker加入同一个网络，则容器间可以ping通</p><ul><li>ingress</li></ul><p>特殊overlay网络，可以实现容器间的负载均衡</p><h2 id="docker-stack" tabindex="-1"><a class="header-anchor" href="#docker-stack"><span>Docker Stack</span></a></h2><p>docker-compose 单机部署</p><p>docker stack 集群部署</p><p>docker stack deploy xxx.yaml</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>version: &quot;3&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  wordpress:</span></span>
<span class="line"><span>    image: wordpress</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 80:80</span></span>
<span class="line"><span>    networks:</span></span>
<span class="line"><span>      - overlay</span></span>
<span class="line"><span>    environment:</span></span>
<span class="line"><span>      WORDPRESS_DB_HOST: db:3306</span></span>
<span class="line"><span>      WORDPRESS_DB_USER: wordpress</span></span>
<span class="line"><span>      WORDPRESS_DB_PASSWORD: wordpress</span></span>
<span class="line"><span>    deploy:</span></span>
<span class="line"><span>      mode: replicated</span></span>
<span class="line"><span>      replicas: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-secret" tabindex="-1"><a class="header-anchor" href="#docker-secret"><span>Docker Secret</span></a></h2><p>配置密码，创建证书</p><p>略</p><h2 id="docker-config" tabindex="-1"><a class="header-anchor" href="#docker-config"><span>Docker Config</span></a></h2><p>略</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="docker容器启用spring-profiles" tabindex="-1"><a class="header-anchor" href="#docker容器启用spring-profiles"><span><a href="https://segmentfault.com/a/1190000011367595" target="_blank" rel="noopener noreferrer">Docker容器启用Spring Profiles</a></span></a></h3><p>https://segmentfault.com/a/1190000011367595 https://www.cnblogs.com/woshimrf/p/springboot-docker.html</p><h3 id="docker中的容器与宿主机共享网络的方式" tabindex="-1"><a class="header-anchor" href="#docker中的容器与宿主机共享网络的方式"><span>Docker中的容器与宿主机共享网络的方式</span></a></h3><ol><li>docker在创建时就会在宿主机上创建一张虚拟网卡，docker中的容器都会使用这张虚拟网考。所以，在运行容器时，配置住宿主机的ip未此即可（一般是x.x.x.1）</li><li>将容器的网络模式使用host就可以将容器和宿主机共享网络了。网络模式有host、bridge、none。</li></ol><h3 id="docker设置容器重启方式" tabindex="-1"><a class="header-anchor" href="#docker设置容器重启方式"><span>docker设置容器重启方式</span></a></h3><p><code>docker update redis --restart=alwasys</code></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>no</td><td>默认策略，在容器退出时不重启容器</td></tr><tr><td>on-failure</td><td>在容器非正常退出时（退出状态非0），才会重启容器</td></tr><tr><td>on-failure:3</td><td>在容器非正常退出时重启容器，最多重启3次</td></tr><tr><td>always</td><td>在容器退出时总是重启容器</td></tr><tr><td>unless-stopped</td><td>在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</td></tr></tbody></table><h3 id="docker远程连接" tabindex="-1"><a class="header-anchor" href="#docker远程连接"><span>docker远程连接</span></a></h3><p>windows下开启了远程连接且已打开端口，但还是无法连接，可以尝试管理员cmd执行下面的命令（your-public-ip就是你本机的IP地址）</p><p><code>netsh interface portproxy add v4tov4 listenport=2375 connectaddress=127.0.0.1 connectport=2375 listenaddress=&lt;your-public-ip&gt; protocol=tcp</code></p><h3 id="idea中使用远程docker发布" tabindex="-1"><a class="header-anchor" href="#idea中使用远程docker发布"><span>IDEA中使用远程docker发布</span></a></h3><ol><li><p>IDEA安装docker，连接</p><ul><li>下载docker插件</li></ul></li></ol><ul><li>连接远程docker</li></ul><ol start="2"><li><p>编写<code>Dockerfile</code>文件，例如</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基础镜像，使用alpine操作系统，使用openjkd11</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FROM</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> openjdk:11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#拷贝jar包</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">COPY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> target/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.jar</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 声明挂载点，容器内此路径会对应宿主机的某个文件夹</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#VOLUME [&quot;/point&quot;, &quot;/tempfile&quot;, &quot;/logs&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 暴露的端口</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPOSE</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 启动容器时的进程</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-jar</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/app.jar</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">--spring.profiles.active=test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置启动参数</p><ul><li>安装docker插件后dockerfile文件会有启动按钮</li></ul></li></ol><ul><li>设置启动参数</li></ul><ul><li>还可以设置启动前的操作，如maven打包(<code>clean package -Dstaging=true</code>)</li></ul><ol start="4"><li><p>启动</p><p>略</p></li></ol><h3 id="修改mysql容器中的时区" tabindex="-1"><a class="header-anchor" href="#修改mysql容器中的时区"><span>修改MySQL容器中的时区</span></a></h3><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 1. 进入mysql容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#2. 设置系统时间</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ln</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -sf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share/zoneinfo/Asia/Shanghai</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/localtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Asia/Shanghai</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/timezone</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 3. 退出容器</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 4. 重启mysql</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> restart</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 5. 查看mysql时间</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> now()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参考：<a href="https://www.jianshu.com/p/1fb02ae38fc5" target="_blank" rel="noopener noreferrer">Docker修改Mysql容器系统时间 - 简书 (jianshu.com)</a></p></blockquote><h2 id="一些docker容器的安装命令" tabindex="-1"><a class="header-anchor" href="#一些docker容器的安装命令"><span>一些Docker容器的安装命令</span></a></h2><h3 id="安装minio" tabindex="-1"><a class="header-anchor" href="#安装minio"><span>安装MinIO</span></a></h3><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 下载镜像</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> minio/minio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 启动容器</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 9000:9000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 9001:9001</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-e </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">MINIO_ACCESS_KEY=admin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-e </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">MINIO_SECRET_KEY=admin123456</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--restart=always </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--name </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">minio</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">minio/minio </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>MinIO SDK地址 <a href="https://docs.min.io/docs/java-client-api-reference.html" target="_blank" rel="noopener noreferrer">MinIO | Java Client API Reference(官方)</a><a href="http://docs.minio.org.cn/docs/master/java-client-api-reference#putObject" target="_blank" rel="noopener noreferrer">Java Client API参考文档 | Minio中文文档(中文)</a></p></blockquote><h3 id="安装rancher" tabindex="-1"><a class="header-anchor" href="#安装rancher"><span>安装Rancher</span></a></h3><p>#Rancher</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --restart=unless-stopped</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8080:80</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8443:443</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --privileged</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rancher</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rancher/rancher:stable</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># --privileged：忽略证书</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#或</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --restart=unless-stopped</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8080:80</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 8443:443</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /mydata/rancher/rancher-data:/var/lib/rancher/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/timezone:/etc/timezone</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/localtime:/etc/localtime</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rancher/rancher:stable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装mysql" tabindex="-1"><a class="header-anchor" href="#安装mysql"><span>安装MySQL</span></a></h3><p>#MySQL</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /mydata/mysql/data:/var/lib/mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /mydata/mysql/conf.d:/etc/mysql/conf.d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MYSQL_ROOT_PASSWORD=root</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3306:3306</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql:5.7</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -e MYSQL_ROOT_PASSWORD=123456 指定初始密码</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># -e TZ=Asia/Shanghai 设置时区，提前想好要不要设置</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建完后如果需要远程连接的话，执行下面指令。（高版本的话，下面指令要分开执行，不能合成一条）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> identified</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">123456</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 创建账户</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">grant</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> all</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> privileges</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> on</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> with</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grant</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> option</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 赋予权限</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">flush</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> privileges</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 刷新</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 修改时区1，启动时携带参数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TZ=Asia/Shanghai</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 修改时区2，设置容器时区</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">date</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ln</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -sf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share/zoneinfo/Asia/Shanghai</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/localtime</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exit</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 退出重启docker</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> restart</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 修改时区3，修改mysql配置</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /bin/bash</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 进入容器 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -uroot</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 连接 mysql 服务 </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> time_zone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">+08:00</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 设置全局会话时区 </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> session</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> time_zone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">+08:00</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 设置当前会话时区 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> variables</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> like</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%time_zone%</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 设置后查看 Mysql 时区配置属性。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,215)]))}const r=i(l,[["render",p],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/n0zy84hb/","title":"Docker","lang":"zh-CN","frontmatter":{"title":"Docker","tags":["Docker"],"createTime":"2025/02/23 23:06:50","permalink":"/article/n0zy84hb/"},"headers":[],"readingTime":{"minutes":11.51,"words":3453},"git":{"updatedTime":1740325903000,"contributors":[{"name":"botboy","username":"botboy","email":"ckisaboy@163.com","commits":6,"avatar":"https://avatars.githubusercontent.com/botboy?v=4","url":"https://github.com/botboy"}]},"filePathRelative":"notes/Docker.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"}],"bulletin":false}');export{r as comp,h as data};

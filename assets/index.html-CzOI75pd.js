import{_ as n,c as r,a as t,b as a,e as s,o as l}from"./app-B-efjkfq.js";const p="/nteach/SpringCloud/1608456102697_image.png",o="/nteach/SpringCloud/1608478807868_image.png",d="/nteach/SpringCloud/1608564088776_image.png",h="/nteach/SpringCloud/1609563596892_image.png",c="/nteach/SpringCloud/1609564073810_image.png",g="/nteach/SpringCloud/1609590536668_image.png",u="/nteach/SpringCloud/1609604219881_image.png",k="/nteach/SpringCloud/1609666933697_image.png",m="/nteach/SpringCloud/1609681724718_image.png",y="/nteach/SpringCloud/1609683321415_image.png",b="/nteach/SpringCloud/1609767328316_image.png",v="/nteach/SpringCloud/1609767472565_image.png",f="/nteach/SpringCloud/1609770208448_image.png",q="/nteach/SpringCloud/1609770218354_image.png",I="/nteach/SpringCloud/1609770245421_image.png",x="/nteach/SpringCloud/1609772746345_image.png",D="/nteach/SpringCloud/1609861242174_image.png",A="/nteach/SpringCloud/1609939698855_image.png",E="/nteach/SpringCloud/1609943207187_image.png",C="/nteach/SpringCloud/1610027754330_image.png",S="/nteach/SpringCloud/1610027063825_image.png",B="/nteach/SpringCloud/1610029851571_image.png",M="/nteach/SpringCloud/1610120419217_image.png",w="/nteach/SpringCloud/1610156226844_image.png",_="/nteach/SpringCloud/1610165929225_image.png",F="/nteach/SpringCloud/1610166056125_image.png",R="/nteach/SpringCloud/1610173526368_image.png",T="/nteach/SpringCloud/1610187888181_image.png",P="/nteach/SpringCloud/1610188367352_image.png",O="/nteach/SpringCloud/1610188595275_image.png",L="/nteach/SpringCloud/1610188780486_image.png",N="/nteach/SpringCloud/1610203970351_image.png",j="/nteach/SpringCloud/1610206613014_image.png",i="/nteach/SpringCloud/1610257462352_image.png",H="/nteach/SpringCloud/1610257660421_image.png",G="/nteach/SpringCloud/1610277535670_image.png",U="/nteach/SpringCloud/1610277563808_image.png",z={};function Q(V,e){return l(),r("div",null,e[0]||(e[0]=[t(`<h1 id="开始准备" tabindex="-1"><a class="header-anchor" href="#开始准备"><span>开始准备</span></a></h1><h2 id="聚合父工程project创建" tabindex="-1"><a class="header-anchor" href="#聚合父工程project创建"><span>聚合父工程Project创建</span></a></h2><ol><li><p>New Project</p></li><li><p>聚合总父工程名字</p></li><li><p>Maven选择</p><p>https://cloud.spring.io/spring-cloud-static/Hoxton.SR3/reference/html/spring-cloud.html</p></li><li><p>工程名字</p></li><li><p>字符编码</p></li><li><p>注解生效激活</p></li><li><p>java编译版本选择8</p></li><li><p>FileType过滤</p></li></ol><h2 id="子工程创建" tabindex="-1"><a class="header-anchor" href="#子工程创建"><span>子工程创建</span></a></h2><ol><li><p>建Module</p></li><li><p>改POM</p></li><li><p>写YML</p></li><li><p>主启动</p></li><li><p>业务类编码（MVC）</p></li><li><p>测试</p></li></ol><h2 id="版本选择" tabindex="-1"><a class="header-anchor" href="#版本选择"><span>版本选择</span></a></h2><p>SpringBoot是以数字划分版本SpringCloud是以字母划分版本。</p><h3 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性"><span>兼容性：</span></a></h3><p>可以在https://start.spring.io/actuator/info中查看当pringCloud和SpringBoot之间的兼容性；</p><h3 id="版本支持" tabindex="-1"><a class="header-anchor" href="#版本支持"><span>版本支持：</span></a></h3><p>可以在SpringCloud官网查看官方提供和支持的版本，可以在对应版本的文档中查看推荐的SpringBoot版本</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p><code>&lt;dependencyManagement&gt;标签中指定的版本报错 解决办法：在&lt;dependencyManagement&gt;标签之外，使用</code></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> 	&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.xxxx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">xxxx-xxx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x.x.x.RELEASE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新在版本锁定之外从远程下载需要使用的版本，下载完成后删除即可。</p><h1 id="_0-基础" tabindex="-1"><a class="header-anchor" href="#_0-基础"><span>0. 基础</span></a></h1><h2 id="项目流程" tabindex="-1"><a class="header-anchor" href="#项目流程"><span>项目流程</span></a></h2><p>每个模块都会以一下步骤完成项目</p><ol><li><p>新建项目</p></li><li><p>改POM</p></li><li><p>写YML</p></li><li><p>主启动</p></li><li><p>写业务</p></li><li><p>测试</p></li></ol><h1 id="_1-服务注册中心" tabindex="-1"><a class="header-anchor" href="#_1-服务注册中心"><span>1. 服务注册中心</span></a></h1><h2 id="eureka服务注册与发现" tabindex="-1"><a class="header-anchor" href="#eureka服务注册与发现"><span>Eureka服务注册与发现</span></a></h2><h3 id="eureka基础知识" tabindex="-1"><a class="header-anchor" href="#eureka基础知识"><span>Eureka基础知识</span></a></h3><h4 id="什么是服务治理" tabindex="-1"><a class="header-anchor" href="#什么是服务治理"><span>什么是服务治理</span></a></h4><p>Spring Cloud封装了Netlix公司开发的Eureka模块来实现服务治理。在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂,管理比较复杂,所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等,实现服务发现与注册。</p><h4 id="什么是服务注册与发现" tabindex="-1"><a class="header-anchor" href="#什么是服务注册与发现"><span>什么是服务注册与发现</span></a></h4><p>什么是服务注册与发现Eureka采用了CS的设计架构，Eureka Server 作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。在服务注册与发现中，有一个注册中心。当服务體启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另-方(消费者|服务提供者)，以该别名的方式去注册中心，上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。 在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p><h4 id="eureka系统架构图示" tabindex="-1"><a class="header-anchor" href="#eureka系统架构图示"><span>Eureka系统架构图示</span></a></h4><p><img src="`+p+`" alt="1608456102697_image.png"></p><h4 id="eureka两个组件" tabindex="-1"><a class="header-anchor" href="#eureka两个组件"><span>Eureka两个组件</span></a></h4><h5 id="eureka-server" tabindex="-1"><a class="header-anchor" href="#eureka-server"><span>Eureka Server</span></a></h5><p>Eureka Server提供服务注册服务各个微服务节点通过配置启动后，会在EurekaServer中进行注册， 这样EurekaServer中的服务注册表中将 会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p><h5 id="eureka-client" tabindex="-1"><a class="header-anchor" href="#eureka-client"><span>Eureka Client</span></a></h5><p>EurekaClient通过注册中心进行访问是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、 使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除(默认90秒)</p><h3 id="单机eureka构建" tabindex="-1"><a class="header-anchor" href="#单机eureka构建"><span>单机Eureka构建</span></a></h3><h4 id="注册中心-eureka-server-7001" tabindex="-1"><a class="header-anchor" href="#注册中心-eureka-server-7001"><span>注册中心（Eureka Server）（7001）</span></a></h4><p>o 1. 建Module</p><p>o 2. 改POM</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!--eureka-server 2.X--&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-netflix-eureka-server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>o 3. 写YML</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  </span></span>
<span class="line"><span>	port: 7001</span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring:  application:   </span></span>
<span class="line"><span>	name: cloud-eureka-serviceeureka:  </span></span>
<span class="line"><span>	instance:   # eureka服务端的实例名称   </span></span>
<span class="line"><span>	hostname: localhost  # 单机#   </span></span>
<span class="line"><span>	hostname: eureka7001.com  # 集群   </span></span>
<span class="line"><span>	# Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认是30秒)#   </span></span>
<span class="line"><span>	lease-renewal-interval-in-seconds: 1   # Eureka服务端在收到最后一次心跳后等待时间上限 ,单位为秒(默认是90秒),超时剔除服务#   </span></span>
<span class="line"><span>	lease-expiration-duration-in-seconds: 2  </span></span>
<span class="line"><span>	server:   # 禁用自我保护,保证不可用服务被及时删除   </span></span>
<span class="line"><span>	enable-self-preservation: true   </span></span>
<span class="line"><span>	eviction-interval-timer-in-ms: 2000  client:   # false表示不向注册中心注册自己   </span></span>
<span class="line"><span>	register-with-eureka: false   # false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要检索服务   </span></span>
<span class="line"><span>	fetch-registry: false   </span></span>
<span class="line"><span>	service-url:    # 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址    defaultZone: http://\${eureka.instance.hostname}:\${server.port}/eureka/   # 单机#    defaultZone: http://eureka7002.com:7002/eureka/  # 集群，相互注册</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>o 4. 主启动（服务注册中心） 启动类添加<code>@EnableEurekaServer</code>注解</p><p>o 5. 业务类编码（MVC）</p><p>o 6. 测试 http://localhost:7001/</p><p><img src="`+o+`" alt="1608478807868_image.png"></p><h4 id="客户端-eureka-client-80、8001" tabindex="-1"><a class="header-anchor" href="#客户端-eureka-client-80、8001"><span>客户端（Eureka Client）（80、8001）</span></a></h4><p>o 2. 修改客户端（8001）的pom</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">       </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">       </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-netflix-eureka-client</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>o 3. 改客户端的YML <code>eureka: client: # 表示是否将自己注册进Eurekaserver默认为true。 register-with-eureka: true # 足否从Eurekaserver抓收已有的注册信息，默以为true。单节点无所谓，集群必须设咒为true才能配ribbon使用负载均衡 fetch-registry: true service-url: defaultZone: http://localhost:7001/eureka # 单机版# defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版 instance: instance-id: payment8001 # 注意此处 # 访问路径可以显示ip地址 prefer-ip-address: true</code></p><p>o 4. 主启动 添加<code>@EnableEurekaClient</code>注解</p><p>o 6. 测试 先启动注册中心，再启动客户端（用户名为服务名）测试访问：http://localhost:7001/</p><p><img src="`+d+'" alt="1608564088776_image.png"></p><h3 id="集群eureka构建" tabindex="-1"><a class="header-anchor" href="#集群eureka构建"><span>集群Eureka构建</span></a></h3><p>互相注册，相互守望将支付服务8001微服务发布到2台Eureka集群上将订单服务80微服务发布到2台Eureka集群上</p><h4 id="注册中心集群" tabindex="-1"><a class="header-anchor" href="#注册中心集群"><span>注册中心集群</span></a></h4><p>o cloud-eurka-server7001</p><p>o 新建cloud-eurka-server7002 参考cloud-eureka-server7001</p><p>o 改POM 参考cloud-eureka-server7001</p><p>o 修改映射配置 在本地跑则新增两个映射(C:\\Windows\\System32\\drivers\\etc\\hosts)127.0.0.1 eurka7001.com127.0.0.1 eurka7002.com</p><p>o 写YML</p><p><strong>7001</strong></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 7001spring:  application:   name: cloud-eureka-serviceeureka:  instance:   # eureka服务端的实例名称   #   hostname: localhost  # 单机   hostname: eureka7001.com  # 集群   # Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认是30秒)   #   lease-renewal-interval-in-seconds: 1   # Eureka服务端在收到最后一次心跳后等待时间上限 ,单位为秒(默认是90秒),超时剔除服务  #   lease-expiration-duration-in-seconds: 2  server:   # 禁用自我保护,保证不可用服务被及时删除   enable-self-preservation: true   eviction-interval-timer-in-ms: 2000  client:   # false表示不向注册中心注册自己   register-with-eureka: false   # false表示自己端就是注册中心,我的职责就是维护服务实例,并不需要检索服务   fetch-registry: false   service-url:    # 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址    #    defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/   # 单机    defaultZone: http://eureka7002.com:7002/eureka/  # 集群，相互注册,注册其他服务端</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>7002</strong></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> server:  port: 7002spring:  application:   name: cloud-eureka-serviceeureka:  instance:   # hostname: localhost   hostname:  eureka7002.com   # Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认是30秒)   lease-renewal-interval-in-seconds: 1   # Eureka服务端在收到最后一次心跳后等待时间上限 ,单位为秒(默认是90秒),超时剔除服务   lease-expiration-duration-in-seconds: 2  server:   # 禁用自我保护   enable-self-preservation: true   eviction-interval-timer-in-ms: 2000  client:   register-with-eureka: false   fetch-registry: false   service-url:    # defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/    defaultZone: http://eureka7001.com:7001/eureka/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>o 主启动（服务注册中心） 启动类添加<code>@EnableEurekaServer</code>注解</p><h4 id="将订单服务80微服务发布到2台eureka集群上" tabindex="-1"><a class="header-anchor" href="#将订单服务80微服务发布到2台eureka集群上"><span>将订单服务80微服务发布到2台Eureka集群上</span></a></h4><p>修改YML：defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版</p><p>· 将支付服务8001微服务发布到2台Eureka集群上 修改YML：defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka # 集群版</p><p>· 测试1 先启动注册中心，在启动服务</p><h4 id="支付服务提供者8001集群环境构建" tabindex="-1"><a class="header-anchor" href="#支付服务提供者8001集群环境构建"><span>支付服务提供者8001集群环境构建</span></a></h4><p>也可以使用IDEA的多例模式构建：https://blog.csdn.net/dyr_1203/article/details/84876380</p><p>o cloud-provider-payment8001</p><p>o 新建cloud-provider-payment8002 参考cloud-provider-payment8001</p><p>o 改POM 参考cloud-provider-payment8001</p><p>o 改YML</p><p>8001</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 8001spring:  application:   name: cloud-payment-service  datasource:   # 当前数据源操作类型   type: com.alibaba.druid.pool.DruidDataSource   # mysql驱动类   driver-class-name: com.mysql.cj.jdbc.Driver   url: jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8   username: root   password: rooteureka:  client:   # 表示是否将自己注册进Eurekaserver默认为true。   register-with-eureka: true   # 足否从Eurekaserver抓收已有的注册信息，默以为true。单节点无所谓，集群必须设咒为true才能配ribbon使用负载均衡   fetch-registry: true   service-url:#    defaultZone: http://localhost:7001/eureka  # 单机版    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka   # 集群版  instance:   instance-id: payment8001   # 访问路径可以显示ip地址   prefer-ip-address: truemybatis:  mapper-locations: classpath:mapper/*.xml  type-aliases-package: com.bilibili.springcloud.entities</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>8002</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 8002spring:  application:   name: cloud-payment-service  datasource:   # 当前数据源操作类型   type: com.alibaba.druid.pool.DruidDataSource   # mysql驱动类   driver-class-name: com.mysql.cj.jdbc.Driver   url: jdbc:mysql://localhost:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8   username: root   password: rooteureka:  client:   # 表示是否将自己注册进Eurekaserver默认为true。   register-with-eureka: true   # 足否从Eurekaserver抓收已有的注册信息，默以为true。单节点无所谓，集群必须设咒为true才能配ribbon使用负载均衡   fetch-registry: true   service-url:#    defaultZone: http://localhost:7001/eureka  # 单机版    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka   # 集群版  instance:   instance-id: payment8002   # 访问路径可以显示ip地址   prefer-ip-address: truemybatis:  mapper-locations: classpath:mapper/*.xml  type-aliases-package: com.bilibili.springcloud.entities</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>o 业务类 参考cloud-provider-payment8001</p><p>o 主启动</p><h4 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h4><p>o 集群中订单服务的访问地址不能写死 Eureka是通过服务名访问，不关注具体主机（由负载均衡完成）；所以暴露时同样的服务使用同样的服务名</p><p>o 使用负载均衡注解 在消费者的RestTemplate上使用@LoadBalanced注解（默认使用轮询）赋予负载均衡能力ApplicationContextBean是Ribbon的内容，见后文</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h4><p>Eureka是通过服务名访问，不关注具体主机（由负载均衡完成）；所以暴露时同样的服务使用同样的服务名</p><h3 id="actuator" tabindex="-1"><a class="header-anchor" href="#actuator"><span>actuator</span></a></h3><p>微服务信息完善 引入POM：<code>!--监控--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;添加YML配置：eureka: instance: # 主机名称，服务名修改 instance-id: payment8002 # 访问路径可以显示ip地址 prefer-ip-address: true</code></p><p>主机名称，服务名修改</p><p>· 访问信息显示ip</p><h3 id="服务发现discovery" tabindex="-1"><a class="header-anchor" href="#服务发现discovery"><span>服务发现Discovery</span></a></h3><p>· 对于注册进eureka里的微服务，可以通过服务发现来获取该服务的信息</p><p>· 修改<code>cloud-provider-payment8001</code>的Controller 注入（import org.springframework.cloud.client.discovery.DiscoveryClient;）包下的DiscoveryClientprivate DiscoveryClient discoveryClient;添加接口：@GetMapping(&quot;/discovery&quot;)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Object </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">discovery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> services</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> discoveryClient</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getServices</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> service</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> services</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">       log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*****service:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">service</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ServiceInstance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> instances</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> discoveryClient</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getInstances</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">CLOUD-PAYMENT-SERVICE</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ServiceInstance</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> instance</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> instances</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">       log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getServiceId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getHost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getPort</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getUri</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     return</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">discoveryClient</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 8001主启动类 添加@EnableDiscoveryClient注解</p><p>· 自测</p><h3 id="eureka自我保护" tabindex="-1"><a class="header-anchor" href="#eureka自我保护"><span>eureka自我保护</span></a></h3><p>· 概述 概述：保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。属于CPA里面的AP分支</p><p>· 如何禁用自我保护</p><p>o 注册中心7001 自我保护默认是开启的，通过下面的命令控制自我保护的开启或关闭eureka.server.enable-self-preservation: false使用下面的命令控制服务端销毁注册信息的是时间eureka.server.eviction-interval-timer-in-ms: 2000</p><p>o 客户端8001 通过下面的命令控制客户端发送心跳包的时间（默认30秒）lease-renewal-interval-in-seconds: 1Eureka服务端在收到最后一次心跳后等待时间上限（默认90秒），超时将剔除服务</p><h2 id="zookeeper服务注册与发现" tabindex="-1"><a class="header-anchor" href="#zookeeper服务注册与发现"><span>Zookeeper服务注册与发现</span></a></h2><p>Zookeeper已停止更新，而SpringCloud集成了Zookeeper</p><h3 id="注册中心zookeeper" tabindex="-1"><a class="header-anchor" href="#注册中心zookeeper"><span>注册中心Zookeeper</span></a></h3><p>zoopeeker是一个分布式协调工具，可以实现注册中心功能，本章节将使用zoopeeker服务器取代Eureka服务器，使用zoopeeker作为服务注册中心安装河东过程省略，注意：关闭linuxfu武器服务器防火墙后启动zoopeeker</p><h3 id="服务提供者" tabindex="-1"><a class="header-anchor" href="#服务提供者"><span>服务提供者</span></a></h3><p>· 新建项目</p><p>·改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.bilibili.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--SpringBoot整合Zookeeper客户端--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt; &lt;exclusions&gt; &lt;!--先排除自带的zookeeper3.5.3--&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!--添加zookeeper3.4.9版本--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.14&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>· 写YML <code>server: port: 8004spring: application: # 服务别名---注册zookeeper到注册中心的名称 name: cloud-payment-service cloud: zookeeper: # 默认localhost:2181 connect-string: localhost:2181</code></p><p>· 主启动 服务发现以后都使用@EnableDiscoveryClient注解</p><p>· 写业务 <code>@Slf4j@RestControllerpublic class PaymentController { @Value(&quot;${server.port}&quot;) private String serverPort; @RequestMapping(value = &quot;payment/zk&quot;) public String paymentZk() { return &quot;SpringCloud with zookeeper:&quot; + serverPort + &quot;\\t&quot; + UUID.randomUUID().toString(); }}</code></p><p>· 测试</p><p>o 可能与discovery携带的zk与服务器端的zk不兼容 可能与discovery携带的zk与服务器端的zk不兼容；那么我们可以引入自己服务器端zk版本的pom坐标，详见POM</p><p>o 可能会出现日志冲突 可能会出现日志冲突；那么我们可以在POM中引入的zk中排除掉冲突的包。详见POM</p><p>o docker查看zookeeper注册服务 docker查看zookeeper注册服务首先找到正在运行的容器didocker ps然后执行如下操作docker exec -it add905a36402（this is id） bashcd bin./zkCli.shls /services</p><p>· 验证 http://localhost:8004/payment/zk</p><p>o http://localhost:8004/payment/zk</p><p>· 节点类型</p><p>o 服务节点分为持久和临时。zk是服务节点是临时的</p><h3 id="服务消费者" tabindex="-1"><a class="header-anchor" href="#服务消费者"><span>服务消费者</span></a></h3><p>· 新建项目cloud-consumerzk-order80</p><p>·改POM</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">com.bilibili.springcloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cloud-api-commons</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">${project.version}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!--SpringBoot整合Zookeeper客户端--&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-zookeeper-discovery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">exclusions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!--先排除自带的zookeeper3.5.3--&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">exclusion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.apache.zookeeper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">zookeeper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">exclusion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">exclusions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!--添加zookeeper3.4.9版本--&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.apache.zookeeper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">zookeeper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3.4.14</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-actuator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-web</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.projectlombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 写YML <code>server: port: 80spring: application: # 服务别名 name: cloud-consumer-order cloud: zookeeper: # 注册到zookeeper地址 connect-string: localhost:2181</code></p><p>· 主启动 <code>@EnableDiscoveryClient //该注解用于向使用consul或者zookeeper作为注册中心时注册服务@SpringBootApplicationpublic class OrderZKMain80 { public static void main(String[] args) { SpringApplication.run(OrderZKMain80.class, args); }}</code></p><p>· 写业务</p><p>o config <code>@Configurationpublic class ApplicationContextConfig { @Bean @LoadBalanced public RestTemplate getRestTemplate() { return new RestTemplate(); }}</code></p><p>o controller <code>@Slf4j@RestControllerpublic class OrderZKController { public static final String INVOKE_URL = &quot;http://cloud-provider-payment&quot;; @Resource private RestTemplate restTemplate; @GetMapping(&quot;/consumer/payment/zk&quot;) public String paymentInfo() { return restTemplate.getForObject(INVOKE_URL + &quot;/payment/zk&quot;, String.class); }}</code></p><p>· 测试 前提是服务提供者已注册</p><p>o http://localhost/consumer/payment/zk</p><h2 id="consul服务注册与发现" tabindex="-1"><a class="header-anchor" href="#consul服务注册与发现"><span>Consul服务注册与发现</span></a></h2><h3 id="consul简介" tabindex="-1"><a class="header-anchor" href="#consul简介"><span>Consul简介</span></a></h3><h4 id="官网" tabindex="-1"><a class="header-anchor" href="#官网"><span>官网</span></a></h4><p>o consul.io</p><h4 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h4><p>Consul是-套开源的分布式服务发现和配置管理系统,由HashiCorp公司用Go语言开发。提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一 起使用以构建全方位的服务网格，总之Consul提供了-种完整的服务网格解决方案。它具有很多优点。包括: 基于raft协议,比较简洁; 支持健康检查,同时支持HTTP和DNS协议支持跨数据中心的WAN集群提供图形界面跨平台，支持Linux、 Mac、Windows</p><h5 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h5><p>提供HTTP和DNS两种发现方式。</p><h5 id="健康监测" tabindex="-1"><a class="header-anchor" href="#健康监测"><span>健康监测</span></a></h5><p>支持多种方式，HTTP、TCP、Docker. Shel脚本定制化</p><h5 id="kv存储" tabindex="-1"><a class="header-anchor" href="#kv存储"><span>KV存储</span></a></h5><p>Key，Value的存储方式</p><h5 id="多数据中心" tabindex="-1"><a class="header-anchor" href="#多数据中心"><span>多数据中心</span></a></h5><p>Key，Value的存储方式</p><h5 id="可视化web界面" tabindex="-1"><a class="header-anchor" href="#可视化web界面"><span>可视化Web界面</span></a></h5><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><p>查找镜像docker search consul下载镜像至本地docker pull consul查看本地镜像docker images启动镜像docker run -d --name myConsul -p 8500:8500 [id]查看服务docker ps</p><p>o 测试localhost:8500/ui/dc1/services</p><h3 id="服务提供者-1" tabindex="-1"><a class="header-anchor" href="#服务提供者-1"><span>服务提供者</span></a></h3><p>· 新建项目cloud-providerconsul-payment8006</p><p>·改POM</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!--SpringCloud consul-server--&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-consul-discovery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">com.bilibili.springcloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cloud-api-commons</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">${project.version}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-web</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-actuator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.projectlombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 写YML <code>server: # consul服务端口 port: 8006spring: application: name: cloud-provider-payment cloud: consul: # consul注册中心地址 host: localhost port: 8500 discovery: hostname: 127.0.0.1 service-name: ${spring.application.name}</code></p><p>· 主启动 <code>@EnableDiscoveryClient@SpringBootApplicationpublic class PaymentMain8006 { public static void main(String[] args) { SpringApplication.run(PaymentMain8006.class, args); }}</code></p><p>· 写业务 <code>@Slf4j@RestControllerpublic class PaymentController { @Value(&quot;${server.port}&quot;) private String serverPort; @RequestMapping(value = &quot;/payment/consul&quot;) public String paymentZk() { return &quot;SpringCloud with consul:&quot; + serverPort + &quot;\\t&quot; + UUID.randomUUID().toString(); }}</code></p><p>· 测试</p><p>o 服务提供者</p><p>http://localhost:8006/payment/consul</p><p>o 注册中心</p><p>测试</p><p>· http://localhost:8500/</p><p>问题 consul报红叉是因为consul的安全检查要检查你的服务，他会访问 ip:8006/actuator/health这个接口，如果你项目是在内网，consul是在外网那就访问不到，就会报红叉</p><h3 id="服务消费者-1" tabindex="-1"><a class="header-anchor" href="#服务消费者-1"><span>服务消费者</span></a></h3><p>· 新建项目cloud-consumerconsul-order80</p><p>·改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>· 写YML <code>server: port: 80spring: application: name: cloud-consumer-order cloud: consul: host: localhost port: 8500 discovery: service-name: ${spring.application.name}</code></p><p>· 主启动 <code>@EnableDiscoveryClient@SpringBootApplicationpublic class OrderConsulMain80 { public static void main(String[] args) { SpringApplication.run(OrderConsulMain80 .class, args); }}</code></p><p>· 写业务</p><p>o config <code>@Configurationpublic class ApplicationContextConfig { @Bean @LoadBalanced public RestTemplate getRestTemplate(){ return new RestTemplate(); }}</code></p><p>o controller <code>@Slf4j@RestControllerpublic class OrderConsulController { public static final String INVOKE_URL = &quot;http://cloud-provider-payment&quot;; @Resource private RestTemplate restTemplate; @GetMapping(&quot;/consumer/payment/consul&quot;) public String payment(){ return restTemplate.getForObject(INVOKE_URL + &quot;/payment/consul&quot;,String.class ); }}</code></p><p>· 测试</p><p>o 消费者服务</p><p>http://localhost/consumer/payment/consul</p><p>o 注册中心</p><p>http://localhost:8500/</p><h2 id="三个注册中心的异同点" tabindex="-1"><a class="header-anchor" href="#三个注册中心的异同点"><span>三个注册中心的异同点</span></a></h2><h3 id="cap" tabindex="-1"><a class="header-anchor" href="#cap"><span>CAP</span></a></h3><p>· C:Consistency (强一致性)</p><p>· A:Availability (可用性)</p><p>· P:Partition tolerance ( 分区容错性)</p><p>· CAP理论关注粒度是数据，而不是整体系统设计 业务展示T-1</p><h3 id="经典cap图" tabindex="-1"><a class="header-anchor" href="#经典cap图"><span>经典CAP图</span></a></h3><p>· AP(Eureka) AP架构当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。结论:违背了一致性C的要求,只满足可用性和分区容错，即AP</p><p>· CP(Zookeeper/Consul) CP架构当网络分区出现后，为了保证一致性,就必须拒接请求,否则无法保证一致性结论:违背了可用性A的要求，只满足-致性和分区容错，即CP</p><h1 id="_2-服务调用" tabindex="-1"><a class="header-anchor" href="#_2-服务调用"><span>2. 服务调用</span></a></h1><h2 id="ribbon负载均衡服务调用" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡服务调用"><span>Ribbon负载均衡服务调用</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><h4 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h4><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套 客户端 负载均衡的工具。简单的说，Ribbon是Ntflix发布的开源项目， 主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一 系列完善的配置项如连接超时，重试等。简单的说，I就是在配置文件中列出Load Balancer (简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等)去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><h4 id="官网-1" tabindex="-1"><a class="header-anchor" href="#官网-1"><span>官网</span></a></h4><p>o https://github.com/Netflix/ribbon/wiki/Getting-Started</p><p>o ribbon现已进入维护模式</p><h4 id="能干什么" tabindex="-1"><a class="header-anchor" href="#能干什么"><span>能干什么</span></a></h4><p>o LB(LoadBanlance负载均衡) LB负载均衡(Load Balance)是什么简单的说就是将用户的请求平摊的分配到多个服务上,从而达到系统的HA (高可用)。常见的负载均衡有软件Nginx，LVS, 硬件F5等。Ribbon本地负载均衡客户端VS Nginx服务端负载均衡(集中式)区别Nginx是服务器负载均衡，客户端所有请求都会交给nginx,然后由nginx实现转发请求。即负载均衡是由服务端实现的。Ribbon本地负载均衡(程序内)，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p><p>集中式LB 集中式LB即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5,也可以是软件,如nginx),由该设施负责把访问请求通过某种略转发至服务的提供方;</p><p>程序内LB 进程内LB将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于进程内LB, 它只是一 个类库,集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><p>o 此前通过Eureka中，80是通过轮询负载访问8001和8002</p><p>o 即：负载均衡+RestTemplate调用</p><h3 id="ribbon负载均衡演示" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡演示"><span>Ribbon负载均衡演示</span></a></h3><h4 id="架构说明" tabindex="-1"><a class="header-anchor" href="#架构说明"><span>架构说明</span></a></h4><p>总结: Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</p><p>o <img src="'+h+'" alt="1609563596892_image.png"></p><h4 id="pom" tabindex="-1"><a class="header-anchor" href="#pom"><span>POM</span></a></h4><p>o spring-cloud-starter-netflix-eureka-client中已经集成了Ribbon</p><p><img src="'+c+'" alt="1609564073810_image.png"></p><h4 id="resttemplate使用" tabindex="-1"><a class="header-anchor" href="#resttemplate使用"><span>RestTemplate使用</span></a></h4><h5 id="官网-2" tabindex="-1"><a class="header-anchor" href="#官网-2"><span>官网</span></a></h5><h5 id="getobject-getforentity" tabindex="-1"><a class="header-anchor" href="#getobject-getforentity"><span>getObject()/getForEntity()</span></a></h5><p>getObject()返回对象为响应体中数据转化成的对象，基本上可以理解为JsongetForEntity()返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等</p><h5 id="postobject-postforentity" tabindex="-1"><a class="header-anchor" href="#postobject-postforentity"><span>postObject()/postForEntity()</span></a></h5><h5 id="get请求方法" tabindex="-1"><a class="header-anchor" href="#get请求方法"><span>GET请求方法</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">GetMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/consumer/payment/getForEntity/{id}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CommonResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Payment</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getPayment2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">PathVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Long id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     ResponseEntity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> restTemplate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getForEntity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PAYMENT_URL </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/payment/get/getForEntity/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getStatusCode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">is2xxSuccessful</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">       log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getStatusCode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getBody</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getBody</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Payment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fail</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">400</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">操作失败！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="post请求方法" tabindex="-1"><a class="header-anchor" href="#post请求方法"><span>POST请求方法</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">PostMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/consumer/payment/postForEntity</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CommonResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Payment</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> creat2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Payment payment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     ResponseEntity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> restTemplate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">postForEntity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">PAYMENT_URL </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/payment/create/postForEntity/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> payment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getStatusCode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">is2xxSuccessful</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> entity</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getBody</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CommonResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Payment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fail</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">400</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">操作失败！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="ribbon核心组件irule" tabindex="-1"><a class="header-anchor" href="#ribbon核心组件irule"><span>Ribbon核心组件IRule</span></a></h3><h4 id="irule-根据特定算法中从服务列表中选取一个要访问的服务" tabindex="-1"><a class="header-anchor" href="#irule-根据特定算法中从服务列表中选取一个要访问的服务"><span>IRule:根据特定算法中从服务列表中选取一个要访问的服务</span></a></h4><p><img src="'+g+'" alt="1609590536668_image.png"></p><h5 id="com-netflix-loadbalancer-roundrobinrule" tabindex="-1"><a class="header-anchor" href="#com-netflix-loadbalancer-roundrobinrule"><span>com.netflix.loadbalancer. RoundRobinRule</span></a></h5><p>轮询</p><h5 id="com-netflix-loadbalancer-randomrule" tabindex="-1"><a class="header-anchor" href="#com-netflix-loadbalancer-randomrule"><span>com.netflix.loadbalancer. RandomRule</span></a></h5><p>随机</p><h5 id="com-netflixloadbalancer-retryrule" tabindex="-1"><a class="header-anchor" href="#com-netflixloadbalancer-retryrule"><span>com.netflixloadbalancer.RetryRule</span></a></h5><p>先按照RoundRobinRule的策略获取服务， 如果获取服务失败则在指定时间内会进行重试，获取可用的服务</p><h5 id="weightedresponsetimerule" tabindex="-1"><a class="header-anchor" href="#weightedresponsetimerule"><span>WeightedResponseTimeRule</span></a></h5><p>对RoundRobinRule的扩展， 响应速度越快的实例选择权重越大，越容易被选择</p><h5 id="bestavailablerule" tabindex="-1"><a class="header-anchor" href="#bestavailablerule"><span>BestAvailableRule</span></a></h5><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</p><h5 id="availabilityfilteringrule" tabindex="-1"><a class="header-anchor" href="#availabilityfilteringrule"><span>AvailabilityFilteringRule</span></a></h5><p>先过滤掉故障实例， 再选择并发较小的实例</p><h5 id="zoneavoidancerule" tabindex="-1"><a class="header-anchor" href="#zoneavoidancerule"><span>ZoneAvoidanceRule</span></a></h5><p>默认规则，复合判断server所在区 域的性能和server的可用性选择服务器</p><h4 id="如何替换" tabindex="-1"><a class="header-anchor" href="#如何替换"><span>如何替换</span></a></h4><p>o 修改cloud-consumer-order80</p><p>o 注意配置细节 官方文档明确给出了警告:这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享,达不到特殊化定制的目的了。即：@ComponentScan是主启动类中@SpringBootApplication的子注解，所以不能在能在主启动类的包下创建</p><p>o 新建Packge和规则类</p><p>新建包myrule</p><p>· 切记不能和主启动类同包</p><p>此包下新建MySelfRule规则类 /** * Ribbon的配置类 */@Configurationpublic class MySelfRule { // @Bean public IRule myRule() { return new RandomRule(); //定义为随机 }}不要忘记注入到Ben</p><p>o 主启动添加@RibbonClient @SpringBootApplication@EnableEurekaClient@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)public class OrderMain80 { public static void main(String[] args) { SpringApplication.run(OrderMain80.class, args); }}</p><p>o 测试</p><h3 id="ribbon负载均衡算法" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡算法"><span>Ribbon负载均衡算法</span></a></h3><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4><p>o 轮询 负载均衡算法: rest接口第几次请求数%服务器集群总数量=实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始。</p><p><img src="'+u+'" alt="1609604219881_image.png"></p><h4 id="手写" tabindex="-1"><a class="header-anchor" href="#手写"><span>手写</span></a></h4><h4 id="_7001-7002集群启动" tabindex="-1"><a class="header-anchor" href="#_7001-7002集群启动"><span>7001/7002集群启动</span></a></h4><h4 id="_8001-8002微服务改造" tabindex="-1"><a class="header-anchor" href="#_8001-8002微服务改造"><span>8001/8002微服务改造</span></a></h4><p>Controller <code>@GetMapping(&quot;/lb&quot;) public String getPaymentLB() { return serverPort; }</code></p><h4 id="_80订单微服务改造" tabindex="-1"><a class="header-anchor" href="#_80订单微服务改造"><span>80订单微服务改造</span></a></h4><ol><li><p>ApplicationContextBean去掉注解@LoadBalance，使用自己的注解</p></li><li><p>LoadBalance接口 <code>public interface LoadBalancer { /** * 集群对象 * @param serviceInstances * @return */ ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances);} </code></p></li><li><p>MyLB(实现接口) <code>@Componentpublic class MyLB implements LoadBalancer { private AtomicInteger atomicInteger = new AtomicInteger(0); public final int getAndIncrement() { int current; int next; //第几次访问此接口 do { //自旋锁 current = this.atomicInteger.get(); next = current &gt;= Integer.MAX_VALUE ? 0 : current++; }while (!this.atomicInteger.compareAndSet(current, next)); System.out.println(&quot;****next:&quot; + next); return next; } @Override public ServiceInstance instances(List&lt;ServiceInstance&gt; serviceInstances) { int index = getAndIncrement() % serviceInstances.size(); //访问次数对集群数取余 return serviceInstances.get(index); }}注意添加@Component注解</code></p></li><li><p>OrderController <code>/** 自定义的负载均衡 */ @Resource private LoadBalancer loadBalancer; @Resource private DiscoveryClient discoveryClient; @GetMapping(&quot;/consumer/payment/lb&quot;) public String getPaymentLB() { List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;); if (instances == null || instances.size() &lt;= 0) { return null; } ServiceInstance serviceInstance = loadBalancer.instances(instances); URI uri = serviceInstance.getUri(); return restTemplate.getForObject(uri+&quot;/payment/lb&quot;, String.class); }</code></p></li><li><p>测试</p></li></ol><p>· http://localhost/consumer/payment/lb</p><h2 id="openfeign" tabindex="-1"><a class="header-anchor" href="#openfeign"><span>OpenFeign</span></a></h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h3><h4 id="官网-3" tabindex="-1"><a class="header-anchor" href="#官网-3"><span>官网</span></a></h4><p>o https://spring.io/projects/spring-cloud-openfeign</p><h4 id="openfeign是什么" tabindex="-1"><a class="header-anchor" href="#openfeign是什么"><span>OpenFeign是什么</span></a></h4><p>o OpenFeign是一个声明式的Web服务客户端，让编写Web服务客户端变得非常容易，只需创建一一个接口并在接口上添加注解即可 Feign是一 个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。它的使用方法是定义-一个服务接口然后在上面添加注解。Feignt也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p><h4 id="能干什么-1" tabindex="-1"><a class="header-anchor" href="#能干什么-1"><span>能干什么</span></a></h4><p>Feign能干什么Feign旨在使编写Java Http客户端变得更容易。前面在使用Ribbon+ RestTemplate时,利用RestTemplate对http请求的封装处理，形成了-套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，‘往往一个接口会被多处调用， 所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用’。所以，Feign在此基础 上做了进一步封装， 由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，‘我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解现在是一个微服务接口.上面标注一 个Feign注解即可)’，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。Feign集成了Ribbon利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，‘通过feign只需要定义服务绑定接口且以声明式的方法’，优雅而简单的实现了服务调用。</p><h4 id="feign和openfeign的区别" tabindex="-1"><a class="header-anchor" href="#feign和openfeign的区别"><span>Feign和OpenFeign的区别</span></a></h4><p><img src="'+k+'" alt="1609666933697_image.png"></p><h3 id="openfeign使用步骤" tabindex="-1"><a class="header-anchor" href="#openfeign使用步骤"><span>OpenFeign使用步骤</span></a></h3><h4 id="接口-注解" tabindex="-1"><a class="header-anchor" href="#接口-注解"><span>接口+注解</span></a></h4><p>o 微服务调用接口+@FeignClient</p><h4 id="新建项目cloud-consumer-feign-order80" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-consumer-feign-order80"><span>新建项目cloud-consumer-feign-order80</span></a></h4><p>o Feign使用再消费端</p><h4 id="改pom" tabindex="-1"><a class="header-anchor" href="#改pom"><span>改POM</span></a></h4><p><code>&lt;dependencies&gt; &lt;!--openfeign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.bilibili.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--监控--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><h4 id="写yml" tabindex="-1"><a class="header-anchor" href="#写yml"><span>写YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 80eureka:  client:   # 是否将自己注册进Eureka Server   register-with-eureka: false   # 是否从Eureka Server获取注册信息   fetch-registry: true   service-url:    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="主启动" tabindex="-1"><a class="header-anchor" href="#主启动"><span>主启动</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@EnableFeignClients@EnableEurekaClient@SpringBootApplicationpublic class OrderFeignMain80 {   public static void main(String[] args) {     SpringApplication.run(OrderFeignMain80.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写业务" tabindex="-1"><a class="header-anchor" href="#写业务"><span>写业务</span></a></h4><p>o 业务逻辑接口+@FeignClient配置调用provider服务(8001/8002)新建PaymentFeignService接口并新增注解@FeignClient <code>@Component@FeignClient(&quot;CLOUD-PAYMENT-SERVICE&quot;)public interface PaymentFeignService { @GetMapping(&quot;/payment/get/{id}&quot;) public CommonResult getPaymentById(@PathVariable(&quot;id&quot;) Long id);}</code></p><p>o 控制层Controller <code>@Slf4j@RestControllerpublic class OrderFeignClientController { @Resource private PaymentFeignService paymentFeignService; @GetMapping(&quot;/consumer/payment/get/{id}&quot;) public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(&quot;id&quot;) Long id){ return paymentFeignService.getPaymentById(id); }}</code></p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h4><h5 id="先启动2个eureka集群7001-7002" tabindex="-1"><a class="header-anchor" href="#先启动2个eureka集群7001-7002"><span>先启动2个eureka集群7001/7002</span></a></h5><h5 id="再启动2个微服务8001-8002" tabindex="-1"><a class="header-anchor" href="#再启动2个微服务8001-8002"><span>再启动2个微服务8001/8002</span></a></h5><h5 id="启动openfeign80" tabindex="-1"><a class="header-anchor" href="#启动openfeign80"><span>启动OpenFeign80</span></a></h5><h5 id="分支主题" tabindex="-1"><a class="header-anchor" href="#分支主题"><span>分支主题</span></a></h5><h5 id="feign自带负载均衡配置项" tabindex="-1"><a class="header-anchor" href="#feign自带负载均衡配置项"><span>Feign自带负载均衡配置项</span></a></h5><h3 id="openfeign超时控制" tabindex="-1"><a class="header-anchor" href="#openfeign超时控制"><span>OpenFeign超时控制</span></a></h3><p>在实际中，存在有的服务需要处理较长时间，而消费者不愿等待，存在时间差，所以需要消费者与提供者双方协调好时间</p><p>· 超时设置，故意设置超时演示错误情况</p><h4 id="服务提供方8001故意写暂停程序" tabindex="-1"><a class="header-anchor" href="#服务提供方8001故意写暂停程序"><span>服务提供方8001故意写暂停程序</span></a></h4><h5 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>controller</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> /**   * 模拟服务超时，暂停3秒   * @return   */   @GetMapping(&quot;/payment/feign/timeout&quot;)   public String paymentFeignTimeout(){     //暂停几秒线程     try {       TimeUnit.SECONDS.sleep(3);     } catch (InterruptedException e) {       e.printStackTrace();     }     return serverPort;   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="服务消费方80添加超时方法" tabindex="-1"><a class="header-anchor" href="#服务消费方80添加超时方法"><span>服务消费方80添加超时方法</span></a></h4><h5 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>service</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> /**   * 长处理服务   * @return   */   @GetMapping(&quot;/payment/feign/timeout&quot;)   String paymentFeignTimeout();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="controller-1" tabindex="-1"><a class="header-anchor" href="#controller-1"><span>controller</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> /**   * 长处理服务   * @return   */   @GetMapping(&quot;/consumer/payment/feign/timeout&quot;)   public String paymentFeignTimeout() {     //OpenFeign-ribbon，客户端一般默认等待1秒钟     return paymentFeignService.paymentFeignTimeout();   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1"><span>测试</span></a></h4><h5 id="_8001自测" tabindex="-1"><a class="header-anchor" href="#_8001自测"><span>8001自测</span></a></h5><p>· http://localhost:8001/payment/feign/timeout</p><p>· 延迟但返回</p><h5 id="_80测试" tabindex="-1"><a class="header-anchor" href="#_80测试"><span>80测试</span></a></h5><p>· http://localhost/consumer/payment/feign/timeout</p><p>· 超时</p><p><img src="'+m+'" alt="1609681724718_image.png"></p><h4 id="openfeign默认等待1秒-超时后报错" tabindex="-1"><a class="header-anchor" href="#openfeign默认等待1秒-超时后报错"><span>OpenFeign默认等待1秒，超时后报错</span></a></h4><h4 id="是什么-1" tabindex="-1"><a class="header-anchor" href="#是什么-1"><span>是什么</span></a></h4><h5 id="openfeign默认支持ribbon" tabindex="-1"><a class="header-anchor" href="#openfeign默认支持ribbon"><span>OpenFeign默认支持Ribbon</span></a></h5><p>默认Feign客户端只等待一秒钟， 但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。yml文件中开启配置</p><h4 id="yml文件里需要开启openfeign" tabindex="-1"><a class="header-anchor" href="#yml文件里需要开启openfeign"><span>YML文件里需要开启OpenFeign</span></a></h4><p>server: port: 80eureka: client: # 是否将自己注册进Eureka Server register-with-eureka: false # 是否从Eureka Server获取注册信息 fetch-registry: true service-url: defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka# 设置feign客户端超时时间(OpenFeign默认支持ribbon)ribbon: # 指的是建立连接所用的时间,适用于网络状态正常的情况下,两端连接所用的时间 ReadTimeout: 5000 # 指的是建立连接后从服务器读取到可用资源所用的时间 ConnectTimeout: 5000</p><h5 id="延迟后返回" tabindex="-1"><a class="header-anchor" href="#延迟后返回"><span>延迟后返回</span></a></h5><h3 id="openfeign日志打印功能" tabindex="-1"><a class="header-anchor" href="#openfeign日志打印功能"><span>OpenFeign日志打印功能</span></a></h3><h4 id="是什么-2" tabindex="-1"><a class="header-anchor" href="#是什么-2"><span>是什么</span></a></h4><p>Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。说白了就是<code>对Feign接口的调用情况进行监控和输出</code></p><h4 id="日志级别" tabindex="-1"><a class="header-anchor" href="#日志级别"><span>日志级别</span></a></h4><p>o NONE:默认的，不显示任何日志;</p><p>o BASIC:仅记录请求方法、URL、响应状态码及执行时间;</p><p>o HEADERS:除了BASIC中定义的信息之外，还有请求和响应的头信息;</p><p>o FULL: 除了.HEADERS中定义的信息之外,还有请求和响应的正文及元数据。</p><h4 id="配置日志bean" tabindex="-1"><a class="header-anchor" href="#配置日志bean"><span>配置日志bean</span></a></h4><h5 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>config</span></a></h5><p>FeignConfig此处设置为FULL级</p><p>@Configurationpublic class FeignConfig { @Bean public Logger.Level feignLoggerLevel() { // 请求和响应的头信息,请求和响应的正文及元数据 return Logger.Level.FULL; }}</p><h5 id="yml文件里面需要开启日志客户端" tabindex="-1"><a class="header-anchor" href="#yml文件里面需要开启日志客户端"><span>YML文件里面需要开启日志客户端</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> server:  port: 80eureka:  client:   # 是否将自己注册进Eureka Server   register-with-eureka: false   # 是否从Eureka Server获取注册信息   fetch-registry: true   service-url:    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka# 设置feign客户端超时时间(OpenFeign默认支持ribbon)ribbon:  # 指的是建立连接所用的时间,适用于网络状态正常的情况下,两端连接所用的时间  ReadTimeout: 5000  # 指的是建立连接后从服务器读取到可用资源所用的时间  ConnectTimeout: 5000logging:  level:   # feign日志以什么级别监控哪个接口   com.bilibili.springcloud.service.PaymentFeignService: debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="后台日志产看" tabindex="-1"><a class="header-anchor" href="#后台日志产看"><span>后台日志产看</span></a></h4><p><img src="'+y+'" alt="1609683321415_image.png"></p><p>o</p><h1 id="_3-服务降级-hystrix" tabindex="-1"><a class="header-anchor" href="#_3-服务降级-hystrix"><span>3. 服务降级(Hystrix)</span></a></h1><h2 id="概述-2" tabindex="-1"><a class="header-anchor" href="#概述-2"><span>概述</span></a></h2><h3 id="分布式系统面临的问题" tabindex="-1"><a class="header-anchor" href="#分布式系统面临的问题"><span>分布式系统面临的问题</span></a></h3><p>o 复杂分布式体系结构中的应用程序有数十个依赖关系,每个依赖关系在某些时候将不可避免地失败。</p><p>o 服务雪崩</p><p>服务雪崩多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C,微服务B和微服务C又调用其它的微服务,这就是所谓的“扇出”，如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源,进而引起系统崩溃,所谓的“雪崩效应”.对于高流量的应用来说，单-的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是,这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><h3 id="hystrix简介" tabindex="-1"><a class="header-anchor" href="#hystrix简介"><span>Hystrix简介</span></a></h3><pre><code>Hystrix是一 个用于处理分布式系统的`延迟`和`容错`的开源库,在分布式系统里,许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一 个依赖出问题的情况下，`不会导致整体服务失败，避免级联故障,以提高分布式系统的弹性`。“断路器”本身是-种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控(类似熔断保险丝)，`向调用方返回一个符合预期的、可处理的备选响应(FallBack) ，而不是长时间的等待或者抛出调用方无法处理的异常`，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。 \n</code></pre><h3 id="能干什么-2" tabindex="-1"><a class="header-anchor" href="#能干什么-2"><span>能干什么</span></a></h3><ol><li><p>服务降级</p></li><li><p>服务熔断</p></li><li><p>接近实时的监控</p></li><li><p>............</p></li></ol><h3 id="官网-4" tabindex="-1"><a class="header-anchor" href="#官网-4"><span>官网</span></a></h3><p>o https://github.com/Netflix/Hystrix</p><h3 id="官宣停更进维" tabindex="-1"><a class="header-anchor" href="#官宣停更进维"><span>官宣停更进维</span></a></h3><h2 id="hystrix重要概念" tabindex="-1"><a class="header-anchor" href="#hystrix重要概念"><span>Hystrix重要概念</span></a></h2><h3 id="服务降级fallback" tabindex="-1"><a class="header-anchor" href="#服务降级fallback"><span>服务降级fallback</span></a></h3><h4 id="服务器忙-请稍后再试-不让客户端等待并立刻返回-一个友好提示-fallback" tabindex="-1"><a class="header-anchor" href="#服务器忙-请稍后再试-不让客户端等待并立刻返回-一个友好提示-fallback"><span>服务器忙，请稍后再试，不让客户端等待并立刻返回-一个友好提示，fallback</span></a></h4><h4 id="哪些情况会出发降级" tabindex="-1"><a class="header-anchor" href="#哪些情况会出发降级"><span>哪些情况会出发降级</span></a></h4><ol><li><p>程序运行异常</p></li><li><p>超时</p></li><li><p>服务熔断触发服务降级</p></li><li><p>线程池/信号量打满也会导致服务降级</p></li></ol><h3 id="服务熔断break" tabindex="-1"><a class="header-anchor" href="#服务熔断break"><span>服务熔断break</span></a></h3><p>o 类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</p><h3 id="服务限流flowlimit" tabindex="-1"><a class="header-anchor" href="#服务限流flowlimit"><span>服务限流flowlimit</span></a></h3><p>o 秒杀高并发等操作，严禁-窝蜂的过来拥挤，大家排队，-秒钟N个，有序进行</p><h2 id="hystrix案例" tabindex="-1"><a class="header-anchor" href="#hystrix案例"><span>Hystrix案例</span></a></h2><h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><h4 id="新建项目cloud-provider-hystrix-payment8001" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-provider-hystrix-payment8001"><span>新建项目cloud-provider-hystrix-payment8001</span></a></h4><h4 id="o改pom" tabindex="-1"><a class="header-anchor" href="#o改pom"><span>o改POM</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependencies&gt; &lt;!--hystrix--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--监控--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写yml-1" tabindex="-1"><a class="header-anchor" href="#写yml-1"><span>写YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 8001spring:  application:   name: cloud-provider-hystrix-paymenteureka:  client:   register-with-eureka: true   fetch-registry: true   service-url:#    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka    defaultZone: http://eureka7001.com:7001/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="主启动-1" tabindex="-1"><a class="header-anchor" href="#主启动-1"><span>主启动</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@EnableEurekaClient@SpringBootApplicationpublic class PaymentHystrixMain8001 {   public static void main(String[] args) {     SpringApplication.run(PaymentHystrixMain8001.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写业务-1" tabindex="-1"><a class="header-anchor" href="#写业务-1"><span>写业务</span></a></h4><h5 id="service-模拟正常和异常" tabindex="-1"><a class="header-anchor" href="#service-模拟正常和异常"><span>service(模拟正常和异常)</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Servicepublic class PaymentService {   public String paymentInfo_OK(Integer id) {     return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; paymentInfo_OK,id:&quot; + id + &quot;\\t&quot; + &quot;O(∩_∩)O哈哈~&quot;;   }   /**   * 模拟超时访问   * HystrixCommand:一旦调用服务方法失败并抛出了错误信息后,会自动调用@HystrixCommand标注好的fallbckMethod调用类中的指定方法   * execution.isolation.thread.timeoutInMilliseconds:线程超时时间3秒钟   * @param id   * @return   */   public String paymentInfo_TimeOut(Integer id) {     ///int age = 10 / 0;     int timeNumber = 5;     try {       // 暂停5秒钟       TimeUnit.SECONDS.sleep(timeNumber);     } catch (InterruptedException e) {       e.printStackTrace();     }     return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; paymentInfo_TimeOut,id:&quot; + id + &quot;\\t&quot; +         &quot; 耗时(秒)&quot; + timeNumber;   }   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="controller-模拟正常和异常" tabindex="-1"><a class="header-anchor" href="#controller-模拟正常和异常"><span>controller(模拟正常和异常)</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Slf4j@RestControllerpublic class PaymentController {   @Resource   private PaymentService paymentService;   @Value(&quot;${server.port}&quot;)   private String servicePort;   /**   * 正常访问   * @param id   * @return   */   @GetMapping(&quot;/payment/hystrix/ok/{id}&quot;)   public String paymentInfo_OK(@PathVariable(&quot;id&quot;) Integer id) {     String result = paymentService.paymentInfo_OK(id);     log.info(&quot;*****result:&quot; + result);     return result;   }   /**   * 超时访问   * @param id   * @return   */   @GetMapping(&quot;/payment/hystrix/timeout/{id}&quot;)   public String paymentInfo_TimeOut(@PathVariable(&quot;id&quot;) Integer id) {     String result = paymentService.paymentInfo_TimeOut(id);     log.info(&quot;*****result:&quot; + result);     return result;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="测试-2" tabindex="-1"><a class="header-anchor" href="#测试-2"><span>测试</span></a></h4><h5 id="启动erueka7001" tabindex="-1"><a class="header-anchor" href="#启动erueka7001"><span>启动erueka7001</span></a></h5><h5 id="启动cloud-provider-hystrix-payment8001" tabindex="-1"><a class="header-anchor" href="#启动cloud-provider-hystrix-payment8001"><span>启动cloud-provider-hystrix-payment8001</span></a></h5><h5 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h5><p>· 正常o http://localhost:8001/payment/hystrix/ok/1</p><p><img src="'+b+'" alt="1609767328316_image.png"></p><p>· 异常o http://localhost:8001/payment/hystrix/timeout/1</p><p>延迟正常返回</p><p><img src="'+v+'" alt="1609767472565_image.png"></p><h4 id="上述moudle都正常" tabindex="-1"><a class="header-anchor" href="#上述moudle都正常"><span>上述Moudle都正常</span></a></h4><p>· 下一节以此为基础，正常-&gt;错误-&gt;降级熔断-&gt;恢复</p><h3 id="高并发测试" tabindex="-1"><a class="header-anchor" href="#高并发测试"><span>高并发测试</span></a></h3><h4 id="使用jmeter压测" tabindex="-1"><a class="header-anchor" href="#使用jmeter压测"><span>使用JMeter压测</span></a></h4><p><img src="'+f+'" alt="1609770208448_image.png"></p><p><img src="'+q+'" alt="1609770218354_image.png"></p><p><img src="'+I+'" alt="1609770245421_image.png"></p><p><a href="/SpringCloud/1609770405752_image.png" target="_blank" rel="noopener noreferrer">1609770405752_image.png</a></p><h4 id="此时再访问正常-异常接口都会出现延迟" tabindex="-1"><a class="header-anchor" href="#此时再访问正常-异常接口都会出现延迟"><span>此时再访问正常/异常接口都会出现延迟</span></a></h4><p>tomcat的默认的工作线程数被打满了,没有多余的线程来分解压力和处理。</p><h4 id="_80访问接口同样会被阻塞" tabindex="-1"><a class="header-anchor" href="#_80访问接口同样会被阻塞"><span>80访问接口同样会被阻塞</span></a></h4><h5 id="新建项目cloud-consumer-feign-hystrix-order80" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-consumer-feign-hystrix-order80"><span>新建项目cloud-consumer-feign-hystrix-order80</span></a></h5><h5 id="§改pom" tabindex="-1"><a class="header-anchor" href="#§改pom"><span>§改POM</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependencies&gt; &lt;!--hystrix--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--openfeign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--eureka client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--监控--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="写yml-2" tabindex="-1"><a class="header-anchor" href="#写yml-2"><span>写YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 80eureka:  client:   register-with-eureka: false   fetch-registry: true   service-url:#    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka    defaultZone: http://eureka7001.com:7001/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="主启动-2" tabindex="-1"><a class="header-anchor" href="#主启动-2"><span>主启动</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@EnableFeignClients@SpringBootApplicationpublic class OrderHystrixMain80 {   public static void main(String[] args) {     SpringApplication.run(OrderHystrixMain80.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="写业务-2" tabindex="-1"><a class="header-anchor" href="#写业务-2"><span>写业务</span></a></h5><h6 id="service-1" tabindex="-1"><a class="header-anchor" href="#service-1"><span>service</span></a></h6><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@FeignClient(&quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)public interface PaymentHystrixService {   /**   * 正常访问   * @param id   * @return   */   @GetMapping(&quot;/payment/hystrix/ok/{id}&quot;)   String paymentInfo_OK(@PathVariable(&quot;id&quot;) Integer id);   /**   * 超时   * @param id   * @return   */   @GetMapping(&quot;/payment/hystrix/timeout/{id}&quot;)   String paymentInfo_TimeOut(@PathVariable(&quot;id&quot;) Integer id);}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h6 id="controller-2" tabindex="-1"><a class="header-anchor" href="#controller-2"><span>controller</span></a></h6><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Slf4j@RestControllerpublic class OrderHystrixController {   @Resource   private PaymentHystrixService paymentHystrixService;   /**   * 正常访问   * @param id   * @return   */   @GetMapping(&quot;/consumer/payment/hystrix/ok/{id}&quot;)   public String paymentInfo_OK(@PathVariable(&quot;id&quot;) Integer id) {     return paymentHystrixService.paymentInfo_OK(id);   }   /**   * 超时   * @param id   * @return   */   @GetMapping(&quot;/consumer/payment/hystrix/timeout/{id}&quot;)   public String paymentInfo_TimeOut(@PathVariable(&quot;id&quot;) Integer id) {     //int age = 10/0;     return paymentHystrixService.paymentInfo_TimeOut(id);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="jmeter下测试" tabindex="-1"><a class="header-anchor" href="#jmeter下测试"><span>Jmeter下测试</span></a></h5><p>· 要么延迟返回</p><p>· 要么直接超时</p><p><img src="'+x+'" alt="1609772746345_image.png"></p><h3 id="故障现象和导致原因" tabindex="-1"><a class="header-anchor" href="#故障现象和导致原因"><span>故障现象和导致原因</span></a></h3><p>o 8001同一层次的其它接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕</p><p>o 80此时调用8001，客户端访问响应缓慢，转圈圈</p><h3 id="上诉结论" tabindex="-1"><a class="header-anchor" href="#上诉结论"><span>上诉结论</span></a></h3><p>o 正因为有上述故障或不佳表现才有我们的降级/容错/限流等技术诞生</p><h3 id="如何解决-解决的要求" tabindex="-1"><a class="header-anchor" href="#如何解决-解决的要求"><span>如何解决？解决的要求</span></a></h3><h4 id="超时导致服务器变慢-转圈" tabindex="-1"><a class="header-anchor" href="#超时导致服务器变慢-转圈"><span>超时导致服务器变慢(转圈)</span></a></h4><p>解决：超时不再等待（告知结果）</p><h4 id="出错-宕机或程序运行出错" tabindex="-1"><a class="header-anchor" href="#出错-宕机或程序运行出错"><span>出错(宕机或程序运行出错)</span></a></h4><p>解决：出错有兜底策略</p><h4 id="解决" tabindex="-1"><a class="header-anchor" href="#解决"><span>解决</span></a></h4><ol><li><p>对方服务(8001 )超时了,调用者(80)不能一直卡死等待，必须有服务降级</p></li><li><p>对方服务(8001)down机了，调用者(80)不能一直卡死等待，必须有服务降级</p></li><li><p>对方服务(8001)OK,调用者(80)自己出故障或有自我要求(自己的等待时间小于服务提供者)，自己处理降级</p></li></ol><h3 id="·-服务降级" tabindex="-1"><a class="header-anchor" href="#·-服务降级"><span><strong>· 服务降级</strong></span></a></h3><h4 id="降级配置" tabindex="-1"><a class="header-anchor" href="#降级配置"><span>降级配置</span></a></h4><p>@HystrixCommand</p><h4 id="_8001先从自身找问题" tabindex="-1"><a class="header-anchor" href="#_8001先从自身找问题"><span>8001先从自身找问题</span></a></h4><p>设置自身调用超时时间的峰值，峰值内可以正常运行,超过了需要有兜底的方法处理，作服务降级fallback</p><h4 id="_8001fallback" tabindex="-1"><a class="header-anchor" href="#_8001fallback"><span>8001fallback</span></a></h4><h5 id="主启动类激活" tabindex="-1"><a class="header-anchor" href="#主启动类激活"><span>主启动类激活</span></a></h5><p><strong>· 添加注解@EnableCircuitBreaker</strong></p><p>@EnableFeignClients@EnableEurekaClient@SpringBootApplicationpublic class OrderHystrixMain80 { public static void main(String[] args) { SpringApplication.run(OrderHystrixMain80.class, args); }}</p><h5 id="业务类启用" tabindex="-1"><a class="header-anchor" href="#业务类启用"><span>业务类启用</span></a></h5><p>/** * 模拟超时访问 * HystrixCommand:一旦调用服务方法失败并抛出了错误信息后,会自动调用@HystrixCommand标注好的fallbckMethod调用类中的指定方法 * execution.isolation.thread.timeoutInMilliseconds:线程超时时间3秒钟 * @param id * @return <em>/ @HystrixCommand(fallbackMethod = &quot;payment_TimeOutHandler&quot;, commandProperties = { @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;) }) //服务降级后的处理方法，上限3秒 public String paymentInfo_TimeOut(Integer id) { ///int age = 10 / 0; int timeNumber = 5; try { // 暂停5秒钟 TimeUnit.SECONDS.sleep(timeNumber); } catch (InterruptedException e) { e.printStackTrace(); } return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; paymentInfo_TimeOut,id:&quot; + id + &quot;\\t&quot; + &quot; 耗时(秒)&quot; + timeNumber; }/</em>* * 兜底方案 * * @param id * @return */public String payment_TimeOutHandler(Integer id) { return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; 系统繁忙或运行错误,请稍后重试,id:&quot; + id + &quot;\\t&quot; + &quot;o(╥﹏╥)o&quot;; }</p><h6 id="·-hystrixcommand报异常后如何处理" tabindex="-1"><a class="header-anchor" href="#·-hystrixcommand报异常后如何处理"><span><strong>· @HystrixCommand报异常后如何处理</strong></span></a></h6><p>一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法</p><h5 id="当服务不可用-服务进行降级" tabindex="-1"><a class="header-anchor" href="#当服务不可用-服务进行降级"><span>当服务不可用，服务进行降级</span></a></h5><h6 id="测试-3" tabindex="-1"><a class="header-anchor" href="#测试-3"><span>测试</span></a></h6><p>· http://localhost/consumer/payment/hystrix/timeout/1</p><h4 id="_80fallback" tabindex="-1"><a class="header-anchor" href="#_80fallback"><span>80fallback</span></a></h4><h5 id="_80订单微服务-也可以更好的保护自己-自己也依样画葫芦进行客户端降级保护" tabindex="-1"><a class="header-anchor" href="#_80订单微服务-也可以更好的保护自己-自己也依样画葫芦进行客户端降级保护"><span>80订单微服务，也可以更好的保护自己，自己也依样画葫芦进行客户端降级保护</span></a></h5><h5 id="yml" tabindex="-1"><a class="header-anchor" href="#yml"><span>YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 80eureka:  client:   register-with-eureka: false   fetch-registry: true   service-url:#    defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka    defaultZone: http://eureka7001.com:7001/eurekafeign:  hystrix:   # 在feign中开启Hystrix   enabled: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h6 id="·-controller中超时时间配置不生效原因" tabindex="-1"><a class="header-anchor" href="#·-controller中超时时间配置不生效原因"><span><strong>· controller中超时时间配置不生效原因</strong></span></a></h6><p>关键在于feign:hystrix:enabled: true的作用，官网解释“Feign将使用断路器包装所有方法”，也就是将@FeignClient标记的那个service接口下所有的方法进行了hystrix包装（类似于在这些方法上加了一个@HystrixCommand），这些方法会应用一个默认的超时时间为1s，所以你的service方法也有一个1s的超时时间，service1s就会报异常，controller立马进入备用方法，controller上那个3秒那超时时间就没有效果了。改变这个默认超时时间方法：hystrix: command: default: execution: isolation: thread: timeoutInMilliseconds: 3000ribbon: ReadTimeout: 5000 ConnectTimeout: 5000</p><h5 id="主启动-3" tabindex="-1"><a class="header-anchor" href="#主启动-3"><span>主启动</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· 添加@EnableFeignClients @EnableHystrix@EnableFeignClients@SpringBootApplicationpublic class OrderHystrixMain80 {   public static void main(String[] args) {     SpringApplication.run(OrderHystrixMain80.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="业务类" tabindex="-1"><a class="header-anchor" href="#业务类"><span>业务类</span></a></h5><h6 id="controller-3" tabindex="-1"><a class="header-anchor" href="#controller-3"><span>controller</span></a></h6><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Servicepublic class PaymentService {   public String paymentInfo_OK(Integer id) {     return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; paymentInfo_OK,id:&quot; + id + &quot;\\t&quot; + &quot;O(∩_∩)O哈哈~&quot;;   }   /**   * 模拟超时访问   * HystrixCommand:一旦调用服务方法失败并抛出了错误信息后,会自动调用@HystrixCommand标注好的fallbckMethod调用类中的指定方法   * execution.isolation.thread.timeoutInMilliseconds:线程超时时间3秒钟   * @param id   * @return   */   @HystrixCommand(fallbackMethod = &quot;payment_TimeOutHandler&quot;,  //服务降级后的处理方法       commandProperties = {         @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;5000&quot;)       })   public String paymentInfo_TimeOut(Integer id) {//     int age = 10 / 0;  //运行异常     int timeNumber = 3000;  // 暂停毫秒，超时     try {       TimeUnit.MILLISECONDS.sleep(timeNumber);     } catch (InterruptedException e) {       e.printStackTrace();     }     return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; paymentInfo_TimeOut,id:&quot; + id + &quot;\\t&quot; +         &quot; 耗时(毫秒)&quot; + timeNumber;   }   /**   * 兜底方案   * @param id   * @return   */   public String payment_TimeOutHandler(Integer id) {     return &quot;线程池:&quot; + Thread.currentThread().getName() + &quot; 系统繁忙或运行错误,请稍后重试,id:&quot; + id + &quot;\\t&quot; + &quot;o(╥﹏╥)o&quot;;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="目前问题" tabindex="-1"><a class="header-anchor" href="#目前问题"><span>目前问题</span></a></h4><p>每个业务方法对应-一个兜底的方法，代码膨胀</p><p>统一和自定义的分开</p><h4 id="解决问题" tabindex="-1"><a class="header-anchor" href="#解决问题"><span>解决问题</span></a></h4><h5 id="针对-每个方法配置一个-膨胀" tabindex="-1"><a class="header-anchor" href="#针对-每个方法配置一个-膨胀"><span>针对：每个方法配置一个? ? ?膨胀</span></a></h5><p>1: 1每个方法配置-个服务降级方法，技术上可以，实际上傻X1: N除了个别重要核心业务有专属，其它普通的可以通过@DefaultProperties(defaulFallback= &quot;)统-跳转到统-处理结果页面通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量, o0.∩)O哈哈~</p><h6 id="·-feign接口系列" tabindex="-1"><a class="header-anchor" href="#·-feign接口系列"><span><strong>· feign接口系列</strong></span></a></h6><h6 id="·-defaultproperties-defaultfallback" tabindex="-1"><a class="header-anchor" href="#·-defaultproperties-defaultfallback"><span><strong>· @ DefaultProperties(defaultFallback = &quot;&quot;)</strong></span></a></h6><p><em>在80controller上添加注解@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)并写对应的payment_Global_FallbackMethod()方法</em></p><h6 id="o-设置全局默认-没有指定-兜底方法" tabindex="-1"><a class="header-anchor" href="#o-设置全局默认-没有指定-兜底方法"><span>o 设置全局默认(没有指定)兜底方法</span></a></h6><p><strong>· controller配置</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@RestController@Slf4j@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)public class OrderHystrixController {   @Resource   private PaymentHystrixService paymentHystrixService;   /**   * 正常访问   * http://localhost/consumer/payment/hystrix/ok/32   *   * @param id   * @return   */   @GetMapping(&quot;/consumer/payment/hystrix/ok/{id}&quot;)   public String paymentInfo_OK(@PathVariable(&quot;id&quot;) Integer id) {     return paymentHystrixService.paymentInfo_OK(id);   }   /**   * 超时访问   * http://localhost/consumer/payment/hystrix/timeout/32   *   * @param id   * @return   */   @GetMapping(&quot;/consumer/payment/hystrix/timeout/{id}&quot;)   /*@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;, commandProperties = {       @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;1500&quot;)   })*/   @HystrixCommand   public String paymentInfo_TimeOut(@PathVariable(&quot;id&quot;) Integer id) {     //int age = 10/0;     return paymentHystrixService.paymentInfo_TimeOut(id);   }   /**   * 超时方法fallback   * @param id   * @return   */   public String paymentTimeOutFallbackMethod(@PathVariable(&quot;id&quot;) Integer id) {     return &quot;我是消费者80,对方支付系统繁忙请10秒种后再试或者自己运行出错请检查自己,o(╥﹏╥)o&quot;;   }   /**   * 全局fallback   *   * @return   */   public String payment_Global_FallbackMethod() {     return &quot;Global异常处理信息,请稍后重试.o(╥﹏╥)o&quot;;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="针对-和业务逻辑混一起-混乱" tabindex="-1"><a class="header-anchor" href="#针对-和业务逻辑混一起-混乱"><span>针对：和业务逻辑混一起? ? ?混乱</span></a></h5><h6 id="·-服务降级-客户端去调用服务端-碰上服务端宕机或关闭" tabindex="-1"><a class="header-anchor" href="#·-服务降级-客户端去调用服务端-碰上服务端宕机或关闭"><span><strong>· 服务降级，客户端去调用服务端，碰上服务端宕机或关闭</strong></span></a></h6><h6 id="本次案例服务降级处理是在客户端80实现完成的-与服务端8001没有关系只需要为feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦" tabindex="-1"><a class="header-anchor" href="#本次案例服务降级处理是在客户端80实现完成的-与服务端8001没有关系只需要为feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦"><span>本次案例服务降级处理是在客户端80实现完成的，与服务端8001没有关系只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦</span></a></h6><h6 id="未来我们要面对的异常" tabindex="-1"><a class="header-anchor" href="#未来我们要面对的异常"><span>未来我们要面对的异常</span></a></h6><ol><li><p>运行</p></li><li><p>超时</p></li><li><p>宕机</p></li></ol><h6 id="·-再看我们的业务类paymentcontroller" tabindex="-1"><a class="header-anchor" href="#·-再看我们的业务类paymentcontroller"><span><strong>· 再看我们的业务类PaymentController</strong></span></a></h6><p>o 每个方法都需要提供一个兜底方法。为此，我们需要解耦</p><h6 id="修改cloud-consumer-feign-hystrix-order80根据cloud-consumer-feign-hystrix-order80已经有的paymenthystrixservice接口-重新新建一个类-paymentfallbackservice-实现该接口-统一为接口里面的方法进行异常处理" tabindex="-1"><a class="header-anchor" href="#修改cloud-consumer-feign-hystrix-order80根据cloud-consumer-feign-hystrix-order80已经有的paymenthystrixservice接口-重新新建一个类-paymentfallbackservice-实现该接口-统一为接口里面的方法进行异常处理"><span>修改cloud-consumer-feign-hystrix-order80根据cloud-consumer-feign-hystrix- order80已经有的PaymentHystrixService接口,重新新建一个类(PaymentFallbackService)实现该接口， 统一为接口里面的方法进行异常处理</span></a></h6><p><strong>o 实现service</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>PaymentFallbackService类实现PaymentFeignClientService接口 public class PaymentFallbackService implements PaymentHystrixService {   @Override   public String paymentInfo_OK(Integer id) {     return &quot;----PaymentFallbackService fall back-paymentInfo_OK,o(╥﹏╥)o&quot;;   }   @Override   public String paymentInfo_TimeOut(Integer id) {     return &quot;----PaymentFallbackService fall back-paymentInfo_TimeOut,o(╥﹏╥)o&quot;;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>o service加注解</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;, fallback = PaymentFallbackService.class)public interface PaymentHystrixService {   /**   * 正常访问   * @param id   * @return   */   @GetMapping(&quot;/payment/hystrix/ok/{id}&quot;)   String paymentInfo_OK(@PathVariable(&quot;id&quot;) Integer id);   /**   * 超时   * @param id   * @return   */   @GetMapping(&quot;/payment/hystrix/timeout/{id}&quot;)   String paymentInfo_TimeOut(@PathVariable(&quot;id&quot;) Integer id);}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h6 id="·-yml" tabindex="-1"><a class="header-anchor" href="#·-yml"><span><strong>· YML</strong></span></a></h6><p><em>别忘了添加feign: hystrix: # 在feign中开启Hystrix enabled: true</em></p><h6 id="·-paymentfeignclientservice接口" tabindex="-1"><a class="header-anchor" href="#·-paymentfeignclientservice接口"><span><strong>· PaymentFeignClientService接口]</strong></span></a></h6><h6 id="·-测试" tabindex="-1"><a class="header-anchor" href="#·-测试"><span><strong>· 测试</strong></span></a></h6><ol><li><p>单个eureka先启动7001</p></li><li><p>PaymentHystrixMain8001启动</p></li><li><p>正常访问测试 http://localhost/consumer/payment/hystrix/ok/1</p></li><li><p>故意关闭微服务8001 http://localhost/consumer/payment/hystrix/ok/1</p><p>此时服务端proyider已经down了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器</p></li><li><p>客户端自己调用提示</p><p><img src="'+D+`" alt="1609861242174_image.png"></p></li></ol><h3 id="服务熔断" tabindex="-1"><a class="header-anchor" href="#服务熔断"><span>服务熔断</span></a></h3><h4 id="熔断是什么" tabindex="-1"><a class="header-anchor" href="#熔断是什么"><span>熔断是什么</span></a></h4><p>熔断机制概述熔断机制是应对雪崩效应的一-种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。在Spring Cloud框架里,熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是@HystrixCommand.</p><h4 id="实操" tabindex="-1"><a class="header-anchor" href="#实操"><span>实操</span></a></h4><h5 id="修改cloud-provider-hystrix-payment8001" tabindex="-1"><a class="header-anchor" href="#修改cloud-provider-hystrix-payment8001"><span>修改cloud-provider-hystrix-payment8001</span></a></h5><h5 id="paymentservice" tabindex="-1"><a class="header-anchor" href="#paymentservice"><span>PaymentService</span></a></h5><h6 id="·-新增熔断方法" tabindex="-1"><a class="header-anchor" href="#·-新增熔断方法"><span>· 新增熔断方法</span></a></h6><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//====服务熔断========================</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 在10秒窗口期中10次请求有6次是请求失败的,断路器将起作用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@return</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">HystrixCommand</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            fallbackMethod</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">paymentCircuitBreaker_fallback</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> commandProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">HystrixProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circuitBreaker.enabled</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 是否开启断路器</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">HystrixProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circuitBreaker.requestVolumeThreshold</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">10</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 请求次数</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">HystrixProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circuitBreaker.sleepWindowInMilliseconds</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">10000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 时间窗口期/时间范文</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">HystrixProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">circuitBreaker.errorThresholdPercentage</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">60</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 失败率达到多少后跳闸</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    )</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">paymentCircuitBreaker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">PathVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RuntimeException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">*****id不能是负数</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> serialNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> IdUtil</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">simpleUUID</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">调用成功,流水号:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> serialNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">paymentCircuitBreaker_fallback</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">PathVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">id 不能负数,请稍后重试,o(╥﹏╥)o id:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="paymentcontroller" tabindex="-1"><a class="header-anchor" href="#paymentcontroller"><span><strong>PaymentController</strong></span></a></h5><h6 id="新增熔断接口" tabindex="-1"><a class="header-anchor" href="#新增熔断接口"><span>新增熔断接口</span></a></h6><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**   * 服务熔断   * http://localhost:8001/payment/circuit/32   * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@return</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   */</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">GetMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/payment/circuit/{id}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">paymentCircuitBreaker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">PathVariable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">id</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">     String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> paymentService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">paymentCircuitBreaker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">     log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">***result:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="测试-4" tabindex="-1"><a class="header-anchor" href="#测试-4"><span>测试</span></a></h5><h6 id="正确" tabindex="-1"><a class="header-anchor" href="#正确"><span>正确</span></a></h6><p>o http://localhost:8001/payment/circuit/1</p><h6 id="错误" tabindex="-1"><a class="header-anchor" href="#错误"><span>错误</span></a></h6><p>o http://localhost:8001/payment/circuit/-1</p><h6 id="在频繁错误后突然访问正确接口即可观察到服务被熔断" tabindex="-1"><a class="header-anchor" href="#在频繁错误后突然访问正确接口即可观察到服务被熔断"><span>在频繁错误后突然访问正确接口即可观察到服务被熔断</span></a></h6><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><h5 id="熔断类型" tabindex="-1"><a class="header-anchor" href="#熔断类型"><span>熔断类型</span></a></h5><h6 id="熔断打开" tabindex="-1"><a class="header-anchor" href="#熔断打开"><span>熔断打开</span></a></h6><p>o 请求不再进行调用当前服务。内部设置时钟- -般为MTTR (平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</p><h6 id="熔断关闭" tabindex="-1"><a class="header-anchor" href="#熔断关闭"><span>熔断关闭</span></a></h6><p>o 熔断关闭不会对服务进行熔断</p><h6 id="熔断半开" tabindex="-1"><a class="header-anchor" href="#熔断半开"><span>熔断半开</span></a></h6><p>o 部分请求根据规则调用当前服务，如果请求成功目符合规则则认为当前服务恢复正常，关闭熔断</p><h5 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h5><h6 id="断路器在什么情况下开始起作用" tabindex="-1"><a class="header-anchor" href="#断路器在什么情况下开始起作用"><span>断路器在什么情况下开始起作用</span></a></h6><p>o 涉及到断路器的三个重要参数:快照时间窗、请求总数阀值、错误百分比阀值。 涉及到断路器的三个重要参数:快照时间窗、请求总数阀值、错误百分比阀值。1:快照时间窗:断路器确定是否打开需要统计一些请求和错误数据， 而统计的时间范围就是快照时间窗，默认为最近的10秒。2:请求总数阀值:在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20,意味着在10秒内，如果该hystrix命令的调用次数不足20次,即使所有的请求都超时或其他原因失败，断路器都不会打开。3:错误百分比阀值:当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</p><p><img src="`+A+'" alt="1609939698855_image.png"></p><h6 id="断路器开启或关闭的条件" tabindex="-1"><a class="header-anchor" href="#断路器开启或关闭的条件"><span>断路器开启或关闭的条件</span></a></h6><ul><li><p>当满足一定的阀值的时候(默认10秒内超过20个请求次数)</p></li><li><p>当失败率达到一定的时候(默认10秒内超过50%的请求失败)</p></li><li><p>到达以上阀值，断路器将会开启</p></li><li><p>当开启的时候，所有请求都不会进行转发</p></li><li><p>一段时间之后(默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5</p></li></ul><h6 id="断路器打开之后" tabindex="-1"><a class="header-anchor" href="#断路器打开之后"><span>断路器打开之后</span></a></h6><p>1:再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。2:原来的主逻辑要如何恢复呢?对于这-问题，hystrix也为我们实现了 自动恢复功能。当断路器打开，对主逻辑进行熔断之后, hystrix会启动- 个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑,当休眠时间窗到期，断路器将进入半开状态，释放- -次请求到原来的主逻辑上,如果此次请求正常返回,那么断路器将继续闭合,主逻辑恢复,如果这次请求依然有问题，断路器继续进入打开状态,休眠时间窗重新计时。</p><h6 id="all配置" tabindex="-1"><a class="header-anchor" href="#all配置"><span>All配置</span></a></h6><h3 id="服务限流" tabindex="-1"><a class="header-anchor" href="#服务限流"><span>服务限流</span></a></h3><p>o 详见--后面高级篇讲解alibaba的Sentinel说明</p><h3 id="hystrix工作流程" tabindex="-1"><a class="header-anchor" href="#hystrix工作流程"><span>Hystrix工作流程</span></a></h3><h3 id="服务监控hystrixdashbord" tabindex="-1"><a class="header-anchor" href="#服务监控hystrixdashbord"><span>服务监控HystrixDashbord</span></a></h3><h4 id="概述-3" tabindex="-1"><a class="header-anchor" href="#概述-3"><span>概述</span></a></h4><p>除了隔离依赖服务的调用以外，Hystrix还提供 了准实时的调用监控(Hystrix Dashboard) . Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h4 id="仪表盘9001" tabindex="-1"><a class="header-anchor" href="#仪表盘9001"><span>仪表盘9001</span></a></h4><h5 id="新建项目cloud-consumer-hystrix-dashboard9001" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-consumer-hystrix-dashboard9001"><span>新建项目cloud-consumer-hystrix-dashboard9001</span></a></h5><h5 id="o改pom-1" tabindex="-1"><a class="header-anchor" href="#o改pom-1"><span>o改POM</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependencies&gt; &lt;!--hystrix dashboard--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--actuator监控信息完善--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="写yml-3" tabindex="-1"><a class="header-anchor" href="#写yml-3"><span>写YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 9001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="主启动-enablehystrixdashboard" tabindex="-1"><a class="header-anchor" href="#主启动-enablehystrixdashboard"><span>主启动+@EnableHystrixDashboard</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@EnableHystrixDashboard@SpringBootApplicationpublic class HystrixDashboardMain9001 {   public static void main(String[] args) {     SpringApplication.run(HystrixDashboardMain9001.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="所有provider微服务提供类-8001-8002-8003-都需要监控依赖配置" tabindex="-1"><a class="header-anchor" href="#所有provider微服务提供类-8001-8002-8003-都需要监控依赖配置"><span>所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;!--监控--&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="测试-5" tabindex="-1"><a class="header-anchor" href="#测试-5"><span>测试</span></a></h5><p>http://localhost:9001/hystrix</p><h4 id="断路器演示-服务监控hystrixdashboard" tabindex="-1"><a class="header-anchor" href="#断路器演示-服务监控hystrixdashboard"><span>断路器演示(服务监控hystrixDashboard)</span></a></h4><h5 id="_8001服务提供者添加监控-依赖" tabindex="-1"><a class="header-anchor" href="#_8001服务提供者添加监控-依赖"><span>8001服务提供者添加监控 依赖</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;!--监控--&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_9001监控8001就填写8001的地址" tabindex="-1"><a class="header-anchor" href="#_9001监控8001就填写8001的地址"><span>9001监控8001就填写8001的地址</span></a></h5><h5 id="测试-6" tabindex="-1"><a class="header-anchor" href="#测试-6"><span>测试</span></a></h5><h6 id="成功" tabindex="-1"><a class="header-anchor" href="#成功"><span>成功</span></a></h6><p>· http://localhost:8001/payment/circuit/1</p><h6 id="失败" tabindex="-1"><a class="header-anchor" href="#失败"><span>失败</span></a></h6><p>· http://localhost:8001/payment/circuit/-1</p><h6 id="查看仪表盘" tabindex="-1"><a class="header-anchor" href="#查看仪表盘"><span>查看仪表盘</span></a></h6><ul><li><p>7色 实心圆:共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。该实心圆除了颜色的变化之外,它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例。</p></li><li><p>1圈</p></li><li><p>1线</p></li><li><p>整图说明</p><p><img src="'+E+'" alt="1609943207187_image.png"></p></li></ul><p>·</p><h6 id="报错修改" tabindex="-1"><a class="header-anchor" href="#报错修改"><span>报错修改</span></a></h6><p>报错Unable to connect to Command Metric Stream.</p><p><strong>8001</strong></p><p>· 8001主启动 <code>@EnableHystrixDashboard@SpringBootApplicationpublic class HystrixDashboardMain9001 { public static void main(String[] args) { SpringApplication.run(HystrixDashboardMain9001.class, args); } /** * 此配置是为了服务监控而配置，与服务容错本身无观，springCloud 升级之后的坑 * ServletRegistrationBean因为springboot的默认路径不是/hystrix.stream * 只要在自己的项目中配置上下面的servlet即可 * @return */ @Bean public ServletRegistrationBean getServlet(){ HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet(); ServletRegistrationBean&lt;HystrixMetricsStreamServlet&gt; registrationBean = new ServletRegistrationBean&lt;&gt;(streamServlet); registrationBean.setLoadOnStartup(1); registrationBean.addUrlMappings(&quot;/hystrix.stream&quot;); registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;); return registrationBean; }}</code></p><p>· YML <code>#暴露全部的监控信息management: endpoints: web: exposure: include: &quot;*&quot; </code></p><p><strong>9001</strong></p><p>· YML <code>#暴露全部的监控信息management: endpoints: web: exposure: include: &quot;*&quot; </code></p><h1 id="_4-服务网关-gateway" tabindex="-1"><a class="header-anchor" href="#_4-服务网关-gateway"><span>4. 服务网关(gateway)</span></a></h1><h2 id="zuul" tabindex="-1"><a class="header-anchor" href="#zuul"><span>zuul</span></a></h2><p>已停更，略。。。</p><h2 id="概述-4" tabindex="-1"><a class="header-anchor" href="#概述-4"><span>概述</span></a></h2><h3 id="是什么-3" tabindex="-1"><a class="header-anchor" href="#是什么-3"><span>是什么</span></a></h3><p>Cloud 全家桶中很重要的一个组件就是网关，在 1.x 版本中都是采用 Zuul 网关，但是在 2.x 版本中，zuul 升级一种跳票，SpringCloud 最后自己研发了一个网关替代Zuul, 那就是 SpringCloud GateWay 换句话说 gateway 就是原 zuul 1.x 版本的`替代方案SpringCloud GateWay 是 Spring Cloud 的一个全新的项目， 基于 Spring 5.0 + Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构通过一种鸡蛋呢有效的统一的API 路由管理方式Spring Cloud GateWay 作为 Spring Cloud 生态系统的网关， 目标是替代 Zuul ， 在Spring Cloud2.0 以上版本种，没有对新版本的 Zuul 2.0 以上版本最高性能版本进行集成，仍然还是使用的 Zuul 1.x 非 Reactor 模式的老版本，为了提升网关性能， Spring Cloud GateWay 基于 WebFlux 框架实现的，而WebFlux 框架底层则使用了高性能的 Reactor 模式通讯框架 NettySpring Cloud GateWay 的目标是提供统一的路由方式且基于Filter 链的方式提供网关的基本功能，例如：安全，监控/指标， 和限流。</p><h4 id="springcloud-gateway使用的webflux中的reactor-netty响应式比亲车给你组件-底层采用了netty通讯框架" tabindex="-1"><a class="header-anchor" href="#springcloud-gateway使用的webflux中的reactor-netty响应式比亲车给你组件-底层采用了netty通讯框架"><span>SpringCloud Gateway使用的Webflux中的reactor: netty响应式比亲车给你组件，底层采用了netty通讯框架</span></a></h4><h3 id="能干什么-3" tabindex="-1"><a class="header-anchor" href="#能干什么-3"><span>能干什么</span></a></h3><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li><li>...... <img src="'+C+'" alt="1610027754330_image.png"></li></ul><h3 id="微服务中的网关层" tabindex="-1"><a class="header-anchor" href="#微服务中的网关层"><span>微服务中的网关层</span></a></h3><p>网关是在微服务访问的入口，对外是负载均衡Nginx</p><h3 id="zuul和gateway选择" tabindex="-1"><a class="header-anchor" href="#zuul和gateway选择"><span>zuul和gateway选择</span></a></h3><h4 id="我们为什选择gateway" tabindex="-1"><a class="header-anchor" href="#我们为什选择gateway"><span>我们为什选择gateway</span></a></h4><ol><li>ntix不靠谐，zuul2.0 -直跳票，迟迟不发布</li><li>springcloud gateway具有如下特征 Spring Cloud Gateway 具有如下特征：基于 Spring Framework5 . Project Reactor 和Spring Boot 2.0 进行构建。动态路由：能够匹配任何请求属性；可以路由指定 Predicate (断言) 和 Filter （过滤器）集成 Hystrix 的断路器功能；集成 Spring Cloud 服务发现功能抑郁编写Predicate (断言) 和 Filter (过滤器)请求限流共恩感支持路径重写。</li><li>springcloud gateway和zuul的区别目 Spring Cloud Gatway 和 Zuul 的区别在SpringCloud Finchley 正式版之前， Spring Cloud 推荐的网关是 Netflix 提供的 Zuul1、Zuul 1.x 是基于阻塞 I/0 的 API Gateway2、Zuul 1.x 基于 Servlet 2.5 使用阻塞架构他不支持任何常链接（如 WebSocket ） Zuul 的涉及模式和 Niginx 很像， 每次 I / 0 操作都是从工作线程种选择一个执行，请求线程被阻塞到工作线程完成，但是差别是 Nginx 使用的是 C++ 实现，Zuul 使用的是Java 实现，而JVM 本省会有第一次加载比较慢的情况，使得 Zuul 的性能相对较差3、Zuul2.x 理想更为陷阱，想基于Netty 非阻塞和支持常谅解， 但是 SpringCloud 目前没有整合。 Zuul2.x 的性能较 Zuul1.x 有较大的提升。在性能方面，根据官方提供的基准测试， Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1.6 倍</li><li>Spring Cloud Gateway 建立在 Spring Framework5、 Project Reactor 和Spring Boot 2之上，使用非阻塞 API。</li><li>Spring Cloud Gateway 还支持 websocket ， 并且与 Spring 紧密集成拥有更好的开发体验。</li></ol><h4 id="zuul1-x模型" tabindex="-1"><a class="header-anchor" href="#zuul1-x模型"><span>zuul1.X模型</span></a></h4><p>Springcloud 中集成的Zuul 版本， 采用的是 Tomcat 容器，使用的是传统的 Servlet IO 处理模型。servlet 由 servlet container 进行生命周期管理。container 启动时，构造 servlet 对象并调用 servlet init（） 进行初始化；container 运行时接受请求，并为每一个请求分配一个线程（一般从线程池中获取空闲线程，）然后调用service（）container 关闭时调用 servlet destory ()销毁 servlet上述模型的缺点：servlet 是一个简单的网络 I/O 模型，当前请求进入servlet container 时，servlet container 就会为其绑定一个线程， 在并发不高的场景下，这种模型适用的。但是一旦在高并发（比如用jmeter压测）， 线程数量就会上涨， 而线程资源代价时昂贵的（上下文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下， 不希望为每个 request分配一个线程，只需要1个或这几个线程就能应对极大的并发请求。这种场景下servlet 模型没有优势。所以 zuul1.x 时基于 servelt 智商的一个阻塞式处理模型，即 spring 实现了， 处理锁鱼哦request 请求的 servlet （DispatcherServlet ） 并由该 servlet 阻塞式处理。所以 ，springcloud zuul 无法摆脱 servlet 模型的弊端。</p><h4 id="gateway模型" tabindex="-1"><a class="header-anchor" href="#gateway模型"><span>gateway模型</span></a></h4><p><strong>webflux</strong> 传统 Web 框架， 比如说： struts2 , spring mvc 等都是基于 Servlet API 与 Servlet 容器之上运行的。在Servlet3.1 之后有了异步非阻塞的支持。 而WebFlux 是一个典型的非阻塞的异步的框架，它的核心是基于 Reactor 的相关 API 实现的 ， 相对于传统的Web 框架来说，他可以运行在诸如 Netty ，Undertow 支持 Servlet 3.1 的容器上。 非阻塞+ 函数式编程 （Spring 5 必须让你使用 java8）Spring WebFlux 是Spring 5.0 引入的新的响应式框架，区别于 Spring MVC， 它不需要依赖 Servlet API， 它完全是异步非阻塞的， 并且基于 Reactor 来实现响应式流规范。</p><h2 id="三大核心概念" tabindex="-1"><a class="header-anchor" href="#三大核心概念"><span>三大核心概念</span></a></h2><ul><li>Route(路由) 路由是构建网关的基本模块，它由ID，目标URI， 一系列的断言和过滤器组成，如果断言为true则匹配该路由</li><li>Predicate(断言) 参考的是Java8的jva.util.functin.Predicate开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由</li><li>Filter(过滤) 指的是Spring框架中Gatewayfilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li><li>总体 web请求，通过-些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。predicate就是我们的匹配条件;而fiter, 就可以理解为一个无所不能的拦截器。 有了这两个元素，再加上目标uri,就可以实现一个具体的路由了</li></ul><h2 id="gateway工作流程" tabindex="-1"><a class="header-anchor" href="#gateway工作流程"><span>Gateway工作流程</span></a></h2><p><img src="'+S+`" alt="1610027063825_image.png"> · 路由转发+执行过滤器链</p><p>客户端向Spring Cloud Gateway发出请求。然后在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到GatewayWeb Handler.Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前( &quot;pre&quot; )或之后( &quot;post&quot; )执行业务逻辑。Filter在&quot;pre&quot; 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在&quot;post&quot; 类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><h2 id="入门配置" tabindex="-1"><a class="header-anchor" href="#入门配置"><span>入门配置</span></a></h2><h3 id="新建项目cloud-gateway-gateway9527" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-gateway-gateway9527"><span>新建项目cloud-gateway-gateway9527</span></a></h3><h3 id="改pom-1" tabindex="-1"><a class="header-anchor" href="#改pom-1"><span>改POM</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-gateway</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    &lt;!--gateway无需web和actuator--&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-netflix-eureka-client</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.projectlombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">com.atguigu.springcloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cloud-api-common</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${project.version}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写yml-4" tabindex="-1"><a class="header-anchor" href="#写yml-4"><span>写YML</span></a></h3><div class="language-yml line-numbers-mode" data-ext="yml" data-title="yml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9527</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spring</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cloud-gateway</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    eureka</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        instance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        hostname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        cloud-gateway-service  client</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">   fetch-registry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> true   register-with-eureka</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> true   service-url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    defaultZone</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://eureka7001.com:7001/eureka/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="主启动-4" tabindex="-1"><a class="header-anchor" href="#主启动-4"><span>主启动</span></a></h3><h3 id="_9527网关如何做路由配置" tabindex="-1"><a class="header-anchor" href="#_9527网关如何做路由配置"><span>9527网关如何做路由配置</span></a></h3><h4 id="cloud-provider-payment8001看看controller的访问地址" tabindex="-1"><a class="header-anchor" href="#cloud-provider-payment8001看看controller的访问地址"><span>cloud-provider-payment8001看看controller的访问地址</span></a></h4><ul><li><p>get</p></li><li><p>lb</p></li></ul><h4 id="我们目前不想暴露8001端口-希望在8001外面套一层9527" tabindex="-1"><a class="header-anchor" href="#我们目前不想暴露8001端口-希望在8001外面套一层9527"><span>我们目前不想暴露8001端口，希望在8001外面套一层9527</span></a></h4><h5 id="yml-1" tabindex="-1"><a class="header-anchor" href="#yml-1"><span>YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 9527spring:  application:   name: cloud-gateway  cloud:   gateway:    discovery:     locator:      enabled: true # 开启从注册中心动态创建路由的功能，利用微服务名称j进行路由    routes:     - id: payment_route # 路由的id,没有规定规则但要求唯一,建议配合服务名      #匹配后提供服务的路由地址      uri: http://localhost:8001      predicates:       - Path=/payment/get/** # 断言，路径相匹配的进行路由       #- After=2017-01-20T17:42:47.789-07:00[America/Denver]       #- Before=2017-01-20T17:42:47.789-07:00[America/Denver]       #- Cookie=username,zzyy       #- Header=X-Request-Id, \\d+ #请求头要有X-Request-Id属性，并且值为正数       #- Host=**.atguigu.com       #- Method=GET       #- Query=username, \\d+ # 要有参数名username并且值还要是正整数才能路由      # 过滤      #filters:      #  - AddRequestHeader=X-Request-red, blue     - id: payment_route2      uri: http://localhost:8001      predicates:       Path=/payment/lb/** #断言,路径相匹配的进行路由eureka:  instance:   hostname: cloud-gateway-service  client:   fetch-registry: true   register-with-eureka: true   service-url:    defaultZone: http://eureka7001.com:7001/eureka/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="测试-7" tabindex="-1"><a class="header-anchor" href="#测试-7"><span>测试</span></a></h3><h4 id="启动7001" tabindex="-1"><a class="header-anchor" href="#启动7001"><span>启动7001</span></a></h4><h4 id="启动8001" tabindex="-1"><a class="header-anchor" href="#启动8001"><span>启动8001</span></a></h4><h4 id="启动9527网关" tabindex="-1"><a class="header-anchor" href="#启动9527网关"><span>启动9527网关</span></a></h4><p>网关层不需要web和actuact依赖</p><h4 id="访问说明" tabindex="-1"><a class="header-anchor" href="#访问说明"><span>访问说明</span></a></h4><p><img src="`+B+`" alt="1610029851571_image.png"></p><h4 id="添加网关前" tabindex="-1"><a class="header-anchor" href="#添加网关前"><span>添加网关前</span></a></h4><p>· http://localhost:8001/payment/get/1</p><h4 id="添加网关后" tabindex="-1"><a class="header-anchor" href="#添加网关后"><span>添加网关后</span></a></h4><p>· http://localhost:8001/payment/get/1</p><p>· http://localhost:9527/payment/get/1</p><h3 id="yml配置说明" tabindex="-1"><a class="header-anchor" href="#yml配置说明"><span>YML配置说明</span></a></h3><h4 id="gateway网关路由有两种配置方式" tabindex="-1"><a class="header-anchor" href="#gateway网关路由有两种配置方式"><span>Gateway网关路由有两种配置方式:</span></a></h4><h5 id="在配置文件yml中配置" tabindex="-1"><a class="header-anchor" href="#在配置文件yml中配置"><span>在配置文件yml中配置</span></a></h5><p>· 见前面步骤</p><h5 id="代码中注-入routelocator的bean" tabindex="-1"><a class="header-anchor" href="#代码中注-入routelocator的bean"><span>代码中注，入Routelocator的Bean</span></a></h5><h2 id="通过微服务名实现动态路由" tabindex="-1"><a class="header-anchor" href="#通过微服务名实现动态路由"><span>通过微服务名实现动态路由</span></a></h2><h4 id="默认情况下gateway会根据注册中心注册的服务列表-以注册中心上微服务名为路径创建动态路由进行转发-从而实现动态路由的功能" tabindex="-1"><a class="header-anchor" href="#默认情况下gateway会根据注册中心注册的服务列表-以注册中心上微服务名为路径创建动态路由进行转发-从而实现动态路由的功能"><span>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</span></a></h4><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h4><h5 id="_7001" tabindex="-1"><a class="header-anchor" href="#_7001"><span>7001</span></a></h5><h5 id="_8001-8002" tabindex="-1"><a class="header-anchor" href="#_8001-8002"><span>8001/8002</span></a></h5><h5 id="_9527" tabindex="-1"><a class="header-anchor" href="#_9527"><span>9527</span></a></h5><h6 id="修改yml从注册中心获取路由地址" tabindex="-1"><a class="header-anchor" href="#修改yml从注册中心获取路由地址"><span>修改YML从注册中心获取路由地址</span></a></h6><div class="language-yml line-numbers-mode" data-ext="yml" data-title="yml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">server</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 9527</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spring</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cloud-gateway</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        gateway</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    discovery</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">     locator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      enabled</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 开启从注册中心动态创建路由的功能，利用微服务名称进行路由    routes:     - id: payment_route # 路由的id,没有规定规则但要求唯一,建议配合服务名      #匹配后提供服务的路由地址      # uri: http://localhost:8001  # 匹配后提供服务的路由地址      uri: lb://cloud-payment-service  # 匹配后提供服务的路由地址，lb代表从注册中心获取服务      predicates:       - Path=/payment/get/** # 断言，路径相匹配的进行路由           - id: payment_route2      # uri: http://localhost:8001  # 匹配后提供服务的路由地址      uri: lb://cloud-payment-service  # 匹配后提供服务的路由地址，lb代表从注册中心获取服务      predicates:       Path=/payment/lb/** #断言,路径相匹配的进行路由eureka:  instance:   hostname: cloud-gateway-service  client:   fetch-registry: true   register-with-eureka: true   service-url:    defaultZone: http://eureka7001.com:7001/eureka/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-8" tabindex="-1"><a class="header-anchor" href="#测试-8"><span>测试</span></a></h4><p>o http://localhost:9527/payment/lb</p><h6 id="动态且负载均衡的访问服务" tabindex="-1"><a class="header-anchor" href="#动态且负载均衡的访问服务"><span>动态且负载均衡的访问服务</span></a></h6><h2 id="predicate的使用" tabindex="-1"><a class="header-anchor" href="#predicate的使用"><span>Predicate的使用</span></a></h2><ol><li>After Route Predicate</li><li>Before Route Predicate</li><li>Between Route Predicate</li><li>Cookie Route Predicate</li><li>Header Route Predicate</li><li>Host Route Predicate</li><li>Method Route Predicate</li><li>Method Route Predicate</li><li>Query Route Predicate</li><li>总结: 说白了，Predicate就是为了实现一-组匹配规则，让请求过来找到对应的Route进行处理。</li></ol><h2 id="filter的使用" tabindex="-1"><a class="header-anchor" href="#filter的使用"><span>Filter的使用</span></a></h2><h3 id="是什么-4" tabindex="-1"><a class="header-anchor" href="#是什么-4"><span>是什么</span></a></h3><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway内置了多种路由过滤器，他们都由Gatewayfilter的工厂类来产生</p><h3 id="gateway的filter" tabindex="-1"><a class="header-anchor" href="#gateway的filter"><span>gateway的Filter</span></a></h3><h4 id="生命周期-only-two" tabindex="-1"><a class="header-anchor" href="#生命周期-only-two"><span>生命周期，Only Two</span></a></h4><ul><li><p>pre</p></li><li><p>post</p></li></ul><h4 id="种类-only-two" tabindex="-1"><a class="header-anchor" href="#种类-only-two"><span>种类，Only Two</span></a></h4><ul><li><p>Gatewayfilter</p></li><li><p>GlobalFilter</p></li></ul><h3 id="常用的gatewayfilter" tabindex="-1"><a class="header-anchor" href="#常用的gatewayfilter"><span>常用的gatewayFilter</span></a></h3><h4 id="addrequestparameter" tabindex="-1"><a class="header-anchor" href="#addrequestparameter"><span>AddRequestParameter</span></a></h4><h4 id="yml-2" tabindex="-1"><a class="header-anchor" href="#yml-2"><span>YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>spring:  cloud:   gateway:    routes:      filters:       - AddRequestHeader=X-Request-red, blue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="省略" tabindex="-1"><a class="header-anchor" href="#省略"><span>省略</span></a></h4><h3 id="自定义过滤器" tabindex="-1"><a class="header-anchor" href="#自定义过滤器"><span>自定义过滤器</span></a></h3><h4 id="自定义全局globalfilter" tabindex="-1"><a class="header-anchor" href="#自定义全局globalfilter"><span>自定义全局GlobalFilter</span></a></h4><h5 id="两个主要接口介绍" tabindex="-1"><a class="header-anchor" href="#两个主要接口介绍"><span>两个主要接口介绍</span></a></h5><h6 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h6><p>o implements GlobalFilter, Ordered</p><h5 id="能干嘛" tabindex="-1"><a class="header-anchor" href="#能干嘛"><span>能干嘛</span></a></h5><ul><li><p>全局日志记录</p></li><li><p>统一网关鉴权</p></li><li><p>......</p></li></ul><h5 id="filter-1" tabindex="-1"><a class="header-anchor" href="#filter-1"><span>filter</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Slf4j@Componentpublic class MyLogGatewayFilter implements GlobalFilter, Ordered {   @Override   public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {     log.info(&quot;come in global filter: {}&quot;, new Date());     ServerHttpRequest request = exchange.getRequest();     String uname = request.getQueryParams().getFirst(&quot;uname&quot;);     if (uname == null) {       log.info(&quot;用户名为null，非法用户&quot;);       exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);       return exchange.getResponse().setComplete();     }     // 放行     return chain.filter(exchange);   }   @Override   public int getOrder() {     return 0;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="测试-9" tabindex="-1"><a class="header-anchor" href="#测试-9"><span>测试</span></a></h5><h1 id="_5-服务配置-config" tabindex="-1"><a class="header-anchor" href="#_5-服务配置-config"><span>5. 服务配置(Config)</span></a></h1><h2 id="概述-5" tabindex="-1"><a class="header-anchor" href="#概述-5"><span>概述</span></a></h2><h3 id="分布式系统面临的问题-1" tabindex="-1"><a class="header-anchor" href="#分布式系统面临的问题-1"><span>分布式系统面临的问题</span></a></h3><p>微服务意味着要将单体应用中的业务拆分成一个个子服务。 每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、 动态的配置管理设施是必不可少的。SpringCloud提供了ConfigServer来解决这个问题，我们每-个微服务自己带着-个applicationyml, 上百个配置文件的管理../(ToT)/~~</p><h3 id="是什么-5" tabindex="-1"><a class="header-anchor" href="#是什么-5"><span>是什么</span></a></h3><p>o SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一 个中心化的外部配置。</p><p><img src="`+M+'" alt="1610120419217_image.png"></p><h3 id="能干什么-4" tabindex="-1"><a class="header-anchor" href="#能干什么-4"><span>能干什么</span></a></h3><ul><li><p>集中管理配置文件</p></li><li><p>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</p></li><li><p>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</p></li><li><p>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</p></li><li><p>将配置信息以REST接口的形式暴露</p><p>posy/curl</p></li></ul><h2 id="config服务端配置与测试" tabindex="-1"><a class="header-anchor" href="#config服务端配置与测试"><span>Config服务端配置与测试</span></a></h2><h3 id="新建项目cloud-config-certer-3344它即为cloud的配置cloudconfig-center" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-config-certer-3344它即为cloud的配置cloudconfig-center"><span>新建项目cloud-config-certer-3344它即为Cloud的配置cloudConfig Center</span></a></h3><h3 id="改pom-2" tabindex="-1"><a class="header-anchor" href="#改pom-2"><span>改POM</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="写yml-5" tabindex="-1"><a class="header-anchor" href="#写yml-5"><span>写YML</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 3344spring:  application:   name: cloud-config-center  profiles:   active: native #设置为本地启动的方式，而不是通过git(默认git)  cloud:   config:    server:     native:  # 可以指定本地目录      search-locations: classpath:/config#     git: # 也可以指定远程仓库#      uri: git@github.com:leelovejava/springcloud-config.git#      search-paths:#       - spring-config#    label: master  rabbitmq:   host: localhost   port: 5672   username: guest   password: guesteureka:  client:   service-url:    defaultZone: http://eureka7001.com:7001/eureka# 暴露bus刷新配置的端点management:  endpoints:   web:    exposure:     include: &quot;bus-refresh&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="主启动-enableconfigserver" tabindex="-1"><a class="header-anchor" href="#主启动-enableconfigserver"><span>主启动@EnableConfigServer</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@SpringBootApplication@EnableConfigServerpublic class ConfigCenterMain3344 {   public static void main(String[] args) {     SpringApplication.run(ConfigCenterMain3344.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>o <img src="'+w+'" alt="1610156226844_image.png"></p><h3 id="测试-10" tabindex="-1"><a class="header-anchor" href="#测试-10"><span>测试</span></a></h3><h4 id="启动7001-1" tabindex="-1"><a class="header-anchor" href="#启动7001-1"><span>启动7001</span></a></h4><h4 id="启动3344" tabindex="-1"><a class="header-anchor" href="#启动3344"><span>启动3344</span></a></h4><p>http://localhost:3344/config/config-dev.yml</p><h3 id="配置的读取规则" tabindex="-1"><a class="header-anchor" href="#配置的读取规则"><span>配置的读取规则</span></a></h3><h4 id="label-application-profile-yml" tabindex="-1"><a class="header-anchor" href="#label-application-profile-yml"><span>/{label)/(application)-(profile).yml</span></a></h4><p>如：http://localhost:3344/master/config-dev.yml（git的master分支中config-dev.yml)</p><h4 id="application-profile-yml" tabindex="-1"><a class="header-anchor" href="#application-profile-yml"><span>/{application}-{profile}.yml</span></a></h4><p>如：http://localhost:3344/config-dev.yml（git上默认使用master分支）</p><h4 id="pictio-o0il1el-label-l" tabindex="-1"><a class="header-anchor" href="#pictio-o0il1el-label-l"><span>/pictio:[o0il1el([label]l</span></a></h4><p>如：http://localhost:3344/config/dev/master（返回JSON）</p><h2 id="config客户端配置与测试" tabindex="-1"><a class="header-anchor" href="#config客户端配置与测试"><span>Config客户端配置与测试</span></a></h2><h3 id="新建项目cloud-config-client-3355" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-config-client-3355"><span>新建项目cloud-config-client-3355</span></a></h3><h3 id="改pom-3" tabindex="-1"><a class="header-anchor" href="#改pom-3"><span>改POM</span></a></h3><p><code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><h3 id="写配置文件" tabindex="-1"><a class="header-anchor" href="#写配置文件"><span>写配置文件</span></a></h3><p>applicaiton.yml是用户级的资源配置项bootstrap.yml是系统级的，优先级更加高Spring Cloud会创建-个&quot;Bootstrap Context&quot;，作为Spring应用的ppliation Context的父上下文。初始化的时候，Bootstrap Context负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment.Bootp,属性有高优先级，默认情况下，它们不会被本地配置覆盖。.. Boostp cotext和ppliction Contexi有着不同的约定，所以新增了一个bootstrap.ym&#39;文件，保证Bootstrap Context和Application Context&#39;配置的分离。要将Client模块下的applicationymI文件改为bootstrap:yml,这是很关键的，因为botstrap.ym是比pplication.yml先加载的。bootstrapyml优先级高于plicationyml</p><p>o bootstrap.yml <code>server: port: 3355spring: application: name: config-client cloud: config: label: config # 分支名称 name: config #配置文件名称 profile: dev # 读取的后缀，上述三个综合，为master分支上的config-dev.yml的配置文件被读取，http://config-3344.com:3344/master/config-dev.yml uri: http://localhost:3344 #配置中心的地址 rabbitmq: #rabbitmq相关配置，15672是web管理端口，5672是mq访问端口 port: 5672 host: localhost username: guest password: guesteureka: client: service-url: defaultZone: http://eureka7001.com:7001/eureka</code></p><h3 id="主启动-5" tabindex="-1"><a class="header-anchor" href="#主启动-5"><span>主启动</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@SpringBootApplication@EnableConfigServerpublic class ConfigCenterMain3344 {   public static void main(String[] args) {     SpringApplication.run(ConfigCenterMain3344.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="写业务-3" tabindex="-1"><a class="header-anchor" href="#写业务-3"><span>写业务</span></a></h3><p>o controller以Rest的风格访问配置文件</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@RestController@RefreshScopepublic class ConfigClientController {   @Value(&quot;${config.info}&quot;)   private String configInfo;   @GetMapping(&quot;/configInfo&quot;)   public String getConfigInfo(){     return configInfo;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="测试-11" tabindex="-1"><a class="header-anchor" href="#测试-11"><span>测试</span></a></h3><h4 id="启动3344并自测" tabindex="-1"><a class="header-anchor" href="#启动3344并自测"><span>启动3344并自测</span></a></h4><p>http://localhost:3344/config/config-dev.yml</p><h4 id="启动3355" tabindex="-1"><a class="header-anchor" href="#启动3355"><span>启动3355</span></a></h4><p>http://localhost:3355/configInfo</p><h3 id="成功实现了客户端3355访问springcloud-config3344通过github获取配置信息" tabindex="-1"><a class="header-anchor" href="#成功实现了客户端3355访问springcloud-config3344通过github获取配置信息"><span>成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</span></a></h3><h3 id="_3344能动态刷新-但3355不能" tabindex="-1"><a class="header-anchor" href="#_3344能动态刷新-但3355不能"><span>3344能动态刷新，但3355不能</span></a></h3><h2 id="config客户端之动态刷新" tabindex="-1"><a class="header-anchor" href="#config客户端之动态刷新"><span>Config客户端之动态刷新</span></a></h2><h3 id="成功实现了客户端3355访问springcloud-config3344通过github获取配置信息-1" tabindex="-1"><a class="header-anchor" href="#成功实现了客户端3355访问springcloud-config3344通过github获取配置信息-1"><span>成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</span></a></h3><h3 id="动态刷新" tabindex="-1"><a class="header-anchor" href="#动态刷新"><span>动态刷新</span></a></h3><h4 id="修改3355模块" tabindex="-1"><a class="header-anchor" href="#修改3355模块"><span>修改3355模块</span></a></h4><h4 id="pom引入actuator监控" tabindex="-1"><a class="header-anchor" href="#pom引入actuator监控"><span>POM引入actuator监控</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="修改yml-暴露监控端口" tabindex="-1"><a class="header-anchor" href="#修改yml-暴露监控端口"><span>修改YML，暴露监控端口</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>management:  endpoints:   web:    exposure:     include: &quot;*&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="refreshscope业务类controller修改" tabindex="-1"><a class="header-anchor" href="#refreshscope业务类controller修改"><span>@RefreshScope业务类Controller修改</span></a></h4><h4 id="此时修改配置文件-3344-3355此时仍然3355仍然不能动态刷新" tabindex="-1"><a class="header-anchor" href="#此时修改配置文件-3344-3355此时仍然3355仍然不能动态刷新"><span>此时修改配置文件---&gt; 3344 ---3355此时仍然3355仍然不能动态刷新</span></a></h4><h4 id="需要运维-人员发送post请求刷新3355" tabindex="-1"><a class="header-anchor" href="#需要运维-人员发送post请求刷新3355"><span>需要运维，人员发送Post请求刷新3355</span></a></h4><p>curl方式POST：curl -X PSOT &quot;http://localhost:3355/actuator/refresh&quot;</p><h4 id="还有什么问题" tabindex="-1"><a class="header-anchor" href="#还有什么问题"><span>还有什么问题</span></a></h4><p>假如有多个微服务客户端33553366/3377。。。每个微服务都要执行一次post请求，手动刷新?可否广播，一次通知，处处生效?我们想大范围的自动刷新，求方法</p><h1 id="_6-服务总线" tabindex="-1"><a class="header-anchor" href="#_6-服务总线"><span>6. 服务总线</span></a></h1><h2 id="概述-6" tabindex="-1"><a class="header-anchor" href="#概述-6"><span>概述</span></a></h2><h3 id="原由" tabindex="-1"><a class="header-anchor" href="#原由"><span>原由</span></a></h3><p>· Spring. Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新。</p><h3 id="是什么-6" tabindex="-1"><a class="header-anchor" href="#是什么-6"><span>是什么</span></a></h3><p>· Bus支持两种消息代理: RabbitMQ 和Kafka Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。Spring Clud Bus目前支持RbbitMQ和Kafka。</p><p>o <img src="'+_+'" alt="图一.png"></p><h3 id="能干嘛-1" tabindex="-1"><a class="header-anchor" href="#能干嘛-1"><span>能干嘛</span></a></h3><p>· Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道</p><p>o <img src="'+F+'" alt="图二.png"></p><h3 id="为何被称之为总线" tabindex="-1"><a class="header-anchor" href="#为何被称之为总线"><span>为何被称之为总线</span></a></h3><p>什么是总线在微服务架构的系统中，通常会使用轻量级的消息代理来构建-个共用的消息主题， 并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。在总线上的各个实例，都可以方便地广播-些需要让其他连接在该主题上的实例都知道的消息。基本原理Cofiglin实例都监听MQ中同一个topic默认是springCloudBus).当-个服务刷新数据的时候， 它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h2 id="rabbitmq环境配置" tabindex="-1"><a class="header-anchor" href="#rabbitmq环境配置"><span>RabbitMQ环境配置</span></a></h2><p>略</p><h2 id="springcloud-bus动态刷新全局广播" tabindex="-1"><a class="header-anchor" href="#springcloud-bus动态刷新全局广播"><span>SpringCloud Bus动态刷新全局广播</span></a></h2><h3 id="演示广播效果-增加复杂度-再以3355为模板再制作一-个3366" tabindex="-1"><a class="header-anchor" href="#演示广播效果-增加复杂度-再以3355为模板再制作一-个3366"><span>演示广播效果，增加复杂度，再以3355为模板再制作一-个3366</span></a></h3><h4 id="新建项目cloud-config-client-3366" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-config-client-3366"><span>新建项目cloud-config-client-3366</span></a></h4><h4 id="改pom-4" tabindex="-1"><a class="header-anchor" href="#改pom-4"><span>改POM</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写yml-6" tabindex="-1"><a class="header-anchor" href="#写yml-6"><span>写YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 3366spring:  application:   name: config-client  cloud:   config:    label: config # 分支名称    name: config #配置文件名称    profile: dev # 读取的后缀，上述三个综合，为master分支上的config-dev.yml的配置文件被读取，http://config-3344.com:3344/master/config-dev.yml    uri: http://localhost:3344 #配置中心的地址eureka:  client:   service-url:    defaultZone: http://eureka7001.com:7001/eurekamanagement:  endpoints:   web:    exposure:     include: &quot;*&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="主启动-6" tabindex="-1"><a class="header-anchor" href="#主启动-6"><span>主启动</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span> @SpringBootApplication@EnableEurekaClientpublic class ConfigClientMain3366 {   public static void main(String[] args) {     SpringApplication.run(ConfigClientMain3366.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写业务-4" tabindex="-1"><a class="header-anchor" href="#写业务-4"><span>写业务</span></a></h4><h5 id="controller-4" tabindex="-1"><a class="header-anchor" href="#controller-4"><span>controller</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RestController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RefreshScopepublic</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ConfigClientController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">${server.port}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String serverPort;   @Value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">${config.info}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   private String configInfo;   @GetMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/configInfo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   public String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getConfigInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">     return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">server.port = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> serverPort </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> configInfo=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> configInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="设计思想" tabindex="-1"><a class="header-anchor" href="#设计思想"><span>设计思想</span></a></h3><h4 id="_1-利用消息总线触发-一个客户端-bus-refresh-而刷新所有客户端的配置" tabindex="-1"><a class="header-anchor" href="#_1-利用消息总线触发-一个客户端-bus-refresh-而刷新所有客户端的配置"><span>1)利用消息总线触发-一个客户端/bus/refresh，而刷新所有客户端的配置</span></a></h4><h4 id="_2-利用消息总线触发一个服务端configserver的-bus-refresh端-点-而刷新所有客户端的配置" tabindex="-1"><a class="header-anchor" href="#_2-利用消息总线触发一个服务端configserver的-bus-refresh端-点-而刷新所有客户端的配置"><span>2)利用消息总线触发一个服务端ConfigServer的/bus/refresh端 点，而刷新所有客户端的配置</span></a></h4><h4 id="图二的架构显然更加适合-图一不适合的原因如下" tabindex="-1"><a class="header-anchor" href="#图二的架构显然更加适合-图一不适合的原因如下"><span>图二的架构显然更加适合，图一不适合的原因如下</span></a></h4><ul><li><p>打破了微服务的职表单一性，因为微服务本省是业务模块，它本不应该承担配置刷新的职麦</p></li><li><p>破坏了微服务各个节点的对等性</p></li><li><p>有一定的局限性，例如，在微服务迁移时，它的网络地址常常会发生变化，如果此时时想自动属性，会增加更多的工作</p></li></ul><h3 id="给cloud-cnfig-center-334配置中心服务端添加消息总线支持" tabindex="-1"><a class="header-anchor" href="#给cloud-cnfig-center-334配置中心服务端添加消息总线支持"><span>给cloud- cnfig-center-334配置中心服务端添加消息总线支持</span></a></h3><h4 id="pom-1" tabindex="-1"><a class="header-anchor" href="#pom-1"><span>POM</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;!--添加消息总线RabbitMQ支持--&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;       &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;     &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="yml-3" tabindex="-1"><a class="header-anchor" href="#yml-3"><span>YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>rabbitmq: #rabbitmq相关配置，15672是web管理端口，5672是mq访问端口   port: 5672   host: localhost   username: guest   password: guest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="给cloud-config-client-355客户端添加消息总线支持" tabindex="-1"><a class="header-anchor" href="#给cloud-config-client-355客户端添加消息总线支持"><span>给cloud-config-client-355客户端添加消息总线支持</span></a></h3><h4 id="pom-2" tabindex="-1"><a class="header-anchor" href="#pom-2"><span>POM</span></a></h4><p><code>&lt;!--添加消息总线RabbitMQ支持--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;</code></p><h4 id="yml-4" tabindex="-1"><a class="header-anchor" href="#yml-4"><span>YML</span></a></h4><p>rabbitmq: #rabbitmq相关配置，15672是web管理端口，5672是mq访问端口 port: 5672 host: localhost username: guest password: guest</p><h3 id="给cloud-config-client-3366客户端添加消息总线支持" tabindex="-1"><a class="header-anchor" href="#给cloud-config-client-3366客户端添加消息总线支持"><span>给cloud -config-client-3366客户端添加消息总线支持</span></a></h3><h4 id="pom-3" tabindex="-1"><a class="header-anchor" href="#pom-3"><span>POM</span></a></h4><p><code>&lt;!--添加消息总线RabbitMQ支持--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;</code></p><h4 id="yml-5" tabindex="-1"><a class="header-anchor" href="#yml-5"><span>YML</span></a></h4><p>rabbitmq: #rabbitmq相关配置，15672是web管理端口，5672是mq访问端口 port: 5672 host: localhost username: guest password: guest</p><h3 id="测试此时一次修改-广播通知-处处生效" tabindex="-1"><a class="header-anchor" href="#测试此时一次修改-广播通知-处处生效"><span>测试此时一次修改，广播通知，处处生效</span></a></h3><p>· curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</p><h2 id="springcloud-bus动态刷新定点广播" tabindex="-1"><a class="header-anchor" href="#springcloud-bus动态刷新定点广播"><span>SpringCloud Bus动态刷新定点广播</span></a></h2><h3 id="不想全部通知-只想定点通知" tabindex="-1"><a class="header-anchor" href="#不想全部通知-只想定点通知"><span>不想全部通知，只想定点通知</span></a></h3><p>· 如：只通知3355，不通知3366</p><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h3>',738),a("ul",null,[a("li",null,[a("p",null,"指定具体某一个实例生效而不是全部")]),a("li",{destination:""},[a("p",null,"公式: http://[配置中心地址和端口]/actuator/bus-refresh/")]),a("li",null,[a("p",null,"/bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例")])],-1),t('<h3 id="测试-12" tabindex="-1"><a class="header-anchor" href="#测试-12"><span>测试</span></a></h3><p>· 只通知3355，不通知3366</p><p>· curl -X POST &quot;http:/localhost:3344/actuator/bus-refresh/config-client:3355&quot;</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>· <img src="'+R+'" alt="1610173526368_image.png"></p><h1 id="_7-消息驱动-springcloud-stream" tabindex="-1"><a class="header-anchor" href="#_7-消息驱动-springcloud-stream"><span>7. 消息驱动(SpringCloud Stream)</span></a></h1><h2 id="消息驱动概述" tabindex="-1"><a class="header-anchor" href="#消息驱动概述"><span>消息驱动概述</span></a></h2><h3 id="是什么-7" tabindex="-1"><a class="header-anchor" href="#是什么-7"><span>是什么</span></a></h3><p>o 息中间件的差异,降低切换成本，统一消息的编程模型 什么是SpringCloudtream方定义Spring Cloud Strem是-个构建消息驱动微服务的框架。应用程序通过inputs或者outputs来屿Spring Cloud Stream中binder对象交互。通过我们配置来inding(绑定)，而Spring Cloud Strom的binder对象负责与消息中间件交互。所以，我们只需要搞清楚如何与Spring Cloud srem交互就可以方便使用消息驱动的方式。通过使用Spring ltgatio来连接消息代理中间件以实现消息事件驱动。Spring Cloud Stream为-些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。目前仅支持RbitMQ. Kafka.</p><p>o 官网: https://spring.io/projects/spring-cloud-stream</p><h3 id="设计思想-1" tabindex="-1"><a class="header-anchor" href="#设计思想-1"><span>设计思想</span></a></h3><h4 id="标准mq" tabindex="-1"><a class="header-anchor" href="#标准mq"><span>标准MQ</span></a></h4><p><img src="'+T+'" alt="1610187888181_image.png"></p><p>生产者/消费者之间靠消息媒介传递信息内容</p><p>· Message</p><p>消息必须走特定的通道</p><p>· 消息通道MessageChannel</p><p>消息通道里的消息如何被消费呢，谁负责收发处理</p><p>· 消息通道MessageChannel的子接口SubscribableChannel,由MessageHandler消息处理器所订阅</p><h3 id="为什么用cloud-stream" tabindex="-1"><a class="header-anchor" href="#为什么用cloud-stream"><span>为什么用Cloud Stream</span></a></h3><p>比方说我们用到了RabitMQ和Kafka,由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange, kafka有Topic和Paritions分区，这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰， 我们如果用了两个消息队列的其中一种， 后面的业务需求，我想往另外-种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了一种解耦合的方式。</p><h5 id="stream凭什么可以统一底层差异" tabindex="-1"><a class="header-anchor" href="#stream凭什么可以统一底层差异"><span>stream凭什么可以统一底层差异?</span></a></h5><p>在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性通过定义绑定器作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。通过向应用程序暴露统一的hanne通道， 使得应用程序不需要再考虑备种不同的消息中间件实现。通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</p><p>· 通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</p><p><img src="'+P+'" alt="1610188367352_image.png"></p><h5 id="binder" tabindex="-1"><a class="header-anchor" href="#binder"><span>Binder</span></a></h5><p>· INPUT对应于消费者</p><p>· OUTPUT对应于生产者</p><h3 id="stream中的消息通信方式遵循了发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#stream中的消息通信方式遵循了发布-订阅模式"><span>Stream中的消息通信方式遵循了发布-订阅模式</span></a></h3><h4 id="topic主题进行广播" tabindex="-1"><a class="header-anchor" href="#topic主题进行广播"><span>Topic主题进行广播</span></a></h4><p>· 在RabbitMQ就是Exchange</p><p>· 在Kakfa中就是Topic</p><h3 id="spring-cloud-stream标准流程套路" tabindex="-1"><a class="header-anchor" href="#spring-cloud-stream标准流程套路"><span>Spring Cloud Stream标准流程套路</span></a></h3><h3 id="binder-1" tabindex="-1"><a class="header-anchor" href="#binder-1"><span>Binder</span></a></h3><p>很方便的连接中间件，屏蔽差异</p><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>Channel</span></a></h3><p>通道，是队列Queue的- -种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</p><h3 id="source和sink" tabindex="-1"><a class="header-anchor" href="#source和sink"><span>Source和Sink</span></a></h3><p>简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</p><p>o <img src="'+O+'" alt="1610188595275_image.png"></p><h3 id="编码api和常用注解" tabindex="-1"><a class="header-anchor" href="#编码api和常用注解"><span>编码API和常用注解</span></a></h3><p>o <img src="'+L+'" alt="1610188780486_image.png"></p><h2 id="案例说明" tabindex="-1"><a class="header-anchor" href="#案例说明"><span>案例说明</span></a></h2><h3 id="rabbitmq环境已经ok" tabindex="-1"><a class="header-anchor" href="#rabbitmq环境已经ok"><span>RabbitMQ环境已经OK</span></a></h3><h3 id="工程中新建三个子模块" tabindex="-1"><a class="header-anchor" href="#工程中新建三个子模块"><span>工程中新建三个子模块</span></a></h3><p>o cloud-stream- rabbitmq-provider8801，作为生产者进行发消息模块</p><p>o cloud-stream-rabbitmq-consumer8802，作为消息接收模块</p><p>o cloud-stream- rabbitmq-consumer8803作为消息接收模块</p><h2 id="消息驱动之生产者" tabindex="-1"><a class="header-anchor" href="#消息驱动之生产者"><span>消息驱动之生产者</span></a></h2><h4 id="新建项目cloud-stream-rabbitmq-provider8801" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-stream-rabbitmq-provider8801"><span>新建项目cloud-stream-rabbitmq-provider8801</span></a></h4><h4 id="改pom-5" tabindex="-1"><a class="header-anchor" href="#改pom-5"><span>改POM</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写yml-7" tabindex="-1"><a class="header-anchor" href="#写yml-7"><span>写YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 8801spring:  application:   name: cloud-stream-provider  rabbitmq:   host: localhost   port: 5672   sername: guest   password: guest  cloud:   stream:    binders: # 在此处配置要绑定的rabbitMQ的服务信息     defaultRabbit: # 表示定义的名称，用于binding的整合      type: rabbit # 消息中间件类型    bindings: # 服务的整合处理     output: # 这个名字是一个通道的名称      destination: studyExchange # 表示要使用的exchange名称定义      content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain    binder: defaultRabbit # 设置要绑定的消息服务的具体设置eureka:  client:   service-url:    defaultZone: http://eureka7001.com:7001/eureka  instance:   lease-renewal-interval-in-seconds: 2 # 设置心跳的间隔时间，默认30   lease-expiration-duration-in-seconds: 5 # 超过5秒间隔，默认90   instance-id: send-8801.com # 主机名   prefer-ip-address: true # 显示ip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 主启动 <code>@SpringBootApplicationpublic class StreamMQMain8801 { public static void main(String[] args) { SpringApplication.run(StreamMQMain8801.class, args); }}</code></p><h4 id="写业务-5" tabindex="-1"><a class="header-anchor" href="#写业务-5"><span>写业务</span></a></h4><h5 id="controller-5" tabindex="-1"><a class="header-anchor" href="#controller-5"><span>controller</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@EnableBinding(Source.class)   //定义为消息的推送管道public class IMessageProviderImpl implements IMessageProvider {   @Override   public String send() {     return null;   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="service-2" tabindex="-1"><a class="header-anchor" href="#service-2"><span>service</span></a></h5><p><code>public interface IMessageProvider { /** * 消息发送 */ String send();} </code></p><p><code>impl @EnableBinding(Source.class) //定义为消息的推送管道public class IMessageProviderImpl implements IMessageProvider { @Override public String send() { return null; }} </code></p><h4 id="测试-13" tabindex="-1"><a class="header-anchor" href="#测试-13"><span>测试</span></a></h4><h5 id="启动7001-2" tabindex="-1"><a class="header-anchor" href="#启动7001-2"><span>启动7001</span></a></h5><h5 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>rabbitMQ</span></a></h5><h5 id="启动8801" tabindex="-1"><a class="header-anchor" href="#启动8801"><span>启动8801</span></a></h5><h5 id="访问-1" tabindex="-1"><a class="header-anchor" href="#访问-1"><span>访问</span></a></h5><p>http://localhost:8801/sendMessage</p><h2 id="消息驱动之消费者" tabindex="-1"><a class="header-anchor" href="#消息驱动之消费者"><span>消息驱动之消费者</span></a></h2><h4 id="新建项目cloud-stream-rabbitmq-provider8802" tabindex="-1"><a class="header-anchor" href="#新建项目cloud-stream-rabbitmq-provider8802"><span>新建项目cloud-stream-rabbitmq-provider8802</span></a></h4><h4 id="改pom-6" tabindex="-1"><a class="header-anchor" href="#改pom-6"><span>改POM</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-web</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-actuator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-netflix-eureka-client</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.cloud</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-cloud-starter-stream-rabbit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.projectlombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">lombok</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">optional</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">scope</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependencies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写yml-8" tabindex="-1"><a class="header-anchor" href="#写yml-8"><span>写YML</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>server:  port: 8802spring:  application:   name: cloud-stream-consumer  rabbitmq:  # 设置rabbitMQ的相关环境配置   host: localhost   port: 5672   username: guest   password: guest  cloud:   stream:    binders: # 在此处配置要绑定的rabbitMQ的服务信息     defaultRabbit: # 表示定义的名称，用于binding的整合      type: rabbit # 消息中间件类型    bindings: # 服务的整合处理     input: # 这个名字是一个通道的名称      destination: studyExchange # 表示要使用的exchange名称定义      content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain      binder: defaultRabbit # 设置要绑定的消息服务的具体设置eureka:  client:   service-url:    defaultZone: http://eureka7001.com:7001/eureka  instance:   lease-renewal-interval-in-seconds: 2 # 设置心跳的间隔时间，默认30   lease-expiration-duration-in-seconds: 5 # 超过5秒间隔，默认90   instance-id: receive-8802.com #主机名   prefer-ip-address: true # 显示ip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="主启动-7" tabindex="-1"><a class="header-anchor" href="#主启动-7"><span>主启动</span></a></h4><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@SpringBootApplicationpublic class StreamMQMain8802 {   public static void main(String[] args) {     SpringApplication.run(StreamMQMain8802.class, args);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="写业务-6" tabindex="-1"><a class="header-anchor" href="#写业务-6"><span>写业务</span></a></h4><h5 id="controller-6" tabindex="-1"><a class="header-anchor" href="#controller-6"><span>controller</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Component@EnableBinding(Sink.class)public class ReceiveMessageListenerController {   @Value(&quot;${server.port}&quot;)   private String serverPort;   @StreamListener(Sink.INPUT)   public void input(Message&lt;String&gt; message){     System.out.println(&quot;消费者1号，-----&gt;接收到的消息：&quot;+ message.getPayload() +&quot;\\t port:&quot; + serverPort);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="测试8801发送-8802接收消息" tabindex="-1"><a class="header-anchor" href="#测试8801发送-8802接收消息"><span>测试8801发送，8802接收消息</span></a></h4><h5 id="_8801访问" tabindex="-1"><a class="header-anchor" href="#_8801访问"><span>8801访问</span></a></h5><p>http://localhost:8801/sendMessage</p><h5 id="_8802" tabindex="-1"><a class="header-anchor" href="#_8802"><span>8802</span></a></h5><p><img src="'+N+'" alt="1610203970351_image.png"></p><h2 id="分组消费与持久化" tabindex="-1"><a class="header-anchor" href="#分组消费与持久化"><span>分组消费与持久化</span></a></h2><h3 id="依照8802-clone出来一份运行8803" tabindex="-1"><a class="header-anchor" href="#依照8802-clone出来一份运行8803"><span>依照8802，clone出来一份运行8803</span></a></h3><p>o cloud-stream-rabbitmq-consumer8803过程略</p><h3 id="启动-1" tabindex="-1"><a class="header-anchor" href="#启动-1"><span>启动</span></a></h3><h4 id="rabbitmq-1" tabindex="-1"><a class="header-anchor" href="#rabbitmq-1"><span>RabbitMQ</span></a></h4><h4 id="_7001-1" tabindex="-1"><a class="header-anchor" href="#_7001-1"><span>7001</span></a></h4><p>服务注册</p><h4 id="_8801" tabindex="-1"><a class="header-anchor" href="#_8801"><span>8801</span></a></h4><p>消息生产</p><h4 id="_8802-1" tabindex="-1"><a class="header-anchor" href="#_8802-1"><span>8802</span></a></h4><p>消息消费</p><h4 id="_8803" tabindex="-1"><a class="header-anchor" href="#_8803"><span>8803</span></a></h4><p>消息消费</p><h3 id="运行后有两个问题" tabindex="-1"><a class="header-anchor" href="#运行后有两个问题"><span>运行后有两个问题</span></a></h3><p>o 有重复消费问题</p><p>o 消息持久化问题</p><h3 id="重复消费" tabindex="-1"><a class="header-anchor" href="#重复消费"><span>重复消费</span></a></h3><h4 id="目前是8802-8803同时都收到了-存在重复消费问题" tabindex="-1"><a class="header-anchor" href="#目前是8802-8803同时都收到了-存在重复消费问题"><span>目前是8802/8803同时都收到了，存在重复消费问题</span></a></h4><h4 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决"><span>如何解决</span></a></h4><p>分组和持久化属性group</p><p>比如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息, 那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。这时我们就可以使用Stream中的消息分组来解决注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。不同组是可以全面消费的(重复消费)，</p><p><img src="'+j+'" alt="1610206613014_image.png"></p><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组"><span>分组</span></a></h3><h4 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1"><span>原理</span></a></h4><p>微服务应用放置于同- -个group中，就能够保证消息只会被其中一个应用消费一次。不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费。</p><h4 id="mq默认单独成组-8802-8803都变成不同组-group两个不同" tabindex="-1"><a class="header-anchor" href="#mq默认单独成组-8802-8803都变成不同组-group两个不同"><span>MQ默认单独成组，8802/8803都变成不同组，group两个不同</span></a></h4><h4 id="group-bilibilia、bilibilib" tabindex="-1"><a class="header-anchor" href="#group-bilibilia、bilibilib"><span>group: bilibiliA、bilibiliB</span></a></h4><h5 id="_8802修改yml" tabindex="-1"><a class="header-anchor" href="#_8802修改yml"><span>8802修改YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· group: bilibiliA server:  port: 8802spring:  application:   name: cloud-stream-consumer  rabbitmq:  # 设置rabbitMQ的相关环境配置   host: localhost   port: 5672   username: guest   password: guest  cloud:   stream:    binders: # 在此处配置要绑定的rabbitMQ的服务信息     defaultRabbit: # 表示定义的名称，用于binding的整合      type: rabbit # 消息中间件类型    bindings: # 服务的整合处理     input: # 这个名字是一个通道的名称      destination: studyExchange # 表示要使用的exchange名称定义      content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain      binder: defaultRabbit # 设置要绑定的消息服务的具体设置      group: bilibiliAeureka:  client:   service-url:    defaultZone: http://eureka7001.com:7001/eureka  instance:   lease-renewal-interval-in-seconds: 2 # 设置心跳的间隔时间，默认30   lease-expiration-duration-in-seconds: 5 # 超过5秒间隔，默认90   instance-id: receive-8802.com #主机名   prefer-ip-address: true # 显示ip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_8803修改yml" tabindex="-1"><a class="header-anchor" href="#_8803修改yml"><span>8803修改YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· group: bilibiliA server:  port: 8803spring:  application:   name: cloud-stream-consumer  rabbitmq:  # 设置rabbitMQ的相关环境配置   host: localhost   port: 5672   username: guest   password: guest  cloud:   stream:    binders: # 在此处配置要绑定的rabbitMQ的服务信息     defaultRabbit: # 表示定义的名称，用于binding的整合      type: rabbit # 消息中间件类型    bindings: # 服务的整合处理     input: # 这个名字是一个通道的名称      destination: studyExchange # 表示要使用的exchange名称定义      content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain      binder: defaultRabbit # 设置要绑定的消息服务的具体设置      group: bilibiliAeureka:  client:   service-url:    defaultZone: http://eureka7001.com:7001/eureka  instance:   lease-renewal-interval-in-seconds: 2 # 设置心跳的间隔时间，默认30   lease-expiration-duration-in-seconds: 5 # 超过5秒间隔，默认90   instance-id: receive-8802.com #主机名   prefer-ip-address: true # 显示ip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="我们自己配置" tabindex="-1"><a class="header-anchor" href="#我们自己配置"><span>我们自己配置</span></a></h4><p>分布式微服务应用为了实现高可用和负载均衡，实际上都会部署多个实例，本例阳哥启动了两个消费微服务(8802/8803)多数情况，生产者发送消息给某个具体微服务时只希望被消费-饮，按照上面我们启动两个应用的例子，虽然它们同属一个应用，但是这个消息出现了被重复消费两次的情况。为了解决这个问题，在Spring Cloud Stream中提供了消费组的概念。</p><h4 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h4><p>· 同一个组的多个微服务实例，每次只会有一个拿到</p><h4 id="_8802-8803实现了轮询分组-每次只有一个消费者8801模块的发的消息只能被8802或8803其中一个接收到-这样避免了重复消费。" tabindex="-1"><a class="header-anchor" href="#_8802-8803实现了轮询分组-每次只有一个消费者8801模块的发的消息只能被8802或8803其中一个接收到-这样避免了重复消费。"><span>8802/8803实现了轮询分组，每次只有一个消费者8801模块的发的消息只能被8802或8803其中一个接收到，这样避免了重复消费。</span></a></h4><h4 id="_8802-8803都变成相同组-group两个相同" tabindex="-1"><a class="header-anchor" href="#_8802-8803都变成相同组-group两个相同"><span>8802/8803都变成相同组，group两个相同</span></a></h4><h3 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化"><span>持久化</span></a></h3><p>o 通过上述，解决了重复消费问题，再看看持久化</p><p>o 停止8802/8803并去除掉8802的分组group: bilibiliA</p><p>8803的分组group: bilibiliA没有去掉</p><p>o 8801先发送4条消息到rabbitmq</p><p>o 先启动8802，无分组属性配置，后台没有打出来消息</p><p>o 再启动8803，有分组属性配置，后台打出来了MQ上的消息</p><h1 id="_8-链路追踪" tabindex="-1"><a class="header-anchor" href="#_8-链路追踪"><span>8. 链路追踪</span></a></h1><h2 id="springcloud-sleuth分布式请求链路跟踪" tabindex="-1"><a class="header-anchor" href="#springcloud-sleuth分布式请求链路跟踪"><span>SpringCloud Sleuth分布式请求链路跟踪</span></a></h2><h3 id="概述-7" tabindex="-1"><a class="header-anchor" href="#概述-7"><span>概述</span></a></h3><h4 id="为什么会出现这个技术-需要解决哪些问题" tabindex="-1"><a class="header-anchor" href="#为什么会出现这个技术-需要解决哪些问题"><span>为什么会出现这个技术?需要解决哪些问题?</span></a></h4><h5 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1"><span>问题</span></a></h5><p>在微服务框架中。-个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每-个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何-环出现高延时或错误都会引起整个请求最后的失败。</p><h3 id="是什么-8" tabindex="-1"><a class="header-anchor" href="#是什么-8"><span>是什么</span></a></h3><ul><li><p>tp://github.com/spring-cloud/spring-cloud-sleuth</p></li><li><p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</p></li><li><p>在分布式系统中提供追踪解决方案并且兼容支持了zipkin</p></li></ul><h3 id="搭建链路监控步骤" tabindex="-1"><a class="header-anchor" href="#搭建链路监控步骤"><span>搭建链路监控步骤</span></a></h3><h4 id="_1-zipkin" tabindex="-1"><a class="header-anchor" href="#_1-zipkin"><span>1. zipkin</span></a></h4><h5 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h5><ul><li><p>SpringCloud从F版起已不需要自己构建Zipkin Server了，只需调用jar包即可</p></li><li><p>http//d.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</p></li><li><p>zipkin-server-2.12.9-exec.jar</p></li></ul><h5 id="运行jar" tabindex="-1"><a class="header-anchor" href="#运行jar"><span>运行jar</span></a></h5><p>cmd运行 java -jar zipkin.jar</p><h5 id="运行控制台" tabindex="-1"><a class="header-anchor" href="#运行控制台"><span>运行控制台</span></a></h5><h5 id="http-localhost-9411-zinkin" tabindex="-1"><a class="header-anchor" href="#http-localhost-9411-zinkin"><span>http://localhost:9411/zinkin/</span></a></h5><h6 id="术语" tabindex="-1"><a class="header-anchor" href="#术语"><span>术语</span></a></h6><p><strong>· 完整的调用链路</strong></p><p>表示一请求链路，一条链路通过Trace Id唯一标识。 Span标识发起的请求信息，各span通过parent id关联起来</p><p>o <img src="'+i+'" alt="1610257462352_image.png"></p><p>简化</p><p><img src="'+H+'" alt="1610257660421_image.png"></p><p><strong>· 名词解释</strong></p><ul><li><p>Trace:类似于树结构的Span集合，表示一条调用链路，存在唯一标识</p></li><li><p>span:表示调用链路来源，通俗的理解span就是一次请求信息</p></li></ul><h4 id="_2-服务提供者" tabindex="-1"><a class="header-anchor" href="#_2-服务提供者"><span>2.服务提供者</span></a></h4><h5 id="cloud-provider-payment8001" tabindex="-1"><a class="header-anchor" href="#cloud-provider-payment8001"><span>cloud. -provider-payment8001</span></a></h5><h5 id="pom-4" tabindex="-1"><a class="header-anchor" href="#pom-4"><span>POM</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;dependency&gt;       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;       &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;     &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="yml-6" tabindex="-1"><a class="header-anchor" href="#yml-6"><span>YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>spring:  # zipkin/sleuth链路跟踪  zipkin:   base-url: http://localhost:9411  sleuth:   sampler:    # 采样值介于0到1之间,1表示全部采集    probability: 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="业务类paymentcontroller" tabindex="-1"><a class="header-anchor" href="#业务类paymentcontroller"><span>业务类PaymentController</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/**   * 链路跟踪   * @return   */   @GetMapping(value = &quot;/payment/zipkin&quot;)   public String paymentZipkin() {     return &quot;hi,i&#39;am paymentZipkin server fall back,welcome to bilibili,O(∩_∩)O哈哈~&quot;;   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-服务消费者-调用方" tabindex="-1"><a class="header-anchor" href="#_3-服务消费者-调用方"><span>3.服务消费者(调用方)</span></a></h4><h5 id="cloud-consumer-order80" tabindex="-1"><a class="header-anchor" href="#cloud-consumer-order80"><span>cloud-consumer-order80</span></a></h5><h5 id="pom-5" tabindex="-1"><a class="header-anchor" href="#pom-5"><span>POM</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;!--包含了sleuth+zipkin--&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;       &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;     &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="yml-7" tabindex="-1"><a class="header-anchor" href="#yml-7"><span>YML</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>spring:  # zipkin/sleuth链路跟踪  zipkin:   base-url: http://localhost:9411  sleuth:   sampler:    # 采样值介于0到1之间,1表示全部采集    probability: 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="业务类ordercontroller" tabindex="-1"><a class="header-anchor" href="#业务类ordercontroller"><span>业务类OrderController</span></a></h5><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>/**   * 链路跟踪 zipkin+sleuth   * http://localhost/consumer/payment/zipkin   *   * @return   */   @GetMapping(&quot;/consumer/payment/zipkin&quot;)   public String paymentZipkin() {     return restTemplate.getForObject(&quot;http://localhost:8001/payment/zipkin/&quot;, String.class);   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-依次启动eureka7001-8001-80" tabindex="-1"><a class="header-anchor" href="#_4-依次启动eureka7001-8001-80"><span>4.依次启动eureka7001/8001/80</span></a></h4><p>o 80调用8001几次测试下</p><h4 id="_5-打开浏览器访问-http-localhost-9411-zipkin" tabindex="-1"><a class="header-anchor" href="#_5-打开浏览器访问-http-localhost-9411-zipkin"><span>5.打开浏览器访问: http://localhost:9411/zipkin/</span></a></h4><p>o 首页，调用记录</p><p><img src="'+G+'" alt="1610277535670_image.png"></p><p>o 查看依赖关系</p><p><img src="'+U+'" alt="1610277563808_image.png"></p><p>o 原理</p><p><img src="'+i+'" alt="1610257462352_image.png"></p><h1 id="springcloud-alibaba" tabindex="-1"><a class="header-anchor" href="#springcloud-alibaba"><span>**SpringCloud Alibaba</span></a></h1><h2 id="springcloud-alibaba入门简介" tabindex="-1"><a class="header-anchor" href="#springcloud-alibaba入门简介"><span>SpringCloud Alibaba入门简介</span></a></h2><p>why会出现SpringCloud alibaba</p><p>· Spring Cloud Netlix项目进入维护模式 Spring Cloud Netfli将不再开发新的组件我们都知道Spring Cloud版本迭代算是比较快的，因而出现了很多重大ISSUE都还来不及Fix就又推另-一个Release了. 进入维护模式意思就是目前一直以后一段时间Spring Cloud Netflix提供的服务和功能就这么多了，不在开发新的组件和功能了。以后将以维护和Merge分支Full Request为主</p><p>· SpringCloud alibaba</p><p>o https://spring.io/projects/spring-cloud-alibaba</p><p>SpringCloud alibaba带来了什么</p><p>· 能干嘛 服务限流降级:默认支持Servlet. Feign. RestTemplate. Dubbo和RocketMQ限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查着限流降级Metrics监控。服务注册与发现:适配Spring Cloud服务注册与发现标准，默认集成了Ribbon的支持。分布式配置管理:支持分布式系统中的外部化配置，配置更改时自动刷新。消息驱动能力:基于Spring Cloud Strem为微服务应用构建消息驱动能力。阿里云对象存储:阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。分布式任务调度:提供秒级、 精准。高可靠、高可用的定时(基于Cron表达式)任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker (schedulerx: client) 上执行。</p><p>· 怎么玩 Sentinel阿里巴巴开源产品，把流量作为切入点，从流量控制，熔断降级。系统负载保护等多个维度保护服务的稳定性。Nacos阿里巴巴开源产品，一个更易于构建云原生应用的动态服务发现。配置管理和服务管理平台。RocketMQApache RocketMa&quot;基于Java的高性船，高香吐量的分布式消息和流计算平台。DubboApache Dubbo~是-数高性能 Java RPC框架。Seata阿里巴巴开源产品，一个最于使用的高性船微服务分布式事务解决方案。Alibaba Cloud osS阿里云对象存储服务，(obje Stoag sesicee.简称OSS). 。是阿里云提供的海量。安全。低成本、高可靠的云存儒服好。您可以在任何应用、任何时间，任何地点存储和访问任意类型的数范。Alibaba Cloud SchedulerX阿里中间件团队开发的一款分布式任务调度产品，支持周期性的任务与固定时间点触发任务。</p><p>SpringCloud alibaba学习资料获取</p><p>· https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</p><h2 id="springcloud-alibabanacos服务注册和配置中心" tabindex="-1"><a class="header-anchor" href="#springcloud-alibabanacos服务注册和配置中心"><span>SpringCloud AlibabaNacos服务注册和配置中心</span></a></h2><p>Nacos简介</p><p>· 为什么叫Nacos</p><p>o 前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</p><p>· 是什么</p><p>o 一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>o Nacos: Dynamic Naming and Configuration Service</p><p>o Nacos就是注册中心+配置中心的组合</p><p>等价于Nacos = Eureka+ Config + Bus</p><p>· 能干嘛</p><p>o 替代Eureka做服务注册中心</p><p>o 替代Config做服务配置中必</p><p>· 去哪下</p><p>o nacos.io</p><p>o 文档</p><p>https://nacos.io/zh-cn/docs/what-is-nacos.html</p><p>· 各中注册中心比较</p><p>o</p><p>安装并运行Nacos</p><p>· 安装 docker pull nacos/nacos-serverrun --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server若包内存不足：docker run -e JVM_XMS=256m -e JVM_XMX=256m --env MODE=standalone --name myNacos -d -p 8848:8848 nacos/nacos-server参考：https://blog.csdn.net/jinxilongjxl/article/details/109718879</p><p>· 测试访问：http://localhost:8848/nacos/</p><p>o 账号密码默认nacosnacos</p><p>Nacos作为服务注册中心演示</p><p>· 官网文档</p><p>o 官网</p><p>https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html</p><p>o 中文文档</p><p>https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html</p><p>· 父POM <code>&lt;!--Spring cloud alibaba 2.2.1.RELEASE--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt;</code></p><p>· 基于Nacos的服务提供者</p><p>o 新建项目cloudalibaba-provider-payment9001</p><p>o改POM<code>&lt;dependencies&gt; &lt;!--alibaba-nacos--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML <code>server: port: 9001spring: application: name: nacos-payment-provider cloud: nacos: discovery: server-addr: localhost:8848management: endpoints: web: exposure: include: &quot;*&quot;</code></p><p>o 主启动 <code>@SpringBootApplication@EnableDiscoveryClientpublic class PaymentMain9001 { public static void main(String[] args) { SpringApplication.run(PaymentMain9001.class, args); }}</code></p><p>o 写业务</p><p>controller <code>@RestControllerpublic class PaymentController { @Value(&quot;${server.port}&quot;) private String serverPort; @GetMapping(&quot;/payment/nacos/{id}&quot;) public String getPayment(@PathVariable(&quot;id&quot;) Integer id){ return &quot;nacos register, serverport=&quot; + serverPort + &quot;\\t id:&quot; + id; } }</code></p><p>o 测试</p><p>http://localhost:9001/payment/nacos/1</p><p>nacos控制台</p><p>·</p><p>nacos服务注册中心+服务提供者9001都OK了</p><p>o 为了下一章节演示nacos的负载均衡，参照9001新建9002</p><ol><li>可以参考9001创建9002</li></ol><p>2.通过虚拟的方式参考9001运行9002</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· -DServer.port=9011</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>测试</p><p>· http://localhost:9002/payment/nacos/1</p><p>o</p><p>· 基于Nacos的服务消费者</p><p>o 新建项目cloudalibaba-consumer-nacos-order83</p><p>o改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML server: port: 83spring: application: name: nacos-order-consumer cloud: nacos: discovery: server-addr: localhost:8848#消费者将要去访问的微服务名称（注册成功进nacos的微服务提供者）service-url: nacos-user-service: http://nacos-payment-provider</p><p>o 主启动 @SpringBootApplication@EnableDiscoveryClientpublic class OrderNacosMain83 { public static void main(String[] args) { SpringApplication.run(OrderNacosMain83.class, args); }}</p><p>o 写业务</p><p>config @Configurationpublic class ApplicationContextConfig { @Bean @LoadBalanced public RestTemplate getRestTemplate(){ return new RestTemplate(); }}</p><p>controller @RestController@Slf4jpublic class OrderNacosController { @Resource private RestTemplate restTemplate; @Value(&quot;${service-url.nacos-user-service}&quot;) private String serverUrl; @GetMapping(&quot;/consumer/payment/nacos/{id}&quot;) public String paymentInfo(@PathVariable(&quot;id&quot;) Integer id){ return restTemplate.getForObject(serverUrl + &quot;/payment/nacos/&quot; + id, String.class); }}</p><p>o 测试</p><p>http://localhost:83/consumer/payment/nacos/1</p><p>· 轮询9001和9002</p><p>· 服务注册中心对比</p><p>o</p><p>o</p><p>o Nacos支持AP和CP模式的切换 C是所有节点在同-时间看到的数据是一致的; 而A的定义是所有的请求都会收到响应。何时选择使用何种模式?一般来说，如果不需要存储服务吸别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报。那么就可以选择AP模式。当前主流的服务如Spring cloud和Dubbo服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性， 因此AP模式下只支持注册临时实例。如果需要在服务级别编辑或者存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式。CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式,该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错识。</p><p>Nacos作为服务配置中心演示</p><p>· Nacos作为配置中心-基础配置</p><p>o 新建项目cloudalibaba-config-nacos-client3377</p><p>o改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML Nacos同springcloud-config-样, 在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application</p><p>application.yml <code>spring: profiles: active: dev # 开发环境# active: test # 测试环境# active: info # 开发环境 </code></p><p>bootstrap.yml <code>server: port: 3377spring: application: name: nacos-config-client cloud: nacos: discovery: server-addr: localhost:8848 # 注册中心 config: server-addr: localhost:8848 # 配置中心 file-extension: yml # 这里指定的文件格式需要和nacos上新建的配置文件后缀相同，否则读不到 group: TEST_GROUP namespace: 4ccc4c4c-51ec-4bd1-8280-9e70942c0d0c# ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</code></p><p>o 主启动 <code>@SpringBootApplication@EnableDiscoveryClientpublic class NacosConfigClientMain3377 { public static void main(String[] args) { SpringApplication.run(NacosConfigClientMain3377.class, args); }}</code></p><p>o 写业务</p><p>controller <code>@RestController@RefreshScope // 支持nacos的动态刷新public class ConfigClientController { @Value(&quot;${config.info}&quot;) private String configInfo; @GetMapping(&quot;/config/info&quot;) public String getConfigInfo(){ return configInfo; }}</code></p><p>o 在Nacos中添加配置信息</p><p>Nacos中的匹配规则</p><p>· 理论</p><p>o Nacos中的dataid的组成格式及与SpringBoot配置文件中的匹配规则</p><p>o 官网</p><p>https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</p>',266),a("p",{"spring.cloud.nacos.config.file-extension":""},[s("公式："),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mrow",null,[a("mi",null,"s"),a("mi",null,"p"),a("mi",null,"r"),a("mi",null,"i"),a("mi",null,"n"),a("mi",null,"g"),a("mi",{mathvariant:"normal"},"."),a("mi",null,"a"),a("mi",null,"p"),a("mi",null,"p"),a("mi",null,"l"),a("mi",null,"i"),a("mi",null,"c"),a("mi",null,"a"),a("mi",null,"t"),a("mi",null,"i"),a("mi",null,"o"),a("mi",null,"n"),a("mi",{mathvariant:"normal"},"."),a("mi",null,"n"),a("mi",null,"a"),a("mi",null,"m"),a("mi",null,"e")]),a("mo",null,"−")]),a("annotation",{encoding:"application/x-tex"},"{spring.application.name}-")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord mathnormal"},"p"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),a("span",{class:"mord mathnormal"},"in"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),a("span",{class:"mord"},"."),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ppl"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"c"),a("span",{class:"mord mathnormal"},"a"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"o"),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mord"},"."),a("span",{class:"mord mathnormal"},"nam"),a("span",{class:"mord mathnormal"},"e")]),a("span",{class:"mord"},"−")])])]),s("{spring.profile.active}.$")],-1),t('<p>· 实操</p><p>o 配置新增</p><p>o Nacos界面配置对应</p><p>设置DataId</p><p>公式</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>s</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">.</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo stretchy="false">)</mo><mo>−</mo></mrow><annotation encoding="application/x-tex">(spring.application.name)-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">.</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">ppl</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord">.</span><span class="mord mathnormal">nam</span><span class="mord mathnormal">e</span><span class="mclose">)</span><span class="mord">−</span></span></span></span>(spring.profiles. active).${spring.cloud.nacos.config. file extension)</p><p>prefix默认为spring.application.name 的值</p><p>spring, profile active即为当前环境对应的profile,可以通过配置项spring. profile.active来配置。</p><p>file exetension 为配置内容的数据格式，可以通过配置项spring cloud nacos .config file -extension来配置</p><p>小总结说明</p><p>o 历史配置</p><p>o 测试</p><p>启动前需要在nacos客户端配置管理配置管理栏目下有对应的ypml配置文件</p><p>运行cloud config nacos client3377的主启动类</p><p>调用接口查看配置信息</p><p>· http://localhost:3377/config/info</p><p>· Nacos作为配置中心-分类配置</p><p>o 问题</p><p>多环境多项目管理区 问题1:实际开发中，通常一个系统会准备dev开发环境test测试环境prod生产环境如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢?问题2:-个大型分布式微服务系统会有很多微服务子项目，每个微服务项目又都会有相应的开发环境测试环境、预发环境、正式环境...那怎么对这些微服务配置进行管理呢?</p><p>o Nacos的图形化管理界面</p><p>命名空间</p><p>·</p><p>配置管理</p><p>·</p><p>o Namespace+ Group+ Data ID三者关系?为什么这么设计?</p><p>是什么 1是什么类似Java里面的package名和类名最外层的namespace是可以用于区分部署环境的，Group和DatalD逻辑 上区分两个目标对象。</p><p>三者情况</p><p>·</p><p>默认情况 默认情况:Namespace=public, Group=DEFAULT, GROUP,默认Cluster是DEFAULTNacos默认的命名空间是public, Namespace主要用来实现隔离。比方说我们现在有3三个环境:开发、测试、生产环境，我们就可以创建E个Namespace,不同的Namespace之间是隔离的。Group默认是DEFAULT_ GROUP, Group可以把不同的微服务划分到同-个分组里面去Service就是微服务; -个Service可以包含多个Cluster (集群)，Nacos默Cluster是DEFAULT, Cluster是对指定微服务的一 个虚拟划分。比方说为了客灾，将Service微服务分别部署在了杭州机房和广州机房,这时就可以给杭州机房的Service微服务起一个集群名称(HZ) ,给广州机房的Service微服务起-个集群名称(GZ) .还可以尽量让同一个机房的微服务互相调用，以提升性能。最后是Instance,就是微服务的实例。</p><p>o Case</p><p>三种方案加载配置</p><p>· DatalD方案</p><p>o 指定spring.profile. active和配置文件的DatalD来使不同环境下读取不同的配置</p><p>o 默认空间+默认分组+可以建多个DatalD</p><p>o 通过spring. profile.active属性就能进行多环境下配置文件的读取</p><p>3377application.yml spring: profiles: active: dev # 开发环境# active: test # 测试环境# active: info # 开发环境</p><p>o 测试</p><p>http://localhost:3377/config/info</p><p>· Group方案</p><p>o 通过Group实现环境区分</p><p>新建Group</p><p>o 在nacos图形界面控制台，上面新建配置文件DatalD</p><p>o bootstrap+ application</p><p>· Namespace方案</p><p>o 新建dev/test的Namespace</p><p>o 回到服务管理-服务列表查看享</p><p>o 按照域名配置填写重</p><p>o YML</p><p>bootstrap spring: cloud: nacos: config: group: TEST_GROUP namespace: 4410c076-c5d1-49e6-866a-13eecc5e7fbb</p><p>application</p><p>Nacos集群和持久化配置(重要)</p><p>· 官网说明</p><p>o https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</p><p>o 说明 默认Nacos使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。</p><p>https://nacos.io/zh-cn/docs/deployment.html</p><p>支持MySQL</p><p>·</p><p>· Nacos持久化配置解释</p><p>o Nacos默认自带的是嵌入式数据库derby</p><p>可产看源码POM</p><p>o derby到mysq|切换配置步骤</p><p>nacos -server-1.1.4\\nacos\\conf目录下找到sql脚本</p><p>· nacos -mysql.sql</p><p>· 执行脚本</p><p>nacos- server-1.1.4\\nacos\\conf目录下找到application.properties</p><p>o 启动Nacos,可以看到是个全新的空记录界面，以前是记录进derby</p><p>· Linux版Nacos+ MySQL生产环境配置</p><p>o 集群配置</p><ol><li>Linux服务器上mysq|数据库配置</li></ol><p>· sq|语句源文件 https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</p><p>· 自己Linux机器上的Mysq|数据库粘贴</p><ol start="2"><li>application.properties配置</li></ol><p>· 位置</p><p>o X/nacos/conf/</p><p>· 内容 spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTCdb.user=rootdb.password=root</p><ol start="3"><li>Linux服务器上nacos的集群配置cluster.conf</li></ol><p>· 梳理出3台nacos集器的不同服务端口号</p><p>· 复制出cluster.conf</p><p>· 内容 host1:port1host2:port2host3:port3</p><p>o 这个IP不能写127.0.01.必须是Linux命令hostname -i能够识别的IP</p><p>4.编辑Nacos的启动脚本startup.sh,使它能够接受不同的启动端口</p><p>· /mynacos/nacos/bin目录下有startup.sh</p><p>· 在什么地方，修改什么，怎么修改</p><p>· 思考 集群启动，我们希望可以类似其它软件的hell命令,传递不同的端口号启动不同的nacos实例。命令: ./startup.sh -p 3333表示启动端口号为3333的nacos服务器实例，和上一一步的cluster.conf配置的- 致。</p><p>· 修改内容</p><p>o</p><p>· 执行方式</p><p>o ./startup. sh -p 3333</p><p>o ./startup. sh -p 4444</p><p>o ./startup. sh -p 5555</p><ol start="5"><li>Nginx的配置，由它作为负载均衡器</li></ol><p>· 修改noix的配置文件</p><p>o nginx.conf</p><p>· 按照指定启动</p><p>o . /nginx -C /usr/local/nginx/conf/nginx. cenf</p><p>6.截止到此处，1个Nginx+ 3个nacos注册中心+ 1个mysq|</p><p>· 测试通过nginx访问nacos</p><p>o http://host:port/nacos/#/login</p><p>· 新建一个配置测试口</p><p>· linux服务器的mysql插入一条记录</p><p>o 测试</p><p>微服务cloudalibaba- provider-payment9002启动注册进nacos集群</p><p>· YML</p><p>o 高可用小总结</p><h2 id="springcloud-alibabasentinel实现熔断与限流" tabindex="-1"><a class="header-anchor" href="#springcloud-alibabasentinel实现熔断与限流"><span>SpringCloud AlibabaSentinel实现熔断与限流</span></a></h2><p>Sentinel</p><p>· 官网</p><p>o https://github.com/alibaba/Sentinel</p><p>o 中文：https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</p><p>· 去哪下</p><p>· 能干嘛</p><p>o</p><p>· 怎么玩</p><p>o 服务使用中的各种问题白</p><p>服务雪崩</p><p>服务降级</p><p>服务熔断</p><p>服务限流</p><p>安装Sentinel控制台 Sentinel分为两个部分:●核心库(Java 客户端)不依赖任何框架/库，能够运行于所有Java运行时环境。同时对Dubbo、Spring Cloud等框架也有较好的支持。●控制台(Dashboard) 基于Spring Boot开发。打包后可以直接运行，不需要额外的Tomcat等应用容器，</p><p>· sentinel组件由2部分构成</p><p>o 后台</p><p>o 前台8080</p><p>· 安装步骤用</p><p>o 下载</p><p>o 运行命令</p><p>前提</p><p>· java8、8080端口空闲</p><p>命令</p><p>· java -jar sentinel-dashboard-1.8.0.jar</p><p>o 访问sentinel管理界面</p><p>http://localhost:8080</p><p>登录账号密码均为sentinel</p><p>初始化演示工程</p><p>· 启动Nacos8848成功</p><p>o http://localhost:8848/nacos</p><p>· Module</p><p>o 新建项目cloudalibaba-sentinel-service8401</p><p>o改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- sentinel-datasource-nacos 后续持久化用 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt; &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML <code>server: port: 8401spring: application: name: cloudalibaba-sentinel-service cloud: nacos: discovery: # Nacos服务注册中心地址 server-addr: localhost:8848 sentinel: transport: # sentinel dashboard 地址 dashboard: localhost:8080 # 默认为8719，如果被占用会自动+1，直到找到为止 port: 8719 # 流控规则持久化到nacos datasource: dsl: nacos: server-addr: localhost:8848 data-id: ${spring.application.name} group-id: DEFAULT_GROUP data-type: json rule-type: flowmanagement: endpoints: web: exposure: include: &quot;*&quot;</code></p><p>o 主启动 <code>@SpringBootApplication@EnableDiscoveryClientpublic class MainApp8401 { public static void main(String[] args) { SpringApplication.run(MainApp8401.class, args); }}</code></p><p>o 写业务</p><p>controller</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· FlowLimitController  @RestController@Slf4jpublic class FlowLimitController {   @GetMapping(&quot;/testA&quot;)   public String testA(){//     try {//       TimeUnit.MILLISECONDS.sleep(800);//     } catch (InterruptedException e) {//       e.printStackTrace();//     }     return &quot;testA-----&quot;;   }   @GetMapping(&quot;/testB&quot;)   public String testB(){     log.info(Thread.currentThread().getName() + &quot;...testB &quot;);     return &quot;testB  -----&quot;;   }   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>o 测试</p><p>· 启动Sentinel8080 <code>@RestController@Slf4jpublic class FlowLimitController { @GetMapping(&quot;/testA&quot;) public String testA(){// try {// TimeUnit.MILLISECONDS.sleep(800);// } catch (InterruptedException e) {// e.printStackTrace();// } return &quot;testA-----&quot;; } @GetMapping(&quot;/testB&quot;) public String testB(){ log.info(Thread.currentThread().getName() + &quot;...testB &quot;); return &quot;testB -----&quot;; } @GetMapping(&quot;/testD&quot;) public String testD(){ try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } log.info(&quot;testD 测试RT&quot;); return &quot;testD -----&quot;; } @GetMapping(&quot;/testException&quot;) public String testException(){ log.info(&quot;testException 异常比例&quot;); int age = 10 /0 ; return &quot;testException -----&quot;; } @GetMapping(&quot;/testExceptionCount&quot;) public String testExceptionCount(){ log.info(&quot;testExceptionCount 异常数&quot;); int age = 10 /0 ; return &quot;testExceptionCount -----&quot;; } @GetMapping(&quot;/testHotKey&quot;) @SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;dealTestHotKey&quot;) public String testHotKey(@RequestParam(value = &quot;p1&quot;, required = false) String p1, @RequestParam(value = &quot;p2&quot;, required = false) String p2){ int age = 10 /0; return &quot;testHotKey -----&quot;; } public String dealTestHotKey(String p1, String p2, BlockException blockException){ return &quot;dealTestHotKey---------&quot;; }}</code></p><p>· 启动微服务8401</p><p>o 空空如也，啥都没有</p><p>o Sentinel采用的懒加载说明</p><p>执行一次访问即可</p><p>· http://localhost:8401/testA</p><p>· http://localhost:8401/testB</p><p>o 效果</p><p>o 结论</p><p>sentinel8080正在监控微服务8401</p><p>流控规则</p><p>· 基本介绍</p><p>o</p><p>· 流控模式</p><p>o 直接(默认)</p><p>直接-&gt;快速失败(默认)</p><p>配置及说明 QPS：表示1秒钟内查询1次就是OK, 若超过次数1,就直接-快速失败，报默认错误线程数：当调用该ap的线程数达到问值的时候，进行限流</p><p>·</p><p>测试</p><p>· 快速点击访问http://localhost:8401/testA</p><p>· 结果</p><p>o</p><p>· 思考???</p><p>o 直接调用默认报错信息，技术方面OKbut, 是否应该有我们自己的后续处理?</p><p>类似有个fallback的兜底方法?</p><p>o 关联</p><p>是什么</p><p>· 当关联的资源达到阈值时，就限流自己</p><p>· 即当与A关联的资源B达到阀值后，就限流A自己</p><p>· 即B惹事，A挂了</p><p>配置A 当关联资源/testB的qps阀值超过1时，就限流/testA的Rest访问地址, 当关联资源到阈值后限制配置好的资源名</p><p>·</p><p>postman模拟并发密集访问testB</p><p>·</p><p>运行后发现testA挂了</p><p>·</p><p>o 链路</p><p>多个请求调用了同一个微服务</p><p>· 流控效果</p><p>o 直接-&gt;快速失败(默认的流控处理)</p><p>公式：阈值除以coldFactor(默认值为3),经过预热时长后才会达到阈值</p><p>o 预热 Warm UpWarm Up ( RuleConstant.CONTPOL, BEHAVIOR JHARPLUP)方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过“冷启动，让通过的流量缓慢增加，在一定时间内逐渐增加到调值上限，给冷系统-个预热的时间。 避免冷系统被压垮，详细文档可以参考流量控制. Warm Up文档,具体的例子可以参见WhrmUplowDemo.</p><p>说明</p><p>· 默认coldFactor为3，即请求QPS从threshold / 3开始,经预热时长逐渐升至设定的QPS阈值。</p><p>· 限流冷启动</p><p>配置 默认coldFactor为3,即请求QPS从(threshold/ 3)开始，经多少预热时长才逐渐升至设定的QPS问值。</p><p>· 案例：阀值为10+预热时长设置5秒.系统初始化的阀值为10/ 3约等于3，即阀值刚开始为3;然后过了5秒后阀值才慢慢升高恢复到10</p><p>o 排队等待 匀速排队匀速排队( RuleConstant CONTRPOL BEHAVIOR RATE LITER )方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。详细文档可以参考流星控制-匀速器模式，具体的例子可以参见PaceFlowDemo,</p><p>说明</p><p>·</p><p>配置</p><p>· controller，testB打印线程</p><p>·</p><p>测试</p><p>·</p><p>· 每秒仅通过一次</p><p>降级规则</p><p>· 基本介绍 RT (平均响应时间，秒级)平均响应时间超出阈值且在时间窗口内通过的请求&gt;=5, 两个条件同时满足后触发降级窗口期过后关闭断路器RT最大4900 (更大的需要通过Dscsp.sentinelstatisticmaxt-=000X才能生效)异常比列(秒级)QPS == 5且异常比例(秒级统计)超过阅值时，触发降级;时间官口结束后，关闭降级异常数(分钟级)异常数(分钟统计)超过间值时，触发降级;时间官口结束后，关闭降级</p><p>o 进一步说明 Sentinel熔断降级会在调用链路中某个资源出现不稳定状态时(例如调用超时或异常比例升高) ,对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动培断(默认行为是抛出DegradeException)。</p><p>o Sentinel的断路器是没有半开状态的</p><p>半开的状态系统自动去检测是否请求有异常,没有异常就关闭断路器恢复使用，有异常则继续打开断路器不可用。具体可以参考Hystrix</p><p>Hystrix</p><p>·</p><p>· 降级策略实战</p><p>o 慢调用比例RT 慢调用比例 (SLOW_REQUEST_RATIO)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p><p>是什么</p><p>·</p><p>测试</p><p>· 代码</p><p>o controller @GetMapping(&quot;/testD&quot;) public String testD(){ try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } log.info(&quot;testD 测试RT&quot;); return &quot;testD -----&quot;; }</p><p>· 配置</p><p>o</p><p>· jmeter压测</p><p>o</p><p>· 效果</p><p>o</p><p>o 异常比例 异常比例( DEGRADE GRADE EXCEPTION RATIO):当资源的每秒请求量&gt;=5,并且每秒异常总数占通过量的比值超过阈值( DegradeRule中的count )之后，资源进入降级状态，即在接下的时间窗口( DegradeRule中的timeMindou, 以s为单位)之内,对这个方法的调用都会自动地返回。异常比率的阈值范围是[0.0, 1.0]. 代表0%- 100%。</p><p>是什么</p><p>·</p><p>测试</p><p>· 代码</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o controller @GetMapping(&quot;/testException&quot;)   public String testException(){     log.info(&quot;testException 异常比例&quot;);     int age = 10 /0 ;     return &quot;testException -----&quot;;   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 配置</p><p>o</p><p>· Jmeter压测(同时满足两个条件）</p><p>o http://localhost:8401/testException</p><p>· 效果</p><p>o</p><p>o 异常数</p><p>是什么 异常数(DEGRADE GRADE EXCEPTION CounT):当资源近1分钟的异常数目超过调值之后会进行熔断。注意由于统计时间窗口是分钟级别的,若tinenindt小于60s,则结束熔断状态后仍可能再进入熔断状态。时间窗口-定要大于等于60秒。</p><p>·</p><p>异常数是按照分钟统计的</p><p>测试</p><p>· 代码</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o controller @GetMapping(&quot;/testExceptionCount&quot;)   public String testExceptionCount(){     log.info(&quot;testExceptionCount 异常数&quot;);     int age = 10 /0 ;     return &quot;testExceptionCount -----&quot;;   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 配置</p><p>o</p><p>· 压测</p><p>o 访问3次以上http://localhost:8401/testExceptionCount</p><p>· 效果</p><p>o</p><p>热点key限流</p><p>· 基本介绍</p><p>o 是什么</p><p>· 官网</p><p>o https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81</p><p>· 承上启下复习start 兜底方法分为系统默认和客户自定义。两种之前的案例,限流出问题后，都是用sentinel系统默认的提示: Blocked by Sentinel (flow limiting)我们能不能自定?类似hystrix,某个方法出问题了,就找对应的兜底降级方法?结论从@HystrixCommand到@SeninelResource</p><p>o @SeninelResource</p><p>· 配置</p><p>o controller <code>@GetMapping(&quot;/testHotKey&quot;) @SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;dealTestHotKey&quot;) //value唯一即可，dealTestHotKey()兜底方法 public String testHotKey(@RequestParam(value = &quot;p1&quot;, required = false) String p1, @RequestParam(value = &quot;p2&quot;, required = false) String p2){// int age = 10 /0; return &quot;testHotKey -----&quot;; } public String dealTestHotKey(String p1, String p2, BlockException blockException){ return &quot;dealTestHotKey---------&quot;; }</code></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;dealTestHotKey&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>绑定资源名为testHotKey，兜底方法为dealTestHotKey</p><p>o</p><p>第0个参数（方法的参数列表）点击率超过每秒1次，则对此资源限流</p><p>· 测试</p><p>o 正常访问http://localhost:8401/testHotKey?p1=a</p><p>o 过快访问（每秒超过1次）访问http://localhost:8401/testHotKey?p1=a</p><p>· 参数例外项</p><p>o 上述案例演示了第一个参数p1,当QPS超过1秒1次点击后马上被限流</p><p>o 特例情况</p><p>普通</p><p>· 超过1秒钟一个后，达到阈值1后马上被限流</p><p>我们期望p1参数当它是某个特殊值时，它的限流值和平时不一-样</p><p>特例</p><p>· 假如当p1的值等于5时，它的阈值可以达到200</p><p>o 配置</p><p>· 当第0个参数的值为5时，阈值调整到每秒3次</p><p>o 测试</p><p>正常访问http://localhost:8401/testHotKey?p1=5</p><p>·</p><p>过快访问（每秒超过3次）访问http://localhost:8401/testHotKey?p1=5</p><p>·</p><p>o 前提条件</p><p>热点参数的注意点，参数必须是基本类型或者String（可选）</p><p>· 其它</p><p>o 运行异常并不会（如10/0），降级（熔断）；处理方法看后面</p><p>系统规则（系统自适应限流）</p><p>· 是什么</p><p>o https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</p><p>· 各项配置参数说明 系统规则支持以下的模式：Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。CPU usage（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</p><p>· 例：配置全局QPS</p><p>o</p><p>对于整个系统，访问QPS大于每秒2次就熔断</p><p>o 此时过快访问（每秒超过2次）访问http://localhost:8401/tesA也会被限流</p><p>@SentinelResource</p><p>· 按资源名称限流+后续处理</p><p>o 启动Nacos成功</p><p>o 启动Sentinel成功</p><p>o 修改Modulecloudalibaba-sentinel-service8401</p><p>改POM</p><p>· 引入自定义的common工具包 <code>&lt;dependency&gt; &lt;groupId&gt;com.bilibili.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt;</code></p><p>写业务</p><p>· controller</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o RateLimitController @GetMapping(&quot;/byResource&quot;)   @SentinelResource(value = &quot;byResource&quot;, blockHandler = &quot;handleException&quot;)   public CommonResult&lt;&gt; byResource(){     return new CommonResult(200, &quot;按资源名称限流测试OK&quot;, new Payment(2020L, &quot;serial001&quot;));   }   public CommonResult handleException(BlockException blockException){     return new CommonResult().fail(444, blockException.getClass().getCanonicalName()+&quot;\\t服务不可用&quot;);   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>o 配置流控规则</p><p>配置步骤</p><p>·</p><p>图形配置和代码关系</p><p>表示1秒钟内查询次数大于1,就跑到我们自定义的处流，限流.</p><p>o 测试</p><p>http://localhost:8401/byResource</p><p>· 正常</p><p>o</p><p>· 过快(每秒大于1次)</p><p>o</p><p>o 额外问题</p><p>此时关闭问服务8401看看</p><p>Sentinel控制台，流控规则消失了</p><p>· sentinel时临时的</p><p>· 按照UrI地址限流+后续处理</p><p>o 通过访问的URL来限流，会返回Sentinel自 带默认的限流处理信息</p><p>o 业务类RateLimitController <code>@GetMapping(&quot;/rateLimit/byUrl&quot;) @SentinelResource(value = &quot;byUrl&quot;) //无兜底方案 public CommonResult byUrl(){ return new CommonResult(200, &quot;by url限流测试OK&quot;, new Payment(2020L, &quot;serial002&quot;)); }</code></p><p>o 访问一次，注册到sentinel</p><p>o Sentinel控制台配置</p><p>o 测试</p><p>http://localhost:8401/rateLimit/byUrl</p><p>· 正常</p><p>o</p><p>· 过快</p><p>o 使用系统默认处理</p><p>· 上面兜底方案面临的问题</p><p>o 1系统默认的, 没有体现我们自己的业务要求。</p><p>o 2依照现有条件,我们自定义的处理方法又和业务代码耦合在一块, 不直观。</p><p>o 3每个业务方法都添加一个兜底的，那代码膨胀加剧。</p><p>o 4全局统-的处理方法没有体现。</p><p>· 客户自定义限流处理逻辑</p><p>o 创建CustomerBlockHandler类用于自定义限流处理逻辑</p><p>o 自定义限流处理类</p><p>CustomerBlockHandler <code>public class CustomerBlockHandler { public static CommonResult handlerException(BlockException exception) { return new CommonResult().fail(444, &quot;客户自定义，global handlerException---1&quot;); } public static CommonResult handlerException2(BlockException exception) { return new CommonResult().fail(444, &quot;客户自定义，global handlerException---2&quot;); }}</code></p><p>o RateLimitController <code>@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;) @SentinelResource(value = &quot;customerBlockHandler&quot;, blockHandlerClass = CustomerBlockHandler.class, blockHandler = &quot;handlerException2&quot;) //注意次此处注解;定义兜底处理类和方法 public CommonResult customerBlockHandler(){ return new CommonResult(200, &quot;客户自定义 限流测试OK&quot;, new Payment(2020L, &quot;serial003&quot;)); }</code></p><p>o 启动微服务后先调用一次，注册进sentinel</p><p>http://localhost:8401/rateLimit/customerBlockHandler</p><p>o Sentinel控制台配置</p><p>o 测试后我们自定义的限流处理出来了</p><p>正常</p><p>·</p><p>过快</p><p>· 使用自定义方法处理</p><p>o 进一步说明</p><p>· 更多注解属性说明</p><p>o 上述配置，也可以通过代码的方式进行配置，但部推荐</p><p>o Sentinel主要有三个核心Api</p><p>SphU定义资源</p><p>Tracer定义统计</p><p>ContextUtil定义了上下文</p><p>服务熔断功能</p><p>· sentinel整合ribbon + openFeign + fallback</p><p>· Ribbon系列</p><p>o 启动nacos和sentinel</p><p>o 提供者9003/9004</p><p>新建项目cloudalibaba-provider-payment9003</p><p>§改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>写YML <code>server: port: 9003spring: application: name: nacos-payment-provider cloud: nacos: discovery: server-addr: localhost:8848management: endpoints: web: exposure: include: &quot;*&quot;</code></p><p>主启动 <code>@SpringBootApplication@EnableDiscoveryClientpublic class PaymentMain9003 { public static void main(String[] args) { SpringApplication.run(PaymentMain9003.class, args); }}</code></p><p>写业务</p><p>· controller，模拟了一个数据库 <code>@RestControllerpublic class PaymentController { @Value(&quot;${server.port}&quot;) private String serverPort; public static Map&lt;Long , Payment&gt; hashMap = new HashMap&lt;&gt;(); static { hashMap.put(1L,new Payment(1L, IdUtil.simpleUUID())); hashMap.put(2L,new Payment(2L, IdUtil.simpleUUID())); hashMap.put(3L,new Payment(3L, IdUtil.simpleUUID())); } @GetMapping(&quot;/paymentSQL/{id}&quot;) public CommonResult&lt;Payment&gt; paymentSQL(@PathVariable(&quot;id&quot;) Long id){ Payment payment = hashMap.get(id); return new CommonResult&lt;&gt;(200, &quot;from mysql,serverPort:&quot; + serverPort, payment); }}</code></p><p>虚拟配置并启动9004</p><p>· 9004 CopyOf 9003</p><p>测试</p><p>· http://localhost:9003/paymentSQL/1</p><p>o</p><p>· http://localhost:9004/paymentSQL/1</p><p>o 分支主题</p><p>o 消费者84</p><p>新建项目cloudalibaba-consumer-nacos-order84</p><p>§改POM<code>&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- sentinel-datasource-nacos 后续持久化用 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt; &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt; &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt; &lt;version&gt;${project.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>写YML <code>server: port: 84spring: application: name: nacos-order-consumer cloud: nacos: discovery: server-addr: localhost:8848 sentinel: transport: dashboard: localhost:8080 port: 8719service-url: nacos-user-service: http://nacos-payment-provider#激活sentinel对feign的支持feign: sentinel: enabled: true</code></p><p>主启动 <code>@SpringBootApplication@EnableDiscoveryClient@EnableFeignClientspublic class OrderNacosMain84 { public static void main(String[] args) { SpringApplication.run(OrderNacosMain84.class, args); }}</code></p><p>写业务、测试</p><p>· config <code>@Configurationpublic class ApplicationContextConfig { @Bean @LoadBalanced public RestTemplate getRestTemplate(){ return new RestTemplate(); }} </code></p><p>· controller <code>@RestController@Slf4jpublic class CircleBreakerController { private static final String SERVICE_URL = &quot;http://nacos-payment-provider&quot;; @Resource private RestTemplate restTemplate; @RequestMapping(&quot;/consumer/fallback/{id}&quot;) @SentinelResource(value = &quot;fallback&quot;) //仅注册，没有配置// @SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;) //配置了fallback的，fallback只负责业务异常// @SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;) // 配置了blockHandler，只负责sentinel控制台配置违规// @SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;,// exceptionsToIgnore = {IllegalArgumentException.class}) // 配置了blockHandler和fallback public CommonResult&lt;Payment&gt; fallback(@PathVariable(&quot;id&quot;) Long id){ CommonResult&lt;Payment&gt; commonResult = restTemplate.getForObject(SERVICE_URL + &quot;/paymentSQL/&quot; + id, CommonResult.class); //数据库是由1、2、3 if(id == 4){ //4表示非法参数 throw new IllegalArgumentException(&quot;IllegalArgumentException,非法参数异常&quot;); }else if(commonResult.getData() == null){ //5表示空指针异常 throw new NullPointerException(&quot;NullPointerException,该ID没有记录，空指针异常&quot;); } return commonResult; } // 本例是fallback public CommonResult handlerFallback(Long id, Throwable e){ Payment payment = new Payment(id, null); return new CommonResult(444, &quot;兜底异常handler，exception内容&quot;+e.getMessage(), payment); } public CommonResult blockHandler(Long id, BlockException exception){ Payment payment = new Payment(id, null); return new CommonResult&lt;&gt;(445, &quot;blockHandler-sentinel 限流，无此流水号：blockException&quot; + exception.getMessage(), payment); }}</code></p><p>o 目的</p><p>fallback管运行异常</p><p>blockHandler管配置违规</p><p>o 测试地址：模拟数据库中仅有1、2、3，4表示非法参数，5表示空指针异常</p><p>http://localhost:84/consumer/fallback/1</p><p>能够轮询访问服务</p><p>o 使用@SentinelResource(value = &quot;fallback&quot;) //仅注册，没有配置</p><p>http://localhost:84/consumer/fallback/4</p><p>http://localhost:84/consumer/fallback/5</p><p>o 使用@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;) //配置了fallback的，fallback只负责业务异常</p><p>http://localhost:84/consumer/fallback/4服务降级（兜底）</p><p>http://localhost:84/consumer/fallback/5</p><p>o 使用@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;) // 配置了blockHandler，只负责sentinel控制台配置违规</p><p>没有兜底方案，但仍有sentinel的限流</p><p>http://localhost:84/consumer/fallback/4http://localhost:84/consumer/fallback/5</p><p>正常访问</p><p>过快访问</p><p>o 使用@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;)// 配置了blockHandler和fallback</p><p>限流配置</p><p>java走fallback的降级sentinel违规走限流方案限流&gt;降级</p><p>若blockHandler和fallback都进行了配置,则被限流降级而抛出BlockException时只会进入blockHandler处理逻辑。</p><p>http://localhost:84/consumer/fallback/4</p><p>正常</p><p>过快</p><p>o 忽略属性</p><p>忽略特定异常</p>',401),a("p",{"IllegalArgumentException.class":""},"exceptionsToIgnore =",-1),t('<p>效果</p><p>http://localhost:84/consumer/fallback/4此时不再走降级方法</p><p>· Feign系列</p><p>o 修改84</p><p>84消费者调用提供者9003</p><p>Feign组件一般是消费侧</p><p>o 改POM <code>&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt;</code></p><p>o 写YML #激活sentinel对feign的支持feign: sentinel: enabled: true</p><p>o 主启动@EnableFeignClients</p><p>o 写业务</p><p>service</p><p>· PaymentService <code>@FeignClient(value = &quot;nacos-payment-provider&quot;, fallback = PaymentFallbackService.class)public interface PaymentService { @GetMapping(&quot;/paymentSQL/{id}&quot;) CommonResult&lt;Payment&gt; paymentSQL(@PathVariable(&quot;id&quot;) Long id);}</code></p><p>· PaymentFallbackService <code>@Componentpublic class PaymentFallbackService implements PaymentService { @Override public CommonResult&lt;Payment&gt; paymentSQL(Long id) { return new CommonResult&lt;&gt;(444, &quot;fallback&quot;); }}</code></p><p><code>controller // --------------- open feign--------- @Resource private PaymentService paymentService; @GetMapping(&quot;/consumer/paymentSQL/{id}&quot;) public CommonResult&lt;Payment&gt; paymentSQL(@PathVariable(&quot;id&quot;) Long id){ return paymentService.paymentSQL(id); }</code></p><p>o 测试</p><p>http://localhost:84/consumer/paymentSQL/1</p><p>测试84调用此时故意关闭9003和9004微服务提供者84消费侧自动降级，不会被耗死</p><p>· 未关闭</p><p>· 关闭后</p><p>· 熔断框架比较</p><p>o</p><p>规则持久化</p><p>· 是什么</p><p>o 一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化</p><p>· 怎么玩</p><p>o 将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentine|控制台的流控规则就能看i到，只要Nacos里而的配置不删除，针对8401,上sentinel.上的流控规则持续有效</p><p>· 步骤 添加Nacos业务规则配置-日内容解析启动8401后刷新sentinel发现业务规则有了快速访问测试接口C3)停止8401再看sentinel重新启动8401再看sentinel4)</p><p>o 修改cloudalibaba-sentinel-service8401</p><p>o 改POM <code>&lt;dependency&gt; &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt; &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt; &lt;/dependency&gt;</code></p><p>o 写YML <code>spring: cloud: sentinel: transport: datasource: dsl: nacos: server-addr: localhost:8848 data-id: ${spring.application.name} group-id: DEFAULT_GROUP data-type: json rule-type: flow</code></p><p>添加Nacos数据源配置</p><p>o 添加Nacos业务规则配置</p><p>内容解析 [ { &quot;resource&quot;: &quot;/rateLimit/byUrl&quot;, &quot;limitApp&quot; : &quot;default&quot;, &quot;grade&quot;: 1, &quot;count&quot; : 1, &quot;strategy&quot;: 0, &quot;controlBehavior&quot; : 0, &quot;clusterMode&quot;: false }]解释：resource： 资源名称limitApp： 来源应用grade： 阈值类型，0表示线程数，1表示 QPScount: 单机阈值strategy: 流控模式， 0 - 表示直接，1表示关联，2表示链路controlBehavior： 流控效果，0表示快速失败，1表示Warm up , 2表示排队clusterMode： 是否集群。</p><p>o 启动8401后刷新sentine|发现业务规则有了</p><p>o 快速访问测试接口</p><p>正常运行</p><p>o 停止8401再看sentinel</p><p>已经没有服务的配置过的规则了</p><p>o 重新启动8401再看sentinel</p><p>多次调用接口，激活服务</p><p>重新配置出现了，持久化验证通过</p><h2 id="springcloud-alibabaseata处理分布式事务" tabindex="-1"><a class="header-anchor" href="#springcloud-alibabaseata处理分布式事务"><span>SpringCloud AlibabaSeata处理分布式事务</span></a></h2><p>分布式事务问题</p><p>· 分布式前</p><p>o 单机单库没这个问题</p><p>o 从1:1-&gt;1:N-&gt;N:N的转变</p><p>· 分布式之后 单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。如：下单、减库存、扣账户、增订单操作</p><p>· 一句话</p><p>o 一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务</p><p>Seata简介</p><p>· 是什么</p><p>o Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><p>o 官网地址</p><p>http://seata.io</p><p>· 能干嘛</p><p>o 一个典型的分布式事务过程</p><p>分布式事务处理过程的一ID+三组件模型</p><p>· Transaction ID XID</p><p>o 全局唯一的事务ID</p><p>· 3组件概念</p><p>o Transaction Coordinator (TC)</p><p>事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚;</p><p>o Transaction Manager (TM)</p><p>控制全局事务的边界， 负责开启-个全局事务，并最终发起全局提交或全局回滚的决议;</p><p>o Resource Manager (RM)</p><p>控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支(本地)事务的提交和回滚</p><p>处理过程口</p><p>· 1. TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID;</p><p>· 2. XID 在微服务调用链路的.上下文中传播:</p><p>· 3. RM向TC注册分支事务，将其纳入XID对应全局事务的管辖:</p><p>· 4. TM向TC发超针对XID的全局提交或回浓决议:</p><p>· 5. TC 调度XID下管辖的全部分支事务完成提交或回滚请求。</p><p>· 去哪下</p><p>o https://github.com/seata/seata/releases</p><p>· 怎么玩</p><p>o 本地@Transactional</p><p>o 全局@GlobalTransactional</p><p>SEATA的分布式交易解决方案</p><p>·</p><p>Seata-Server安装</p><p>· 下载</p><p>o https://github.com/seata/seata/releases</p><p>· seata-server.zip解压到指定目录并修改conf目录下的file.conf配置文件</p><p>o 先备份原始file.conf文件</p><p>o 主要修改:自定义事务组名称+事务日志存储模式为db +数据库连接信息</p><p>· file.conf</p><p>o 分支主题</p><p>o store模块</p><p>· mysq|5.7数据库新建库seata</p><p>o 建表db_ store.sql见http://seata.io/zh-cn/docs/user/quickstart.html</p><p>· 在seata库里建表</p><p>· 修改seata-server\\seata\\conf自录下的registry.conf配置文件</p><p>o 配置注册至nacos registry { # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa type = &quot;nacos&quot; loadBalance = &quot;RandomLoadBalance&quot; loadBalanceVirtualNodes = 10 nacos { application = &quot;seata-server&quot; serverAddr = &quot;127.0.0.1:8848&quot; group = &quot;SEATA_GROUP&quot; namespace = &quot;&quot; cluster = &quot;default&quot; username = &quot;&quot; password = &quot;&quot; }}</p><p>· 先启动Nacos</p><p>· 再启动seata-server</p><p>o seata-server\\seata\\bin</p><p>seata-server.bat</p><p>o</p><p>订单/库存/账户业务数据库准备</p><p>· 以下演示都需要先启动Nacos后启动Seata，保证两个都OK</p><p>o Seata没启动报错no available server to connect</p><p>· 分布式事务业务说明</p><p>o 业务说明 这里我们会创建三个服务，-个订单服务, -个库存服务, -个账户服务。当用户下单时，会在订单服务中创建一个订单， 然后通过远程调用库存服务来扣减下单商品的库存，再通过远程调用账户服务来扣减用户账户里面的余额，I最后在订单服务中修改订单状态为已完成。该操作跨越三个数据库,有两次远程调用,很明显会有分布式事务问题。</p><p>o 下订单---&gt;扣库存---&gt;减账户(余额)</p><p>· 创建业务数据库</p><p>o seata_ order: 存储订单的数据库;</p><p>o seata_ storage: 存储库存的数据库;</p><p>o seata_ account:存储账户信息的数据库。</p><p>o 建库SQL create database seata_order;create database seata_storage;create database seata_account;</p><p>· 按照上述3库分别建对应业务表</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o seata_ order库下建t_ order表 use seata_order;create table t_order (`id` bigint(20) not null auto_increment primary key,`user_id` bigint(20) default null comment &#39;用户ID&#39;,`product_id` bigint(20) default null comment &#39;产品ID&#39;,`count` int(11) default null comment &#39;数量&#39;,`money` decimal(18,2) default null comment &#39;金额&#39;,`status` int(1) default null comment &#39;订单状态：0-创建中，1-已完结&#39;) engine=INNODB auto_increment = 1 default charset = &#39;utf8&#39;;select * from t_order; </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>o seata_ storage库下建t_ storage 表 use seata_storage;create table t_storage (`id` bigint(20) not null auto_increment primary key,`product_id` bigint(20) default null comment &#39;产品ID&#39;,`total` int(11) default null comment &#39;总库存&#39;,`used` int(11) default null comment &#39;使用库存&#39;,`residue` int(11) default null comment &#39;剩余库存&#39;) engine=INNODB auto_increment = 1 default charset = &#39;utf8&#39;;insert into t_storage(`id`, `product_id`, `total`, `used`, `residue`) values(&#39;1&#39;, &#39;1&#39;, &#39;100&#39; , &#39;0&#39;, &#39;100&#39;);select * from t_storage; </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>o seata_ account库下建t account表 use seata_account;create table t_account (`id` bigint(20) not null auto_increment primary key,`user_id` bigint(20) default null comment &#39;用户ID&#39;,`total` decimal(18,2) default null comment &#39;总额度&#39;,`used` decimal(18,2) default null comment &#39;使用额度&#39;,`residue` decimal(18,2) default &#39;0&#39; null comment &#39;剩余额度&#39;) engine=INNODB auto_increment = 1 default charset = &#39;utf8&#39;;insert into t_account(`id`, `user_id`, `total`, `used`, `residue`) values(&#39;1&#39;, &#39;1&#39;, &#39;10000&#39; , &#39;0&#39;, &#39;10000&#39;);select * from t_account;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>· 按照上述3库分别建对应的回滚日志表</p><p>o 订单-库存-账户3个库下都需要建各自的回滚日志表</p><p>o \\seata-server\\seata\\conf目录下的db. undo_ log.sql</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o 建表SQL -- for AT mode you must to init this sql for you business database. the seata server not need it.CREATE TABLE IF NOT EXISTS `undo_log`(   `id`       BIGINT(20)  NOT NULL AUTO_INCREMENT COMMENT &#39;increment id&#39;,   `branch_id`   BIGINT(20)  NOT NULL COMMENT &#39;branch transaction id&#39;,   `xid`      VARCHAR(100) NOT NULL COMMENT &#39;global transaction id&#39;,   `context`    VARCHAR(128) NOT NULL COMMENT &#39;undo_log context,such as serialization&#39;,   `rollback_info` LONGBLOB   NOT NULL COMMENT &#39;rollback info&#39;,   `log_status`   INT(11)    NOT NULL COMMENT &#39;0:normal status,1:defense status&#39;,   `log_created`  DATETIME   NOT NULL COMMENT &#39;create datetime&#39;,   `log_modified`  DATETIME   NOT NULL COMMENT &#39;modify datetime&#39;,   PRIMARY KEY (`id`),   UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)) ENGINE = InnoDB  AUTO_INCREMENT = 1  DEFAULT CHARSET = utf8 COMMENT =&#39;AT transaction mode undo table&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 最终效果</p><p>o</p><p>订单/库存/账户业务微服务准备</p><p>· 业务需求</p><p>o 下订单-减库存-&gt;扣余额-&gt;改(订单)状态</p><p>· 新建订单Order-Module</p><p>o 新建项目seata-order-service2001</p><p>o改POM<code>&lt;dependencies&gt; &lt;!-- nacos --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- nacos --&gt; &lt;!-- seata--&gt; &lt;dependency&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- seata--&gt; &lt;!--feign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--jdbc--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML</p><p>0.9.0</p><p>· application.yml <code>server: port: 2001spring: application: name: seata-order-service cloud: alibaba: seata: # 自定义事务组名称需要与seata-server中的对应 tx-service-group: fsp_tx_group nacos: discovery: server-addr: 127.0.0.1:8848 datasource: # 当前数据源操作类型 type: com.alibaba.druid.pool.DruidDataSource # mysql驱动类 driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8 username: root password: rootfeign: hystrix: enabled: falselogging: level: io: seata: infomybatis: mapper-locations: classpath*:mapper/*.xml</code></p><p>· file.conf <code>transport { # tcp udt unix-domain-socket type = &quot;TCP&quot; #NIO NATIVE server = &quot;NIO&quot; #enable heartbeat heartbeat = true #thread factory for netty thread-factory { boss-thread-prefix = &quot;NettyBoss&quot; worker-thread-prefix = &quot;NettyServerNIOWorker&quot; server-executor-thread-prefix = &quot;NettyServerBizHandler&quot; share-boss-worker = false client-selector-thread-prefix = &quot;NettyClientSelector&quot; client-selector-thread-size = 1 client-worker-thread-prefix = &quot;NettyClientWorkerThread&quot; # netty boss thread size,will not be used for UDT boss-thread-size = 1 #auto default pin or 8 worker-thread-size = 8 } shutdown { # when destroy server, wait seconds wait = 3 } serialization = &quot;seata&quot; compressor = &quot;none&quot;}service { #vgroup-&gt;rgroup # 事务组名称 vgroup_mapping.fsp_tx_group = &quot;default&quot; #only support single node default.grouplist = &quot;127.0.0.1:8091&quot; #degrade current not support enableDegrade = false #disable disable = false #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent max.commit.retry.timeout = &quot;-1&quot; max.rollback.retry.timeout = &quot;-1&quot;}client { async.commit.buffer.limit = 10000 lock { retry.internal = 10 retry.times = 30 } report.retry.count = 5 tm.commit.retry.count = 1 tm.rollback.retry.count = 1}## transaction log storestore { ## store mode: file、db #mode = &quot;file&quot; mode = &quot;db&quot; ## file store file { dir = &quot;sessionStore&quot; # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions max-branch-session-size = 16384 # globe session size , if exceeded throws exceptions max-global-session-size = 512 # file buffer size , if exceeded allocate new buffer file-write-buffer-cache-size = 16384 # when recover batch read size session.reload.read_size = 100 # async, sync flush-disk-mode = async } ## database store db { ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc. datasource = &quot;dbcp&quot; ## mysql/oracle/h2/oceanbase etc. db-type = &quot;mysql&quot; driver-class-name = &quot;com.mysql.jdbc.Driver&quot; url = &quot;jdbc:mysql://localhost.132:3306/seata&quot; user = &quot;root&quot; password = &quot;root&quot; min-conn = 1 max-conn = 3 global.table = &quot;global_table&quot; branch.table = &quot;branch_table&quot; lock-table = &quot;lock_table&quot; query-limit = 100 }}lock { ## the lock store mode: local、remote mode = &quot;remote&quot; local { ## store locks in user&#39;s database } remote { ## store locks in the seata&#39;s server }}recovery { #schedule committing retry period in milliseconds committing-retry-period = 1000 #schedule asyn committing retry period in milliseconds asyn-committing-retry-period = 1000 #schedule rollbacking retry period in milliseconds rollbacking-retry-period = 1000 #schedule timeout retry period in milliseconds timeout-retry-period = 1000}transaction { undo.data.validation = true undo.log.serialization = &quot;jackson&quot; undo.log.save.days = 7 #schedule delete expired undo_log in milliseconds undo.log.delete.period = 86400000 undo.log.table = &quot;undo_log&quot;}## metrics settingsmetrics { enabled = false registry-type = &quot;compact&quot; # multi exporters use comma divided exporter-list = &quot;prometheus&quot; exporter-prometheus-port = 9898}support { ## spring spring { # auto proxy the DataSource bean datasource.autoproxy = false }}</code></p><p>· registry.conf <code>registry { # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa type = &quot;nacos&quot; nacos { #serverAddr = &quot;localhost&quot; serverAddr = &quot;localhost:8848&quot; namespace = &quot;&quot; cluster = &quot;default&quot; } eureka { serviceUrl = &quot;http://localhost:8761/eureka&quot; application = &quot;default&quot; weight = &quot;1&quot; } redis { serverAddr = &quot;localhost:6379&quot; db = &quot;0&quot; } zk { cluster = &quot;default&quot; serverAddr = &quot;127.0.0.1:2181&quot; session.timeout = 6000 connect.timeout = 2000 } consul { cluster = &quot;default&quot; serverAddr = &quot;127.0.0.1:8500&quot; } etcd3 { cluster = &quot;default&quot; serverAddr = &quot;http://localhost:2379&quot; } sofa { serverAddr = &quot;127.0.0.1:9603&quot; application = &quot;default&quot; region = &quot;DEFAULT_ZONE&quot; datacenter = &quot;DefaultDataCenter&quot; cluster = &quot;default&quot; group = &quot;SEATA_GROUP&quot; addressWaitTime = &quot;3000&quot; } file { name = &quot;file.conf&quot; }}config { # file、nacos 、apollo、zk、consul、etcd3 type = &quot;file&quot; nacos { serverAddr = &quot;localhost&quot; namespace = &quot;&quot; } consul { serverAddr = &quot;127.0.0.1:8500&quot; } apollo { app.id = &quot;seata-server&quot; apollo.meta = &quot;http://192.168.1.204:8801&quot; } zk { serverAddr = &quot;127.0.0.1:2181&quot; session.timeout = 6000 connect.timeout = 2000 } etcd3 { serverAddr = &quot;http://localhost:2379&quot; } file { name = &quot;file.conf&quot; }}</code></p><p>1.4.0</p><p>· application.yml <code>server: port: 3001spring: application: name: seata-order-service cloud: nacos: discovery: server-addr: localhost:8848 alibaba: seata: tx-service-group: seata-order-service-group datasource: # 当前数据源操作类型 type: com.alibaba.druid.pool.DruidDataSource # mysql驱动类 driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8 username: root password: rootfeign: hystrix: enabled: falselogging: level: io: seata: infomybatis: mapper-locations: classpath*:mapper/*.xml# Seata 配置项，对应 SeataProperties 类seata: application-id: ${spring.application.name} # Seata 应用编号，默认为 ${spring.application.name} tx-service-group: my_tx_group # Seata 事务组编号，用于 TC 集群名;同一事务同一分组# enable-auto-data-source-proxy: true # Seata 服务配置项，对应 ServiceProperties 类 service: # 虚拟组和分组的映射 vgroup-mapping: my_tx_group: default # 此处key需要与tx-service-group的value一致，否则会报 no available service &#39;null&#39; found, please make sure registry config correct 异常 config: type: nacos nacos: namespace: &quot;&quot; serverAddr: localhost:8848 group: SEATA_GROUP userName: &quot;nacos&quot; password: &quot;nacos&quot; # Seata 注册中心配置项，对应 RegistryProperties 类 registry: type: nacos # 注册中心类型，默认为 file nacos: application: seata-server# cluster: default # 使用的 Seata 分组# namespace: &quot;&quot;# Nacos 命名空间 group: SEATA_GROUP serverAddr: localhost # Nacos 服务地址 userName: &quot;nacos&quot; password: &quot;nacos&quot;</code></p><p>o 主启动 <code>@EnableDiscoveryClient@EnableFeignClients@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)public class SeataOrderMain2001 { public static void main(String[] args) { SpringApplication.run(SeataOrderMain2001.class, args); }}</code></p><p>o 写业务</p><p>domain</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· CommonResult `/** * 统一返回结果体 **/@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResult&lt;T&gt; {   private Integer code;   private String message;   private T data;   public CommonResult(Integer code, String message) {     this(code, message, null);   }}`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· Order /** * 订单实体类 **/@Data@AllArgsConstructor@NoArgsConstructorpublic class Order {   private Long id;   private Long userId;   private Long productId;   private Integer count;   private BigDecimal money;   /**   * 订单状态 0:创建中,1:已完结   */   private Integer status;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>dao</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>· OrderDao @Mapperpublic interface OrderDao {   /**   * 1 新建订单   * @param order   * @return   */   int create(Order order);   /**   * 2 修改订单状态,从0改为1   * @param userId   * @param status   * @return   */   int update(@Param(&quot;userId&quot;) Long userId, @Param(&quot;status&quot;) Integer status);}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· resources文件夹下新建mapper文件夹后添加</p><p>oOrderMapper.xml<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.bilibili.springcloud.dao.OrderDao&quot;&gt; &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.bilibili.springcloud.domain.Order&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/id&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/result&gt; &lt;result column=&quot;product_id&quot; property=&quot;productId&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/result&gt; &lt;result column=&quot;count&quot; property=&quot;count&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;result column=&quot;money&quot; property=&quot;money&quot; jdbcType=&quot;DECIMAL&quot;&gt;&lt;/result&gt; &lt;result column=&quot;status&quot; property=&quot;status&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;insert id=&quot;create&quot; parameterType=&quot;com.bilibili.springcloud.domain.Order&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into t_order(user_id,product_id,count,money,status) values (#{userId},#{productId},#{count},#{money},0); &lt;/insert&gt; &lt;update id=&quot;update&quot;&gt; update t_order set status =1 where user_id =#{userId} and status=#{status}; &lt;/update&gt;&lt;/mapper&gt;</code></p><p>service</p><p>· OrderService <code>public interface OrderService { /** * 创建订单 * @param order */ void create(Order order);} </code></p><p>· impl</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o OrderServiceImpl /** * 账户 **/@Service@Slf4jpublic class OrderServiceImpl implements OrderService {   @Resource   private OrderDao orderDao;   @Resource   private AccountService accountService;   @Resource   private StorageService storageService;   /**   * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态   * 简单说:   * 下订单-&gt;减库存-&gt;减余额-&gt;改状态   * GlobalTransactional seata开启分布式事务,异常时回滚,name保证唯一即可   *   * @param order 订单对象   */   @Override   ///@GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)   public void create(Order order) {     // 1 新建订单     log.info(&quot;-----&gt;开始新建订单&quot;);     orderDao.create(order);     // 2 扣减库存     log.info(&quot;-----&gt;订单微服务开始调用库存,做扣减Count&quot;);     storageService.decrease(order.getProductId(), order.getCount());     log.info(&quot;-----&gt;订单微服务开始调用库存,做扣减End&quot;);     // 3 扣减账户     log.info(&quot;-----&gt;订单微服务开始调用账户,做扣减Money&quot;);     accountService.decrease(order.getUserId(), order.getMoney());     log.info(&quot;-----&gt;订单微服务开始调用账户,做扣减End&quot;);     // 4 修改订单状态,从0到1,1代表已完成     log.info(&quot;-----&gt;修改订单状态开始&quot;);     orderDao.update(order.getUserId(), 0);     log.info(&quot;-----&gt;下订单结束了,O(∩_∩)O哈哈~&quot;);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· StorageService <code>/** * 库存服务 **/@FeignClient(value = &quot;seata-storage-service&quot;)public interface StorageService { /** * 减库存 * * @param productId * @param count * @return */ @PostMapping(value = &quot;/storage/decrease&quot;) CommonResult decrease(@RequestParam(&quot;productId&quot;) Long productId, @RequestParam(&quot;count&quot;) Integer count);}</code></p><p>· AccountService <code>@FeignClient(value = &quot;seata-account-service&quot;)public interface AccountService { /** * 减余额 * * @param userId * @param money * @return */ @PostMapping(value = &quot;/account/decrease&quot;) CommonResult decrease(@RequestParam(&quot;userId&quot;) Long userId, @RequestParam(&quot;money&quot;) BigDecimal money);}</code></p><p>· IdGeneratorSnowflake <code>@Slf4j@Componentpublic class IdGeneratorSnowflake { private long workerId = 0; private long datacenterId = 1; private Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId); @PostConstruct public void init() { try { workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr()); log.info(&quot;当前机器的workerId:{}&quot;, workerId); } catch (Exception e) { log.info(&quot;当前机器的workerId获取失败&quot;, e); workerId = NetUtil.getLocalhostStr().hashCode(); log.info(&quot;当前机器 workId:{}&quot;, workerId); } } public synchronized long snowflakeId() { return snowflake.nextId(); } public synchronized long snowflakeId(long workerId, long datacenterId) { snowflake = IdUtil.createSnowflake(workerId, datacenterId); return snowflake.nextId(); } public static void main(String[] args) { // 1236610764324864000 System.out.println(new IdGeneratorSnowflake().snowflakeId()); }}</code></p><p>controller <code>@RestControllerpublic class OrderController { @Resource private OrderService orderService; @Resource private IdGeneratorSnowflake idGeneratorSnowflake; /** * 创建订单 * * @param order * @return */ @GetMapping(&quot;/order/create&quot;) public CommonResult create(Order order) { orderService.create(order); return new CommonResult(200, &quot;订单创建成功&quot;); } /** * 生成id,通过雪花算法 * * @return */ @GetMapping(&quot;/snowflake&quot;) public String getIDBySnowflake() { ExecutorService threadPool = Executors.newFixedThreadPool(5); for (int i = 0; i &lt; 20; i++) { threadPool.submit(() -&gt; { System.out.println(idGeneratorSnowflake.snowflakeId()); }); } threadPool.shutdown(); return &quot;hello snowflake&quot;; }}</code></p><p>0.9.0-&gt;config</p><p>· 新建库存Storage -Module</p><p>o 新建项目seata-order-service2002</p><p>o改POM<code>&lt;dependencies&gt; &lt;!-- nacos --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- nacos --&gt; &lt;!-- seata--&gt; &lt;dependency&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- seata--&gt; &lt;!--feign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--jdbc--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML <code>server: port: 2002spring: application: name: seata-storage-service cloud: discovery: server-addr: 127.0.0.1:8848 datasource: # 当前数据源操作类型 type: com.alibaba.druid.pool.DruidDataSource # mysql驱动类 driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/seata_storage?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8 username: root password: rootfeign: hystrix: enabled: falselogging: level: io: seata: infomybatis: mapper-locations: classpath*:mapper/*.xml # Seata 配置项，对应 SeataProperties 类seata: application-id: ${spring.application.name} # Seata 应用编号，默认为 ${spring.application.name} tx-service-group: my_tx_group # Seata 事务组编号，用于 TC 集群名;同一事务同一分组 # enable-auto-data-source-proxy: true # Seata 服务配置项，对应 ServiceProperties 类 service: # 虚拟组和分组的映射 vgroup-mapping: my_tx_group: default # 此处key需要与tx-service-group的value一致，否则会报 no available service &#39;null&#39; found, please make sure registry config correct 异常 config: type: nacos nacos: namespace: &quot;&quot; serverAddr: localhost:8848 group: SEATA_GROUP userName: &quot;nacos&quot; password: &quot;nacos&quot; # Seata 注册中心配置项，对应 RegistryProperties 类 registry: type: nacos # 注册中心类型，默认为 file nacos: application: seata-server # cluster: default # 使用的 Seata 分组 # namespace: &quot;&quot;# Nacos 命名空间 group: SEATA_GROUP serverAddr: localhost # Nacos 服务地址 userName: &quot;nacos&quot; password: &quot;nacos&quot;</code></p><p>o 主启动 <code>@EnableDiscoveryClient@EnableFeignClients@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)public class StorageMain2002 { public static void main(String[] args) { SpringApplication.run(StorageMain2002.class, args); }}</code></p><p>o 写业务</p><p>domain</p><p>· CommonResult <code>/** * 统一返回结果体 **/@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResult&lt;T&gt; { private Integer code; private String message; private T data; public CommonResult(Integer code, String message) { this(code, message, null); }}</code></p><p>· Storage <code>/** * 库存实体类 **/@Data@AllArgsConstructor@NoArgsConstructorpublic class Storage { private Long id; /** * 产品id */ private Long productId; /** * 总库存 */ private Integer total; /** * 已用库存 */ private Integer used; /** * 剩余库存 */ private Integer residue;}</code></p><p>controller <code>@RestControllerpublic class StorageController { @Resource private StorageService storageService; /** * 减库存 * * @param productId * @param count * @return */ @PostMapping(value = &quot;/storage/decrease&quot;) public CommonResult decrease(@RequestParam(&quot;productId&quot;) Long productId, @RequestParam(&quot;count&quot;) Integer count) { storageService.decrease(productId, count); return new CommonResult(200, &quot;扣减库存成功&quot;); }}</code></p><p>dao</p><p>· StorageDao <code>@Mapperpublic interface StorageDao { /** * 减库存 * @param productId * @param count * @return */ int decrease(@Param(&quot;productId&quot;) Long productId, @Param(&quot;count&quot;) Integer count);}</code></p><p>· resources文件夹下新建mapper文件夹后添加</p><p>oStorageMapper.xml<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.bilibili.springcloud.dao.StorageDao&quot;&gt; &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.bilibili.springcloud.domain.Storage&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/id&gt; &lt;result column=&quot;product_id&quot; property=&quot;productId&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/result&gt; &lt;result column=&quot;total&quot; property=&quot;total&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;result column=&quot;used&quot; property=&quot;used&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;result column=&quot;residue&quot; property=&quot;residue&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;!--减库存--&gt; &lt;update id=&quot;decrease&quot;&gt; update t_storage set used =used + #{count},residue=residue-#{count} where product_id=#{productId}; &lt;/update&gt;&lt;/mapper&gt;</code></p><p>service</p><p>· impl</p><p>o StorageServiceImpl <code>@Servicepublic class StorageServiceImpl implements StorageService { @Resource private StorageDao storageDao; /** * 减库存 * * @param productId * @param count * @return */ @Override public void decrease(Long productId, Integer count) { storageDao.decrease(productId, count); }}</code></p><p>· StorageService <code>public interface StorageService { /** * 减库存 * * @param productId * @param count * @return */ void decrease(Long productId, Integer count);}</code></p><p>· 新建账户Account-Module</p><p>o 新建项目seata-order-service2003</p><p>o改POM<code>&lt;dependencies&gt; &lt;!-- nacos --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- nacos --&gt; &lt;!-- seata--&gt; &lt;dependency&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;io.seata&lt;/groupId&gt; &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- seata--&gt; &lt;!--feign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--jdbc--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;</code></p><p>o 写YML <code>server: port: 2002spring: application: name: seata-storage-service cloud: discovery: server-addr: 127.0.0.1:8848 datasource: # 当前数据源操作类型 type: com.alibaba.druid.pool.DruidDataSource # mysql驱动类 driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/seata_storage?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8 username: root password: rootfeign: hystrix: enabled: falselogging: level: io: seata: infomybatis: mapper-locations: classpath*:mapper/*.xml # Seata 配置项，对应 SeataProperties 类seata: application-id: ${spring.application.name} # Seata 应用编号，默认为 ${spring.application.name} tx-service-group: my_tx_group # Seata 事务组编号，用于 TC 集群名;my_tx_group # enable-auto-data-source-proxy: true # Seata 服务配置项，对应 ServiceProperties 类 service: # 虚拟组和分组的映射 vgroup-mapping: my_tx_group: default # 此处key需要与tx-service-group的value一致，否则会报 no available service &#39;null&#39; found, please make sure registry config correct 异常 config: type: nacos nacos: namespace: &quot;&quot; serverAddr: localhost:8848 group: SEATA_GROUP userName: &quot;nacos&quot; password: &quot;nacos&quot; # Seata 注册中心配置项，对应 RegistryProperties 类 registry: type: nacos # 注册中心类型，默认为 file nacos: application: seata-server # cluster: default # 使用的 Seata 分组 # namespace: &quot;&quot;# Nacos 命名空间 group: SEATA_GROUP serverAddr: localhost # Nacos 服务地址 userName: &quot;nacos&quot; password: &quot;nacos&quot;</code></p><p>o 主启动 <code>@EnableDiscoveryClient@EnableFeignClients@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)public class SeataAccountMain2003 { public static void main(String[] args) { SpringApplication.run(SeataAccountMain2003.class, args); }}</code></p><p>o 写业务</p><p>domain</p><p>· CommonResult <code>/** * 统一返回结果体 **/@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResult&lt;T&gt; { private Integer code; private String message; private T data; public CommonResult(Integer code, String message) { this(code, message, null); }}</code></p><p>· Account <code>/** * 账户实体类 */@Data@AllArgsConstructor@NoArgsConstructorpublic class Account { private Long id; /** * 用户id */ private Long userId; /** * 总额度 */ private Integer total; /** * 已用额度 */ private Integer used; /** * 剩余额度 */ private Integer residue;}</code></p><p>controller <code>@RestControllerpublic class AccountController { @Resource private AccountService accountService; @PostMapping(value = &quot;/account/decrease&quot;) public CommonResult decrease(@RequestParam(&quot;userId&quot;) Long userId, @RequestParam(&quot;money&quot;) BigDecimal money) { accountService.decrease(userId, money); return new CommonResult(200, &quot;扣减账户余额成功&quot;); }}</code></p><p>dao</p><p>· AccountDao <code>@Mapperpublic interface AccountDao { /** * 扣减账户余额 * * @param userId * @param money * @return */ int decrease(@Param(&quot;userId&quot;) Long userId, @Param(&quot;money&quot;) BigDecimal money);}</code></p><p>· resources文件夹下新建mapper文件夹后添加</p><p>oAccountMapper.xml<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.bilibili.springcloud.dao.OrderDao&quot;&gt; &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.bilibili.springcloud.domain.Order&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/id&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/result&gt; &lt;result column=&quot;product_id&quot; property=&quot;productId&quot; jdbcType=&quot;BIGINT&quot;&gt;&lt;/result&gt; &lt;result column=&quot;count&quot; property=&quot;count&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;result column=&quot;money&quot; property=&quot;money&quot; jdbcType=&quot;DECIMAL&quot;&gt;&lt;/result&gt; &lt;result column=&quot;status&quot; property=&quot;status&quot; jdbcType=&quot;INTEGER&quot;&gt;&lt;/result&gt; &lt;/resultMap&gt; &lt;insert id=&quot;create&quot; parameterType=&quot;com.bilibili.springcloud.domain.Order&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into t_order(user_id,product_id,count,money,status) values (#{userId},#{productId},#{count},#{money},0); &lt;/insert&gt; &lt;update id=&quot;update&quot;&gt; update t_order set status =1 where user_id =#{userId} and status=#{status}; &lt;/update&gt;&lt;/mapper&gt;</code></p><p>service</p><p>· AccountService <code>/** * 库存服务 **/@Servicepublic interface AccountService { /** * 减库存 * * @param userId 用户id * @param money 金额 * @return */ void decrease(Long userId, BigDecimal money);}</code></p><p>· impl</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o AccountServiceImpl /** * 账户业务实现类 **/@Service@Slf4jpublic class AccountServiceImpl implements AccountService {   @Resource   private AccountDao accountDao;   @Override   public void decrease(Long userId, BigDecimal money) {     log.info(&quot;*******-&gt;account-service中扣减账户余额开始&quot;);     // 模拟超时异常,全局事务回滚     /*try {       // 暂停20秒钟       TimeUnit.SECONDS.sleep(20);     } catch (InterruptedException e) {       e.printStackTrace();     }*/     accountDao.decrease(userId, money);     log.info(&quot;*******-&gt;account-service中扣减账户余额结束&quot;);   }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>· 注意</p><p>o 需要与server端同步到nacos的组名相同</p><p>o 参考</p><p>https://blog.csdn.net/lzb348110175/article/details/107701927</p><p>https://www.cnblogs.com/qlqwjy/p/13909056.html</p><p>Test</p><p>· 下订单-&gt;减库存-&gt;扣余额-&gt;改(订单)状态</p><p>· 数据库初始情况</p><p>o</p><p>· 正常下单</p><p>o http://localhost:2001/order/create?userld=1&amp;productld=1&amp;count=10&amp;money=100</p><p>o</p><p>正常</p><p>· 超时异常，没加@GlobalTransactional</p><p>o AccountServiceImpl添加超时 @Override public void decrease(Long userId, BigDecimal money) { log.info(&quot;<em><strong><strong><strong>-&gt;account-service中扣减账户余额开始&quot;); // 模拟超时异常,全局事务回滚 try { // 暂停20秒钟 TimeUnit.SECONDS.sleep(20); } catch (InterruptedException e) { e.printStackTrace(); } accountDao.decrease(userId, money); log.info(&quot;</strong></strong></strong></em>-&gt;account-service中扣减账户余额结束&quot;); }</p><p>o 数据库情况</p><p>不正常</p><p>o 故障情况</p><p>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为1</p><p>而且由于feign的重试机制，账户余额还有可能被多次扣减</p><p>· 超时异常，添加@GlobalITransactional</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o AccountServiceImpl添加超时 @Override   public void decrease(Long userId, BigDecimal money) {     log.info(&quot;*******-&gt;account-service中扣减账户余额开始&quot;);     // 模拟超时异常,全局事务回滚     try {       // 暂停20秒钟       TimeUnit.SECONDS.sleep(20);     } catch (InterruptedException e) {       e.printStackTrace();     }     accountDao.decrease(userId, money);     log.info(&quot;*******-&gt;account-service中扣减账户余额结束&quot;);   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>o OrderServiceImpl@GlobalTransactional @Override   @GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)   public void create(Order order) {     // 1 新建订单     log.info(&quot;-----&gt;开始新建订单&quot;);     orderDao.create(order);     // 2 扣减库存     log.info(&quot;-----&gt;订单微服务开始调用库存,做扣减Count&quot;);     storageService.decrease(order.getProductId(), order.getCount());     log.info(&quot;-----&gt;订单微服务开始调用库存,做扣减End&quot;);     // 3 扣减账户     log.info(&quot;-----&gt;订单微服务开始调用账户,做扣减Money&quot;);     accountService.decrease(order.getUserId(), order.getMoney());     log.info(&quot;-----&gt;订单微服务开始调用账户,做扣减End&quot;);     // 4 修改订单状态,从0到1,1代表已完成     log.info(&quot;-----&gt;修改订单状态开始&quot;);     orderDao.update(order.getUserId(), 0);     log.info(&quot;-----&gt;下订单结束了,O(∩_∩)O哈哈~&quot;);   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>o 下单后数据库数据并没有任何改变</p><p>事务回滚，没有插入和修改数据</p><p>补充</p><p>· 再看TC/TM/RM三大组件</p><p>o</p><p>o 分布式事务的执行流程</p><p>TM开启分布式事务(TM 向TC注册全局事务记录) ;</p><p>按业务场景，编排数据库、服务等事务内资源(RM向TC汇报资源准备状态) ;</p><p>TM结束分布式事务,事务-阶段结束(TM 通知TC提交/回滚分布式事务) ;</p><p>TC汇总事务信息，决定分布式事务是提交还是回滚;</p><p>TC通知所有RM提交/回滚资源，事务二阶段结束。</p><p>· AT模式如何做到对业务的无侵入</p><p>o 一阶段加载 在一-阶段，Seata会拦截“业务SQL&quot; ，1解析SQL语义，找到“业务SQL&quot; 要更新的业务数据，在业务数据被更新前，将其保存成&quot;before image&quot;2执行“业务SQL&quot;更新业务数据，在业务数据更新之后,3其保存成&quot;after image&quot; ，最后生成行锁。以上操作全部在一个数据库事务内完成，这样保证了-阶段操作的原子性。</p><p>o 二阶段提交 二阶段如是顺利提交的话，因为“业务SQL&quot;在- -阶段已经提交至数据库，所以Seata框架只需将一阶段保存的快照数据和行锁删掉， 完成数据清理即可.</p><p>o 二阶段回滚 二阶段回滚:二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“业务 SQL&quot; .还原业务数据。回滚方式便是用&quot;before image&quot;还原业务数据;但在还顾前要首先要校验脏写,对比“数据库当前业务数据&quot;和&quot;after image&quot;如果两份数据完全一致就说明没有脏写, 可以还原业务数据,如果不一致就说明有脏写, 出现脏写就需要转人工处理。</p><p>· debug</p><p>· 补充</p>',224)]))}const Y=n(z,[["render",Q],["__file","index.html.vue"]]),K=JSON.parse('{"path":"/article/e3gd7xj1/","title":"SpringCloud","lang":"zh-CN","frontmatter":{"title":"SpringCloud","createTime":"2024/12/09 22:37:18","permalink":"/article/e3gd7xj1/","tags":["SpringCloud"]},"headers":[],"readingTime":{"minutes":120.83,"words":36250},"git":{"updatedTime":1740325903000,"contributors":[{"name":"botboy","username":"botboy","email":"ckisaboy@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/botboy?v=4","url":"https://github.com/botboy"}]},"filePathRelative":"notes/guli/SpringCloud.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"4672fc","sort":10001,"name":"guli"}],"bulletin":false}');export{Y as comp,K as data};
